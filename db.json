{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/style-reset.css","path":"style-reset.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"source/assets/img/avatar.jpg","path":"assets/img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/alipay.jpg","path":"assets/img/alipay.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/favicon.ico","path":"assets/img/favicon.ico","modified":0,"renderable":0},{"_id":"source/assets/img/unwebkit-multi.jpg","path":"assets/img/unwebkit-multi.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/webkit-multi.jpg","path":"assets/img/webkit-multi.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/webkit-single.jpg","path":"assets/img/webkit-single.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/wechat.jpeg","path":"assets/img/wechat.jpeg","modified":0,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"source/assets/img/wxpay.jpg","path":"assets/img/wxpay.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/mobile-effect-snap.jpeg","path":"assets/img/mobile-effect-snap.jpeg","modified":0,"renderable":0},{"_id":"source/assets/img/spy-debugger.jpg","path":"assets/img/spy-debugger.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"9b3e8de54e30dc9ea110df99aa4b38f391665ecc","modified":1558337450931},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1558088373150},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1558088373145},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1558088373148},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1558088373153},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1558088373162},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1558088373159},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1558088373164},{"_id":"themes/yilia/_config.yml","hash":"00ade63ad38ff017cc2964b52f3c2537dec36ac0","modified":1559813815600},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1558088373460},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1558088373957},{"_id":"source/_posts/brief-info.md","hash":"878db5b5379427f9d14a878649cfa887aba3542d","modified":1564392784106},{"_id":"source/_posts/forEach-interrupt.md","hash":"8a23236b1beb92c97ad8dc0a9707f895c1dd9571","modified":1558518016481},{"_id":"source/_posts/multiple-diary.md","hash":"acfac439fc05380efa5dd7aa206d34e08a66e0e2","modified":1559811507326},{"_id":"source/_posts/multiple-diary2.md","hash":"f6cc0cbff08c48244e3eee74fe57aa6d726777f3","modified":1559811489317},{"_id":"source/_posts/spy-debugger.md","hash":"939391ba3dd9bb2f11ebef52801985aa9ae222db","modified":1564388425386},{"_id":"source/_posts/text-overflow-ellipsis.md","hash":"8589b6f007367afd0d2124a3ff58098f0ba3c177","modified":1558345084961},{"_id":"source/_posts/this.md","hash":"b25ab38156e2f7e11a164caff0df890d1b0c1bf1","modified":1558504005447},{"_id":"source/_posts/void-0.md","hash":"2c9f1a201fb14d8fe758051a717c3e3e67159dc5","modified":1558593882351},{"_id":"source/_posts/webpack-study.md","hash":"b12f8463b97db0ba5c9ea2055d20601fd20b7b2f","modified":1558604517086},{"_id":"source/_posts/wxwork-link-unRirect.md","hash":"39cebeea68453b645d3a6d4b836d221be92e962e","modified":1558422208581},{"_id":"source/assets/.DS_Store","hash":"27de3d13c29f60ab6e6ce48d0bf1c874516befa0","modified":1563182109822},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1558088373107},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1558088373134},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1558088095004},{"_id":"themes/yilia/.git/index","hash":"70a1d98b5f3763f4bd8d1d277c0404aebce3fc7a","modified":1558088373964},{"_id":"themes/yilia/.git/packed-refs","hash":"76b1aa9479dd3de329935b6d94a6624c5f716d23","modified":1558088373044},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1558088373185},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1558088373178},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1558088373192},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1558088373198},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1558088373206},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1558088373212},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1558088373219},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1558088373412},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1558088373419},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1558088373426},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1558088373433},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1558088373446},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1558088373453},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1558088373439},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"dfa65013460935b50ed94b3d3c6b33ea62a1ea0a","modified":1558842182085},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1558088373946},{"_id":"themes/yilia/source/style-reset.css","hash":"a713d7c639d26d2233e193ea902569c40a61110a","modified":1558842068380},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1558088373467},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1558088373829},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558088373397},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1558088373908},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1558088373926},{"_id":"source/assets/css/gitment.css","hash":"662312ef6b2cc719a0bc5489a293c0f64d97f4dc","modified":1558345029686},{"_id":"source/assets/img/avatar.jpg","hash":"a2e46172f076add79d09605c147407dbba935efd","modified":1558233067869},{"_id":"source/assets/img/alipay.jpg","hash":"d4269a6125d9a8e108175a0e63005f07aa4e7d90","modified":1558232702348},{"_id":"source/assets/img/favicon.ico","hash":"377ee671f1609d0e366d21603f5376b918cde35f","modified":1558234014107},{"_id":"source/assets/img/unwebkit-multi.jpg","hash":"9f8c9232dcbeb520805d080501cd706ade8999f8","modified":1558338070952},{"_id":"source/assets/img/webkit-multi.jpg","hash":"b4562a8505794ac81f7181de2de8a85cf7e04562","modified":1558338071073},{"_id":"source/assets/img/webkit-single.jpg","hash":"0a055bcb5ec09d41d686b96e12a07f50a982a770","modified":1558338071106},{"_id":"source/assets/img/wechat.jpeg","hash":"b3ebbe346ae774063c40e2a278de744a0e4c1bd1","modified":1558234790988},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1558088095008},{"_id":"themes/yilia/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1558088095037},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1558088095058},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1558088095030},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1558088095066},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1558088095023},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1558088095073},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1558088095044},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1558088095016},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1558088094961},{"_id":"themes/yilia/.git/logs/HEAD","hash":"88df962d3d962d5731ffdc1c5c25982c825af46e","modified":1558088373121},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1558088095051},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1558088095080},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1558088373226},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1558088373232},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1558088373239},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1558088373246},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1558088373253},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1558088373267},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1558088373260},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"4ab10944eaf297d326e3c58546ffe4e0be5fe7f0","modified":1558341927391},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1558088373287},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1558088373280},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1558088373294},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1558088373301},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1558088373307},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1558088373314},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1558088373398},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1558088373405},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1558088373836},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1558088373850},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1558088373843},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1558088373856},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1558088373863},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1558088373870},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1558088373877},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1558088373882},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1558088373889},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1558088373474},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1558088373481},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1558088373488},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1558088373495},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1558088373502},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1558088373508},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1558088373515},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"e9872211deeaec597a4a06883c7b8e650b9cf041","modified":1558841362473},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1558088373528},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1558088373569},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1558088373604},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1558088373611},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1558088373617},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1558088373624},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1558088373644},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1558088373651},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1558088373658},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1558088373664},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1558088373671},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1558088373678},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1558088373694},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1558088373702},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1558088373710},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1558088373716},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1558088373724},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1558088373731},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1558088373738},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1558088373754},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1558088373745},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1558088373768},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1558088373775},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1558342318699},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1558088373788},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1558088373782},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1558088373796},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1558088373802},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1558088373809},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1558088373816},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1558088373822},{"_id":"source/assets/img/wxpay.jpg","hash":"11ee213bc3cfabc319999741a7d9f992a9666ed0","modified":1558232702786},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1558088373391},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1558088373114},{"_id":"themes/yilia/.git/objects/pack/pack-a0f8f35f7e2adb194e5e515ef14d51cc69bcc5df.idx","hash":"eb3e363fbce4dc5ba8788c7184487e4de6eb037e","modified":1558088372982},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1558088373322},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1558088373328},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1558088373335},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1558088373342},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"996f02bd52836a4fa4e45829a6a6c3a19e31445c","modified":1558259381140},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1558088373356},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1558088373363},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1558088373383},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1558088373376},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1558088373369},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1558088373535},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1558088373542},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1558088373563},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1558088373556},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1558088373549},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1558088373590},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1558088373576},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1558088373583},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1558088373631},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1558088373634},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1558088373637},{"_id":"source/assets/img/mobile-effect-snap.jpeg","hash":"a0a9c80bbab38abc18d951bfea16e7df52d31c03","modified":1563181962654},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1558088373597},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"88df962d3d962d5731ffdc1c5c25982c825af46e","modified":1558088373124},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1558088373099},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"88df962d3d962d5731ffdc1c5c25982c825af46e","modified":1558088373097},{"_id":"source/assets/img/spy-debugger.jpg","hash":"4b5308c0185da5e218705fa8d96370cdd42d2030","modified":1563181908711},{"_id":"themes/yilia/.git/objects/pack/pack-a0f8f35f7e2adb194e5e515ef14d51cc69bcc5df.pack","hash":"74cfa165490f86f768a90ac8af762c8d651cd0a7","modified":1558088372981}],"Category":[],"Data":[],"Page":[{"_content":".gitment-container {\n  font-family: sans-serif;\n  font-size: 14px;\n  line-height: 1.5;\n  color: #333;\n  word-wrap: break-word;\n}\n\n.gitment-container * {\n  box-sizing: border-box;\n}\n\n.gitment-container *:disabled {\n  cursor: not-allowed;\n}\n\n.gitment-container a,\n.gitment-container a:visited {\n  cursor: pointer;\n  text-decoration: none;\n}\n\n.gitment-container a:hover {\n  text-decoration: underline;\n}\n\n.gitment-container .gitment-hidden {\n  display: none;\n}\n\n.gitment-container .gitment-spinner-icon {\n  fill: #333;\n\n  -webkit-animation: gitment-spin 1s steps(12) infinite;\n  animation: gitment-spin 1s steps(12) infinite;\n}\n\n@-webkit-keyframes gitment-spin {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg)\n  }\n}\n\n@keyframes gitment-spin {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg)\n  }\n}\n\n.gitment-root-container {\n  margin: 19px 0;\n}\n\n.gitment-header-container {\n  margin: 19px 0;\n}\n\n.gitment-header-like-btn,\n.gitment-comment-like-btn {\n  cursor: pointer;\n}\n\n.gitment-comment-like-btn {\n  float: right;\n}\n\n.gitment-comment-like-btn.liked {\n  color: #F44336;\n}\n\n.gitment-header-like-btn svg {\n  vertical-align: middle;\n  height: 30px;\n}\n\n.gitment-comment-like-btn svg {\n  vertical-align: middle;\n  height: 20px;\n}\n\n.gitment-header-like-btn.liked svg,\n.gitment-comment-like-btn.liked svg {\n  fill: #F44336;\n}\n\na.gitment-header-issue-link,\na.gitment-header-issue-link:visited {\n  float: right;\n  line-height: 30px;\n  color: #666;\n}\n\na.gitment-header-issue-link:hover {\n  color: #666;\n}\n\n.gitment-comments-loading,\n.gitment-comments-error,\n.gitment-comments-empty {\n  text-align: center;\n  margin: 50px 0;\n}\n\n.gitment-comments-list {\n  list-style: none;\n  padding-left: 0;\n  margin: 0 0 38px;\n}\n\n.gitment-comment,\n.gitment-editor-container {\n  position: relative;\n  min-height: 60px;\n  padding-left: 60px;\n  margin: 19px 0;\n}\n\n.gitment-comment-avatar,\n.gitment-editor-avatar {\n  float: left;\n  margin-left: -60px;\n}\n\n.gitment-comment-avatar,\n.gitment-comment-avatar-img,\n.gitment-comment-avatar,\n.gitment-editor-avatar-img,\n.gitment-editor-avatar svg {\n  width: 44px;\n  height: 44px;\n  border-radius: 3px;\n}\n\n.gitment-editor-avatar .gitment-github-icon {\n  fill: #fff;\n  background-color: #333;\n}\n\n.gitment-comment-main,\n.gitment-editor-main {\n  position: relative;\n  background: #ffffff;\n  border: 1px solid #CFD8DC;\n  border-radius: 0;\n}\n\n.gitment-editor-main::before,\n.gitment-editor-main::after,\n.gitment-comment-main::before,\n.gitment-comment-main::after {\n  position: absolute;\n  top: 11px;\n  left: -16px;\n  display: block;\n  width: 0;\n  height: 0;\n  pointer-events: none;\n  content: \"\";\n  border-color: transparent;\n  border-style: solid solid outset;\n}\n\n.gitment-editor-main::before,\n.gitment-comment-main::before {\n  border-width: 8px;\n  border-right-color: #CFD8DC;\n}\n\n.gitment-editor-main::after,\n.gitment-comment-main::after {\n  margin-top: 1px;\n  margin-left: 2px;\n  border-width: 7px;\n  border-right-color: #fff;\n}\n\n.gitment-comment-header {\n  margin: 12px 15px;\n  color: #666;\n  background-color: #fff;\n  border-radius: 3px;\n}\n\n.gitment-editor-header {\n  padding: 0;\n  margin: 0;\n  border-bottom: 1px solid #CFD8DC;\n}\n\na.gitment-comment-name,\na.gitment-comment-name:visited {\n  font-weight: 600;\n  color: #00bebe;\n}\n\n.gitment-editor-tabs {\n  margin-bottom: -1px;\n  margin-left: -1px;\n}\n\n.gitment-editor-tab {\n  display: inline-block;\n  padding: 11px 12px;\n  font-size: 14px;\n  line-height: 20px;\n  color: #666;\n  text-decoration: none;\n  background-color: transparent;\n  border-width: 0 1px;\n  border-style: solid;\n  border-color: transparent;\n  border-radius: 0;\n\n  white-space: nowrap;\n  cursor: pointer;\n  user-select: none;\n\n  outline: none;\n}\n\n.gitment-editor-tab.gitment-selected {\n  color: #333;\n  background-color: #fff;\n  border-color: #CFD8DC;\n}\n@media screen and (max-width: 400px) {\n    .gitment-editor-tab {\n        display: none;\n    }\n    .gitment-editor-tab.gitment-selected {\n        display: block;\n    }\n}\n\n.gitment-editor-login {\n  float: right;\n  margin-top: -30px;\n  margin-right: 15px;\n}\n\na.gitment-footer-project-link,\na.gitment-footer-project-link:visited,\na.gitment-editor-login-link,\na.gitment-editor-login-link:visited {\n  color: #2196F3;\n}\n\na.gitment-editor-logout-link,\na.gitment-editor-logout-link:visited {\n  color: #666;\n}\n\na.gitment-editor-logout-link:hover {\n  color: #2196F3;\n  text-decoration: none;\n}\n\n.gitment-comment-body {\n  position: relative;\n  margin: 12px 15px;\n  overflow: hidden;\n  border-radius: 3px;\n}\n\n.gitment-comment-body-folded {\n  cursor: pointer;\n}\n\n.gitment-comment-body-folded::before {\n  display: block !important;\n  content: \"\";\n  position: absolute;\n  width: 100%;\n  left: 0;\n  top: 0;\n  bottom: 50px;\n  pointer-events: none;\n  background: -webkit-linear-gradient(top, rgba(255, 255, 255, 0), rgba(255, 255, 255, .9));\n  background: linear-gradient(180deg, rgba(255, 255, 255, 0), rgba(255, 255, 255, .9));\n}\n\n.gitment-comment-body-folded::after {\n  display: block !important;\n  content: \"Click to Expand\" !important;\n  text-align: center;\n  color: #666;\n  position: absolute;\n  width: 100%;\n  height: 50px;\n  line-height: 50px;\n  left: 0;\n  bottom: 0;\n  pointer-events: none;\n  background: rgba(255, 255, 255, .9);\n}\n\n.gitment-editor-body {\n  margin: 0;\n}\n\n.gitment-comment-body > *:first-child,\n.gitment-editor-preview > *:first-child {\n  margin-top: 0 !important;\n}\n\n.gitment-comment-body > *:last-child,\n.gitment-editor-preview > *:last-child {\n  margin-bottom: 0 !important;\n}\n\n.gitment-editor-body textarea {\n  display: block;\n  width: 100%;\n  min-height: 150px;\n  max-height: 500px;\n  padding: 16px;\n  resize: vertical;\n\n  max-width: 100%;\n  margin: 0;\n  font-size: 14px;\n  line-height: 1.6;\n\n  background-color: #fff;\n\n  color: #333;\n  vertical-align: middle;\n  border: none;\n  border-radius: 0;\n  outline: none;\n  box-shadow: none;\n\n  overflow: visible;\n}\n\n.gitment-editor-body textarea:focus {\n  background-color: #fff;\n}\n\n.gitment-editor-preview {\n  min-height: 150px;\n\n  padding: 16px;\n  background-color: transparent;\n\n  width: 100%;\n  font-size: 14px;\n\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n\n.gitment-editor-footer {\n  padding: 0;\n  margin-top: 10px;\n}\n\n.gitment-editor-footer::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\na.gitment-editor-footer-tip {\n  display: inline-block;\n  padding-top: 10px;\n  font-size: 12px;\n  color: #666;\n}\n\na.gitment-editor-footer-tip:hover {\n  color: #2196F3;\n  text-decoration: none;\n}\n\n.gitment-comments-pagination {\n  list-style: none;\n  text-align: right;\n  border-radius: 0;\n  margin: -19px 0 19px 0;\n}\n\n.gitment-comments-page-item {\n  display: inline-block;\n  cursor: pointer;\n  border: 1px solid #CFD8DC;\n  margin-left: -1px;\n  padding: .25rem .5rem;\n}\n\n.gitment-comments-page-item:hover {\n  background-color: #f5f5f5;\n}\n\n.gitment-comments-page-item.gitment-selected {\n  background-color: #f5f5f5;\n}\n\n.gitment-editor-submit,\n.gitment-comments-init-btn {\n  color: #fff;\n  background-color: #00BCD4;\n\n  position: relative;\n  display: inline-block;\n  padding: 7px 13px;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 20px;\n  white-space: nowrap;\n  vertical-align: middle;\n  cursor: pointer;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  background-size: 110% 110%;\n  border: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n}\n\n.gitment-editor-submit:hover,\n.gitment-comments-init-btn:hover {\n  background-color: #00ACC1;\n}\n\n.gitment-comments-init-btn:disabled,\n.gitment-editor-submit:disabled {\n  color: rgba(255,255,255,0.75);\n  background-color: #4DD0E1;\n  box-shadow: none;\n}\n\n.gitment-editor-submit {\n  float: right;\n}\n\n.gitment-footer-container {\n  margin-top: 30px;\n  margin-bottom: 20px;\n  text-align: right;\n  font-size: 12px;\n}\n\n/*\n * Markdown CSS\n * Copied from https://github.com/sindresorhus/github-markdown-css\n */\n.gitment-markdown {\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  line-height: 1.5;\n  color: #333;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n\n.gitment-markdown .pl-c {\n  color: #969896;\n}\n\n.gitment-markdown .pl-c1,\n.gitment-markdown .pl-s .pl-v {\n  color: #0086b3;\n}\n\n.gitment-markdown .pl-e,\n.gitment-markdown .pl-en {\n  color: #795da3;\n}\n\n.gitment-markdown .pl-smi,\n.gitment-markdown .pl-s .pl-s1 {\n  color: #333;\n}\n\n.gitment-markdown .pl-ent {\n  color: #63a35c;\n}\n\n.gitment-markdown .pl-k {\n  color: #a71d5d;\n}\n\n.gitment-markdown .pl-s,\n.gitment-markdown .pl-pds,\n.gitment-markdown .pl-s .pl-pse .pl-s1,\n.gitment-markdown .pl-sr,\n.gitment-markdown .pl-sr .pl-cce,\n.gitment-markdown .pl-sr .pl-sre,\n.gitment-markdown .pl-sr .pl-sra {\n  color: #183691;\n}\n\n.gitment-markdown .pl-v,\n.gitment-markdown .pl-smw {\n  color: #ed6a43;\n}\n\n.gitment-markdown .pl-bu {\n  color: #b52a1d;\n}\n\n.gitment-markdown .pl-ii {\n  color: #f8f8f8;\n  background-color: #b52a1d;\n}\n\n.gitment-markdown .pl-c2 {\n  color: #f8f8f8;\n  background-color: #b52a1d;\n}\n\n.gitment-markdown .pl-c2::before {\n  content: \"^M\";\n}\n\n.gitment-markdown .pl-sr .pl-cce {\n  font-weight: bold;\n  color: #63a35c;\n}\n\n.gitment-markdown .pl-ml {\n  color: #693a17;\n}\n\n.gitment-markdown .pl-mh,\n.gitment-markdown .pl-mh .pl-en,\n.gitment-markdown .pl-ms {\n  font-weight: bold;\n  color: #1d3e81;\n}\n\n.gitment-markdown .pl-mq {\n  color: #008080;\n}\n\n.gitment-markdown .pl-mi {\n  font-style: italic;\n  color: #333;\n}\n\n.gitment-markdown .pl-mb {\n  font-weight: bold;\n  color: #333;\n}\n\n.gitment-markdown .pl-md {\n  color: #bd2c00;\n  background-color: #ffecec;\n}\n\n.gitment-markdown .pl-mi1 {\n  color: #55a532;\n  background-color: #eaffea;\n}\n\n.gitment-markdown .pl-mc {\n  color: #ef9700;\n  background-color: #ffe3b4;\n}\n\n.gitment-markdown .pl-mi2 {\n  color: #d8d8d8;\n  background-color: #808080;\n}\n\n.gitment-markdown .pl-mdr {\n  font-weight: bold;\n  color: #795da3;\n}\n\n.gitment-markdown .pl-mo {\n  color: #1d3e81;\n}\n\n.gitment-markdown .pl-ba {\n  color: #595e62;\n}\n\n.gitment-markdown .pl-sg {\n  color: #c0c0c0;\n}\n\n.gitment-markdown .pl-corl {\n  text-decoration: underline;\n  color: #183691;\n}\n\n.gitment-markdown .octicon {\n  display: inline-block;\n  vertical-align: text-top;\n  fill: currentColor;\n}\n\n.gitment-markdown a {\n  background-color: transparent;\n  -webkit-text-decoration-skip: objects;\n}\n\n.gitment-markdown a:active,\n.gitment-markdown a:hover {\n  outline-width: 0;\n}\n\n.gitment-markdown strong {\n  font-weight: inherit;\n}\n\n.gitment-markdown strong {\n  font-weight: bolder;\n}\n\n.gitment-markdown h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n.gitment-markdown img {\n  border-style: none;\n}\n\n.gitment-markdown svg:not(:root) {\n  overflow: hidden;\n}\n\n.gitment-markdown code,\n.gitment-markdown kbd,\n.gitment-markdown pre {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n.gitment-markdown hr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible;\n}\n\n.gitment-markdown input {\n  font: inherit;\n  margin: 0;\n}\n\n.gitment-markdown input {\n  overflow: visible;\n}\n\n.gitment-markdown [type=\"checkbox\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.gitment-markdown * {\n  box-sizing: border-box;\n}\n\n.gitment-markdown input {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.gitment-markdown a {\n  color: #0366d6;\n  text-decoration: none;\n}\n\n.gitment-markdown a:hover {\n  text-decoration: underline;\n}\n\n.gitment-markdown strong {\n  font-weight: 600;\n}\n\n.gitment-markdown hr {\n  height: 0;\n  margin: 15px 0;\n  overflow: hidden;\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid #dfe2e5;\n}\n\n.gitment-markdown hr::before {\n  display: table;\n  content: \"\";\n}\n\n.gitment-markdown hr::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.gitment-markdown table {\n  border-spacing: 0;\n  border-collapse: collapse;\n}\n\n.gitment-markdown td,\n.gitment-markdown th {\n  padding: 0;\n}\n\n.gitment-markdown h1,\n.gitment-markdown h2,\n.gitment-markdown h3,\n.gitment-markdown h4,\n.gitment-markdown h5,\n.gitment-markdown h6 {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.gitment-markdown h1 {\n  font-size: 32px;\n  font-weight: 600;\n}\n\n.gitment-markdown h2 {\n  font-size: 24px;\n  font-weight: 600;\n}\n\n.gitment-markdown h3 {\n  font-size: 20px;\n  font-weight: 600;\n}\n\n.gitment-markdown h4 {\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.gitment-markdown h5 {\n  font-size: 14px;\n  font-weight: 600;\n}\n\n.gitment-markdown h6 {\n  font-size: 12px;\n  font-weight: 600;\n}\n\n.gitment-markdown p {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n\n.gitment-markdown blockquote {\n  margin: 0;\n}\n\n.gitment-markdown ul,\n.gitment-markdown ol {\n  padding-left: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.gitment-markdown ol ol,\n.gitment-markdown ul ol {\n  list-style-type: lower-roman;\n}\n\n.gitment-markdown ul ul ol,\n.gitment-markdown ul ol ol,\n.gitment-markdown ol ul ol,\n.gitment-markdown ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.gitment-markdown dd {\n  margin-left: 0;\n}\n\n.gitment-markdown code {\n  font-family: \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: 12px;\n}\n\n.gitment-markdown pre {\n  margin-top: 0;\n  margin-bottom: 0;\n  font: 12px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n}\n\n.gitment-markdown .octicon {\n  vertical-align: text-bottom;\n}\n\n.gitment-markdown .pl-0 {\n  padding-left: 0 !important;\n}\n\n.gitment-markdown .pl-1 {\n  padding-left: 4px !important;\n}\n\n.gitment-markdown .pl-2 {\n  padding-left: 8px !important;\n}\n\n.gitment-markdown .pl-3 {\n  padding-left: 16px !important;\n}\n\n.gitment-markdown .pl-4 {\n  padding-left: 24px !important;\n}\n\n.gitment-markdown .pl-5 {\n  padding-left: 32px !important;\n}\n\n.gitment-markdown .pl-6 {\n  padding-left: 40px !important;\n}\n\n.gitment-markdown::before {\n  display: table;\n  content: \"\";\n}\n\n.gitment-markdown::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.gitment-markdown>*:first-child {\n  margin-top: 0 !important;\n}\n\n.gitment-markdown>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.gitment-markdown a:not([href]) {\n  color: inherit;\n  text-decoration: none;\n}\n\n.gitment-markdown .anchor {\n  float: left;\n  padding-right: 4px;\n  margin-left: -20px;\n  line-height: 1;\n}\n\n.gitment-markdown .anchor:focus {\n  outline: none;\n}\n\n.gitment-markdown p,\n.gitment-markdown blockquote,\n.gitment-markdown ul,\n.gitment-markdown ol,\n.gitment-markdown dl,\n.gitment-markdown table,\n.gitment-markdown pre {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.gitment-markdown hr {\n  height: 0.25em;\n  padding: 0;\n  margin: 24px 0;\n  background-color: #e1e4e8;\n  border: 0;\n}\n\n.gitment-markdown blockquote {\n  padding: 0 1em;\n  color: #6a737d;\n  border-left: 0.25em solid #dfe2e5;\n}\n\n.gitment-markdown blockquote>:first-child {\n  margin-top: 0;\n}\n\n.gitment-markdown blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.gitment-markdown kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font-size: 11px;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #c6cbd1;\n  border-bottom-color: #959da5;\n  border-radius: 0;\n  box-shadow: inset 0 -1px 0 #959da5;\n}\n\n.gitment-markdown h1,\n.gitment-markdown h2,\n.gitment-markdown h3,\n.gitment-markdown h4,\n.gitment-markdown h5,\n.gitment-markdown h6 {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: 600;\n  line-height: 1.25;\n}\n\n.gitment-markdown h1 .octicon-link,\n.gitment-markdown h2 .octicon-link,\n.gitment-markdown h3 .octicon-link,\n.gitment-markdown h4 .octicon-link,\n.gitment-markdown h5 .octicon-link,\n.gitment-markdown h6 .octicon-link {\n  color: #1b1f23;\n  vertical-align: middle;\n  visibility: hidden;\n}\n\n.gitment-markdown h1:hover .anchor,\n.gitment-markdown h2:hover .anchor,\n.gitment-markdown h3:hover .anchor,\n.gitment-markdown h4:hover .anchor,\n.gitment-markdown h5:hover .anchor,\n.gitment-markdown h6:hover .anchor {\n  text-decoration: none;\n}\n\n.gitment-markdown h1:hover .anchor .octicon-link,\n.gitment-markdown h2:hover .anchor .octicon-link,\n.gitment-markdown h3:hover .anchor .octicon-link,\n.gitment-markdown h4:hover .anchor .octicon-link,\n.gitment-markdown h5:hover .anchor .octicon-link,\n.gitment-markdown h6:hover .anchor .octicon-link {\n  visibility: visible;\n}\n\n.gitment-markdown h1 {\n  padding-bottom: 0.3em;\n  font-size: 2em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.gitment-markdown h2 {\n  padding-bottom: 0.3em;\n  font-size: 1.5em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.gitment-markdown h3 {\n  font-size: 1.25em;\n}\n\n.gitment-markdown h4 {\n  font-size: 1em;\n}\n\n.gitment-markdown h5 {\n  font-size: 0.875em;\n}\n\n.gitment-markdown h6 {\n  font-size: 0.85em;\n  color: #6a737d;\n}\n\n.gitment-markdown ul,\n.gitment-markdown ol {\n  padding-left: 2em;\n}\n\n.gitment-markdown ul ul,\n.gitment-markdown ul ol,\n.gitment-markdown ol ol,\n.gitment-markdown ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.gitment-markdown li>p {\n  margin-top: 16px;\n}\n\n.gitment-markdown li+li {\n  margin-top: 0.25em;\n}\n\n.gitment-markdown dl {\n  padding: 0;\n}\n\n.gitment-markdown dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: 600;\n}\n\n.gitment-markdown dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.gitment-markdown table {\n  display: block;\n  width: 100%;\n  overflow: auto;\n}\n\n.gitment-markdown table th {\n  font-weight: 600;\n}\n\n.gitment-markdown table th,\n.gitment-markdown table td {\n  padding: 6px 13px;\n  border: 1px solid #dfe2e5;\n}\n\n.gitment-markdown table tr {\n  background-color: #fff;\n  border-top: 1px solid #c6cbd1;\n}\n\n.gitment-markdown table tr:nth-child(2n) {\n  background-color: #f5f5f5;\n}\n\n.gitment-markdown img {\n  max-width: 100%;\n  box-sizing: content-box;\n  background-color: #fff;\n}\n\n.gitment-markdown code {\n  padding: 0;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n  margin: 0;\n  font-size: 85%;\n  background-color: rgba(27,31,35,0.05);\n  border-radius: 0;\n}\n\n.gitment-markdown code::before,\n.gitment-markdown code::after {\n  letter-spacing: -0.2em;\n  content: \"\\00a0\";\n}\n\n.gitment-markdown pre {\n  word-wrap: normal;\n}\n\n.gitment-markdown pre>code {\n  padding: 0;\n  margin: 0;\n  font-size: 100%;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.gitment-markdown .highlight {\n  margin-bottom: 16px;\n}\n\n.gitment-markdown .highlight pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.gitment-markdown .highlight pre,\n.gitment-markdown pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: #f5f5f5;\n  border-radius: 0;\n}\n\n.gitment-markdown pre code {\n  display: inline;\n  max-width: auto;\n  padding: 0;\n  margin: 0;\n  overflow: visible;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.gitment-markdown pre code::before,\n.gitment-markdown pre code::after {\n  content: normal;\n}\n\n.gitment-markdown .full-commit .btn-outline:not(:disabled):hover {\n  color: #005cc5;\n  border-color: #005cc5;\n}\n\n.gitment-markdown kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fcfcfc;\n  border: solid 1px #c6cbd1;\n  border-bottom-color: #959da5;\n  border-radius: 0;\n  box-shadow: inset 0 -1px 0 #959da5;\n}\n\n.gitment-markdown :checked+.radio-label {\n  position: relative;\n  z-index: 1;\n  border-color: #0366d6;\n}\n\n.gitment-markdown .task-list-item {\n  list-style-type: none;\n}\n\n.gitment-markdown .task-list-item+.task-list-item {\n  margin-top: 3px;\n}\n\n.gitment-markdown .task-list-item input {\n  margin: 0 0.2em 0.25em -1.6em;\n  vertical-align: middle;\n}\n\n.gitment-markdown hr {\n  border-bottom-color: #eee;\n}","source":"assets/css/gitment.css","raw":".gitment-container {\n  font-family: sans-serif;\n  font-size: 14px;\n  line-height: 1.5;\n  color: #333;\n  word-wrap: break-word;\n}\n\n.gitment-container * {\n  box-sizing: border-box;\n}\n\n.gitment-container *:disabled {\n  cursor: not-allowed;\n}\n\n.gitment-container a,\n.gitment-container a:visited {\n  cursor: pointer;\n  text-decoration: none;\n}\n\n.gitment-container a:hover {\n  text-decoration: underline;\n}\n\n.gitment-container .gitment-hidden {\n  display: none;\n}\n\n.gitment-container .gitment-spinner-icon {\n  fill: #333;\n\n  -webkit-animation: gitment-spin 1s steps(12) infinite;\n  animation: gitment-spin 1s steps(12) infinite;\n}\n\n@-webkit-keyframes gitment-spin {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg)\n  }\n}\n\n@keyframes gitment-spin {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg)\n  }\n}\n\n.gitment-root-container {\n  margin: 19px 0;\n}\n\n.gitment-header-container {\n  margin: 19px 0;\n}\n\n.gitment-header-like-btn,\n.gitment-comment-like-btn {\n  cursor: pointer;\n}\n\n.gitment-comment-like-btn {\n  float: right;\n}\n\n.gitment-comment-like-btn.liked {\n  color: #F44336;\n}\n\n.gitment-header-like-btn svg {\n  vertical-align: middle;\n  height: 30px;\n}\n\n.gitment-comment-like-btn svg {\n  vertical-align: middle;\n  height: 20px;\n}\n\n.gitment-header-like-btn.liked svg,\n.gitment-comment-like-btn.liked svg {\n  fill: #F44336;\n}\n\na.gitment-header-issue-link,\na.gitment-header-issue-link:visited {\n  float: right;\n  line-height: 30px;\n  color: #666;\n}\n\na.gitment-header-issue-link:hover {\n  color: #666;\n}\n\n.gitment-comments-loading,\n.gitment-comments-error,\n.gitment-comments-empty {\n  text-align: center;\n  margin: 50px 0;\n}\n\n.gitment-comments-list {\n  list-style: none;\n  padding-left: 0;\n  margin: 0 0 38px;\n}\n\n.gitment-comment,\n.gitment-editor-container {\n  position: relative;\n  min-height: 60px;\n  padding-left: 60px;\n  margin: 19px 0;\n}\n\n.gitment-comment-avatar,\n.gitment-editor-avatar {\n  float: left;\n  margin-left: -60px;\n}\n\n.gitment-comment-avatar,\n.gitment-comment-avatar-img,\n.gitment-comment-avatar,\n.gitment-editor-avatar-img,\n.gitment-editor-avatar svg {\n  width: 44px;\n  height: 44px;\n  border-radius: 3px;\n}\n\n.gitment-editor-avatar .gitment-github-icon {\n  fill: #fff;\n  background-color: #333;\n}\n\n.gitment-comment-main,\n.gitment-editor-main {\n  position: relative;\n  background: #ffffff;\n  border: 1px solid #CFD8DC;\n  border-radius: 0;\n}\n\n.gitment-editor-main::before,\n.gitment-editor-main::after,\n.gitment-comment-main::before,\n.gitment-comment-main::after {\n  position: absolute;\n  top: 11px;\n  left: -16px;\n  display: block;\n  width: 0;\n  height: 0;\n  pointer-events: none;\n  content: \"\";\n  border-color: transparent;\n  border-style: solid solid outset;\n}\n\n.gitment-editor-main::before,\n.gitment-comment-main::before {\n  border-width: 8px;\n  border-right-color: #CFD8DC;\n}\n\n.gitment-editor-main::after,\n.gitment-comment-main::after {\n  margin-top: 1px;\n  margin-left: 2px;\n  border-width: 7px;\n  border-right-color: #fff;\n}\n\n.gitment-comment-header {\n  margin: 12px 15px;\n  color: #666;\n  background-color: #fff;\n  border-radius: 3px;\n}\n\n.gitment-editor-header {\n  padding: 0;\n  margin: 0;\n  border-bottom: 1px solid #CFD8DC;\n}\n\na.gitment-comment-name,\na.gitment-comment-name:visited {\n  font-weight: 600;\n  color: #00bebe;\n}\n\n.gitment-editor-tabs {\n  margin-bottom: -1px;\n  margin-left: -1px;\n}\n\n.gitment-editor-tab {\n  display: inline-block;\n  padding: 11px 12px;\n  font-size: 14px;\n  line-height: 20px;\n  color: #666;\n  text-decoration: none;\n  background-color: transparent;\n  border-width: 0 1px;\n  border-style: solid;\n  border-color: transparent;\n  border-radius: 0;\n\n  white-space: nowrap;\n  cursor: pointer;\n  user-select: none;\n\n  outline: none;\n}\n\n.gitment-editor-tab.gitment-selected {\n  color: #333;\n  background-color: #fff;\n  border-color: #CFD8DC;\n}\n@media screen and (max-width: 400px) {\n    .gitment-editor-tab {\n        display: none;\n    }\n    .gitment-editor-tab.gitment-selected {\n        display: block;\n    }\n}\n\n.gitment-editor-login {\n  float: right;\n  margin-top: -30px;\n  margin-right: 15px;\n}\n\na.gitment-footer-project-link,\na.gitment-footer-project-link:visited,\na.gitment-editor-login-link,\na.gitment-editor-login-link:visited {\n  color: #2196F3;\n}\n\na.gitment-editor-logout-link,\na.gitment-editor-logout-link:visited {\n  color: #666;\n}\n\na.gitment-editor-logout-link:hover {\n  color: #2196F3;\n  text-decoration: none;\n}\n\n.gitment-comment-body {\n  position: relative;\n  margin: 12px 15px;\n  overflow: hidden;\n  border-radius: 3px;\n}\n\n.gitment-comment-body-folded {\n  cursor: pointer;\n}\n\n.gitment-comment-body-folded::before {\n  display: block !important;\n  content: \"\";\n  position: absolute;\n  width: 100%;\n  left: 0;\n  top: 0;\n  bottom: 50px;\n  pointer-events: none;\n  background: -webkit-linear-gradient(top, rgba(255, 255, 255, 0), rgba(255, 255, 255, .9));\n  background: linear-gradient(180deg, rgba(255, 255, 255, 0), rgba(255, 255, 255, .9));\n}\n\n.gitment-comment-body-folded::after {\n  display: block !important;\n  content: \"Click to Expand\" !important;\n  text-align: center;\n  color: #666;\n  position: absolute;\n  width: 100%;\n  height: 50px;\n  line-height: 50px;\n  left: 0;\n  bottom: 0;\n  pointer-events: none;\n  background: rgba(255, 255, 255, .9);\n}\n\n.gitment-editor-body {\n  margin: 0;\n}\n\n.gitment-comment-body > *:first-child,\n.gitment-editor-preview > *:first-child {\n  margin-top: 0 !important;\n}\n\n.gitment-comment-body > *:last-child,\n.gitment-editor-preview > *:last-child {\n  margin-bottom: 0 !important;\n}\n\n.gitment-editor-body textarea {\n  display: block;\n  width: 100%;\n  min-height: 150px;\n  max-height: 500px;\n  padding: 16px;\n  resize: vertical;\n\n  max-width: 100%;\n  margin: 0;\n  font-size: 14px;\n  line-height: 1.6;\n\n  background-color: #fff;\n\n  color: #333;\n  vertical-align: middle;\n  border: none;\n  border-radius: 0;\n  outline: none;\n  box-shadow: none;\n\n  overflow: visible;\n}\n\n.gitment-editor-body textarea:focus {\n  background-color: #fff;\n}\n\n.gitment-editor-preview {\n  min-height: 150px;\n\n  padding: 16px;\n  background-color: transparent;\n\n  width: 100%;\n  font-size: 14px;\n\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n\n.gitment-editor-footer {\n  padding: 0;\n  margin-top: 10px;\n}\n\n.gitment-editor-footer::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\na.gitment-editor-footer-tip {\n  display: inline-block;\n  padding-top: 10px;\n  font-size: 12px;\n  color: #666;\n}\n\na.gitment-editor-footer-tip:hover {\n  color: #2196F3;\n  text-decoration: none;\n}\n\n.gitment-comments-pagination {\n  list-style: none;\n  text-align: right;\n  border-radius: 0;\n  margin: -19px 0 19px 0;\n}\n\n.gitment-comments-page-item {\n  display: inline-block;\n  cursor: pointer;\n  border: 1px solid #CFD8DC;\n  margin-left: -1px;\n  padding: .25rem .5rem;\n}\n\n.gitment-comments-page-item:hover {\n  background-color: #f5f5f5;\n}\n\n.gitment-comments-page-item.gitment-selected {\n  background-color: #f5f5f5;\n}\n\n.gitment-editor-submit,\n.gitment-comments-init-btn {\n  color: #fff;\n  background-color: #00BCD4;\n\n  position: relative;\n  display: inline-block;\n  padding: 7px 13px;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 20px;\n  white-space: nowrap;\n  vertical-align: middle;\n  cursor: pointer;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  background-size: 110% 110%;\n  border: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n}\n\n.gitment-editor-submit:hover,\n.gitment-comments-init-btn:hover {\n  background-color: #00ACC1;\n}\n\n.gitment-comments-init-btn:disabled,\n.gitment-editor-submit:disabled {\n  color: rgba(255,255,255,0.75);\n  background-color: #4DD0E1;\n  box-shadow: none;\n}\n\n.gitment-editor-submit {\n  float: right;\n}\n\n.gitment-footer-container {\n  margin-top: 30px;\n  margin-bottom: 20px;\n  text-align: right;\n  font-size: 12px;\n}\n\n/*\n * Markdown CSS\n * Copied from https://github.com/sindresorhus/github-markdown-css\n */\n.gitment-markdown {\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  line-height: 1.5;\n  color: #333;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n\n.gitment-markdown .pl-c {\n  color: #969896;\n}\n\n.gitment-markdown .pl-c1,\n.gitment-markdown .pl-s .pl-v {\n  color: #0086b3;\n}\n\n.gitment-markdown .pl-e,\n.gitment-markdown .pl-en {\n  color: #795da3;\n}\n\n.gitment-markdown .pl-smi,\n.gitment-markdown .pl-s .pl-s1 {\n  color: #333;\n}\n\n.gitment-markdown .pl-ent {\n  color: #63a35c;\n}\n\n.gitment-markdown .pl-k {\n  color: #a71d5d;\n}\n\n.gitment-markdown .pl-s,\n.gitment-markdown .pl-pds,\n.gitment-markdown .pl-s .pl-pse .pl-s1,\n.gitment-markdown .pl-sr,\n.gitment-markdown .pl-sr .pl-cce,\n.gitment-markdown .pl-sr .pl-sre,\n.gitment-markdown .pl-sr .pl-sra {\n  color: #183691;\n}\n\n.gitment-markdown .pl-v,\n.gitment-markdown .pl-smw {\n  color: #ed6a43;\n}\n\n.gitment-markdown .pl-bu {\n  color: #b52a1d;\n}\n\n.gitment-markdown .pl-ii {\n  color: #f8f8f8;\n  background-color: #b52a1d;\n}\n\n.gitment-markdown .pl-c2 {\n  color: #f8f8f8;\n  background-color: #b52a1d;\n}\n\n.gitment-markdown .pl-c2::before {\n  content: \"^M\";\n}\n\n.gitment-markdown .pl-sr .pl-cce {\n  font-weight: bold;\n  color: #63a35c;\n}\n\n.gitment-markdown .pl-ml {\n  color: #693a17;\n}\n\n.gitment-markdown .pl-mh,\n.gitment-markdown .pl-mh .pl-en,\n.gitment-markdown .pl-ms {\n  font-weight: bold;\n  color: #1d3e81;\n}\n\n.gitment-markdown .pl-mq {\n  color: #008080;\n}\n\n.gitment-markdown .pl-mi {\n  font-style: italic;\n  color: #333;\n}\n\n.gitment-markdown .pl-mb {\n  font-weight: bold;\n  color: #333;\n}\n\n.gitment-markdown .pl-md {\n  color: #bd2c00;\n  background-color: #ffecec;\n}\n\n.gitment-markdown .pl-mi1 {\n  color: #55a532;\n  background-color: #eaffea;\n}\n\n.gitment-markdown .pl-mc {\n  color: #ef9700;\n  background-color: #ffe3b4;\n}\n\n.gitment-markdown .pl-mi2 {\n  color: #d8d8d8;\n  background-color: #808080;\n}\n\n.gitment-markdown .pl-mdr {\n  font-weight: bold;\n  color: #795da3;\n}\n\n.gitment-markdown .pl-mo {\n  color: #1d3e81;\n}\n\n.gitment-markdown .pl-ba {\n  color: #595e62;\n}\n\n.gitment-markdown .pl-sg {\n  color: #c0c0c0;\n}\n\n.gitment-markdown .pl-corl {\n  text-decoration: underline;\n  color: #183691;\n}\n\n.gitment-markdown .octicon {\n  display: inline-block;\n  vertical-align: text-top;\n  fill: currentColor;\n}\n\n.gitment-markdown a {\n  background-color: transparent;\n  -webkit-text-decoration-skip: objects;\n}\n\n.gitment-markdown a:active,\n.gitment-markdown a:hover {\n  outline-width: 0;\n}\n\n.gitment-markdown strong {\n  font-weight: inherit;\n}\n\n.gitment-markdown strong {\n  font-weight: bolder;\n}\n\n.gitment-markdown h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n.gitment-markdown img {\n  border-style: none;\n}\n\n.gitment-markdown svg:not(:root) {\n  overflow: hidden;\n}\n\n.gitment-markdown code,\n.gitment-markdown kbd,\n.gitment-markdown pre {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n.gitment-markdown hr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible;\n}\n\n.gitment-markdown input {\n  font: inherit;\n  margin: 0;\n}\n\n.gitment-markdown input {\n  overflow: visible;\n}\n\n.gitment-markdown [type=\"checkbox\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.gitment-markdown * {\n  box-sizing: border-box;\n}\n\n.gitment-markdown input {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.gitment-markdown a {\n  color: #0366d6;\n  text-decoration: none;\n}\n\n.gitment-markdown a:hover {\n  text-decoration: underline;\n}\n\n.gitment-markdown strong {\n  font-weight: 600;\n}\n\n.gitment-markdown hr {\n  height: 0;\n  margin: 15px 0;\n  overflow: hidden;\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid #dfe2e5;\n}\n\n.gitment-markdown hr::before {\n  display: table;\n  content: \"\";\n}\n\n.gitment-markdown hr::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.gitment-markdown table {\n  border-spacing: 0;\n  border-collapse: collapse;\n}\n\n.gitment-markdown td,\n.gitment-markdown th {\n  padding: 0;\n}\n\n.gitment-markdown h1,\n.gitment-markdown h2,\n.gitment-markdown h3,\n.gitment-markdown h4,\n.gitment-markdown h5,\n.gitment-markdown h6 {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.gitment-markdown h1 {\n  font-size: 32px;\n  font-weight: 600;\n}\n\n.gitment-markdown h2 {\n  font-size: 24px;\n  font-weight: 600;\n}\n\n.gitment-markdown h3 {\n  font-size: 20px;\n  font-weight: 600;\n}\n\n.gitment-markdown h4 {\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.gitment-markdown h5 {\n  font-size: 14px;\n  font-weight: 600;\n}\n\n.gitment-markdown h6 {\n  font-size: 12px;\n  font-weight: 600;\n}\n\n.gitment-markdown p {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n\n.gitment-markdown blockquote {\n  margin: 0;\n}\n\n.gitment-markdown ul,\n.gitment-markdown ol {\n  padding-left: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.gitment-markdown ol ol,\n.gitment-markdown ul ol {\n  list-style-type: lower-roman;\n}\n\n.gitment-markdown ul ul ol,\n.gitment-markdown ul ol ol,\n.gitment-markdown ol ul ol,\n.gitment-markdown ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.gitment-markdown dd {\n  margin-left: 0;\n}\n\n.gitment-markdown code {\n  font-family: \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: 12px;\n}\n\n.gitment-markdown pre {\n  margin-top: 0;\n  margin-bottom: 0;\n  font: 12px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n}\n\n.gitment-markdown .octicon {\n  vertical-align: text-bottom;\n}\n\n.gitment-markdown .pl-0 {\n  padding-left: 0 !important;\n}\n\n.gitment-markdown .pl-1 {\n  padding-left: 4px !important;\n}\n\n.gitment-markdown .pl-2 {\n  padding-left: 8px !important;\n}\n\n.gitment-markdown .pl-3 {\n  padding-left: 16px !important;\n}\n\n.gitment-markdown .pl-4 {\n  padding-left: 24px !important;\n}\n\n.gitment-markdown .pl-5 {\n  padding-left: 32px !important;\n}\n\n.gitment-markdown .pl-6 {\n  padding-left: 40px !important;\n}\n\n.gitment-markdown::before {\n  display: table;\n  content: \"\";\n}\n\n.gitment-markdown::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.gitment-markdown>*:first-child {\n  margin-top: 0 !important;\n}\n\n.gitment-markdown>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.gitment-markdown a:not([href]) {\n  color: inherit;\n  text-decoration: none;\n}\n\n.gitment-markdown .anchor {\n  float: left;\n  padding-right: 4px;\n  margin-left: -20px;\n  line-height: 1;\n}\n\n.gitment-markdown .anchor:focus {\n  outline: none;\n}\n\n.gitment-markdown p,\n.gitment-markdown blockquote,\n.gitment-markdown ul,\n.gitment-markdown ol,\n.gitment-markdown dl,\n.gitment-markdown table,\n.gitment-markdown pre {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.gitment-markdown hr {\n  height: 0.25em;\n  padding: 0;\n  margin: 24px 0;\n  background-color: #e1e4e8;\n  border: 0;\n}\n\n.gitment-markdown blockquote {\n  padding: 0 1em;\n  color: #6a737d;\n  border-left: 0.25em solid #dfe2e5;\n}\n\n.gitment-markdown blockquote>:first-child {\n  margin-top: 0;\n}\n\n.gitment-markdown blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.gitment-markdown kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font-size: 11px;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #c6cbd1;\n  border-bottom-color: #959da5;\n  border-radius: 0;\n  box-shadow: inset 0 -1px 0 #959da5;\n}\n\n.gitment-markdown h1,\n.gitment-markdown h2,\n.gitment-markdown h3,\n.gitment-markdown h4,\n.gitment-markdown h5,\n.gitment-markdown h6 {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: 600;\n  line-height: 1.25;\n}\n\n.gitment-markdown h1 .octicon-link,\n.gitment-markdown h2 .octicon-link,\n.gitment-markdown h3 .octicon-link,\n.gitment-markdown h4 .octicon-link,\n.gitment-markdown h5 .octicon-link,\n.gitment-markdown h6 .octicon-link {\n  color: #1b1f23;\n  vertical-align: middle;\n  visibility: hidden;\n}\n\n.gitment-markdown h1:hover .anchor,\n.gitment-markdown h2:hover .anchor,\n.gitment-markdown h3:hover .anchor,\n.gitment-markdown h4:hover .anchor,\n.gitment-markdown h5:hover .anchor,\n.gitment-markdown h6:hover .anchor {\n  text-decoration: none;\n}\n\n.gitment-markdown h1:hover .anchor .octicon-link,\n.gitment-markdown h2:hover .anchor .octicon-link,\n.gitment-markdown h3:hover .anchor .octicon-link,\n.gitment-markdown h4:hover .anchor .octicon-link,\n.gitment-markdown h5:hover .anchor .octicon-link,\n.gitment-markdown h6:hover .anchor .octicon-link {\n  visibility: visible;\n}\n\n.gitment-markdown h1 {\n  padding-bottom: 0.3em;\n  font-size: 2em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.gitment-markdown h2 {\n  padding-bottom: 0.3em;\n  font-size: 1.5em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.gitment-markdown h3 {\n  font-size: 1.25em;\n}\n\n.gitment-markdown h4 {\n  font-size: 1em;\n}\n\n.gitment-markdown h5 {\n  font-size: 0.875em;\n}\n\n.gitment-markdown h6 {\n  font-size: 0.85em;\n  color: #6a737d;\n}\n\n.gitment-markdown ul,\n.gitment-markdown ol {\n  padding-left: 2em;\n}\n\n.gitment-markdown ul ul,\n.gitment-markdown ul ol,\n.gitment-markdown ol ol,\n.gitment-markdown ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.gitment-markdown li>p {\n  margin-top: 16px;\n}\n\n.gitment-markdown li+li {\n  margin-top: 0.25em;\n}\n\n.gitment-markdown dl {\n  padding: 0;\n}\n\n.gitment-markdown dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: 600;\n}\n\n.gitment-markdown dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.gitment-markdown table {\n  display: block;\n  width: 100%;\n  overflow: auto;\n}\n\n.gitment-markdown table th {\n  font-weight: 600;\n}\n\n.gitment-markdown table th,\n.gitment-markdown table td {\n  padding: 6px 13px;\n  border: 1px solid #dfe2e5;\n}\n\n.gitment-markdown table tr {\n  background-color: #fff;\n  border-top: 1px solid #c6cbd1;\n}\n\n.gitment-markdown table tr:nth-child(2n) {\n  background-color: #f5f5f5;\n}\n\n.gitment-markdown img {\n  max-width: 100%;\n  box-sizing: content-box;\n  background-color: #fff;\n}\n\n.gitment-markdown code {\n  padding: 0;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n  margin: 0;\n  font-size: 85%;\n  background-color: rgba(27,31,35,0.05);\n  border-radius: 0;\n}\n\n.gitment-markdown code::before,\n.gitment-markdown code::after {\n  letter-spacing: -0.2em;\n  content: \"\\00a0\";\n}\n\n.gitment-markdown pre {\n  word-wrap: normal;\n}\n\n.gitment-markdown pre>code {\n  padding: 0;\n  margin: 0;\n  font-size: 100%;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.gitment-markdown .highlight {\n  margin-bottom: 16px;\n}\n\n.gitment-markdown .highlight pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.gitment-markdown .highlight pre,\n.gitment-markdown pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: #f5f5f5;\n  border-radius: 0;\n}\n\n.gitment-markdown pre code {\n  display: inline;\n  max-width: auto;\n  padding: 0;\n  margin: 0;\n  overflow: visible;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.gitment-markdown pre code::before,\n.gitment-markdown pre code::after {\n  content: normal;\n}\n\n.gitment-markdown .full-commit .btn-outline:not(:disabled):hover {\n  color: #005cc5;\n  border-color: #005cc5;\n}\n\n.gitment-markdown kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fcfcfc;\n  border: solid 1px #c6cbd1;\n  border-bottom-color: #959da5;\n  border-radius: 0;\n  box-shadow: inset 0 -1px 0 #959da5;\n}\n\n.gitment-markdown :checked+.radio-label {\n  position: relative;\n  z-index: 1;\n  border-color: #0366d6;\n}\n\n.gitment-markdown .task-list-item {\n  list-style-type: none;\n}\n\n.gitment-markdown .task-list-item+.task-list-item {\n  margin-top: 3px;\n}\n\n.gitment-markdown .task-list-item input {\n  margin: 0 0.2em 0.25em -1.6em;\n  vertical-align: middle;\n}\n\n.gitment-markdown hr {\n  border-bottom-color: #eee;\n}","date":"2019-07-04T05:44:17.666Z","updated":"2019-05-20T09:37:09.686Z","path":"assets/css/gitment.css","layout":"false","title":"","comments":1,"_id":"cjyo49r6n000su16t09ka28te","content":".gitment-container {\n  font-family: sans-serif;\n  font-size: 14px;\n  line-height: 1.5;\n  color: #333;\n  word-wrap: break-word;\n}\n\n.gitment-container * {\n  box-sizing: border-box;\n}\n\n.gitment-container *:disabled {\n  cursor: not-allowed;\n}\n\n.gitment-container a,\n.gitment-container a:visited {\n  cursor: pointer;\n  text-decoration: none;\n}\n\n.gitment-container a:hover {\n  text-decoration: underline;\n}\n\n.gitment-container .gitment-hidden {\n  display: none;\n}\n\n.gitment-container .gitment-spinner-icon {\n  fill: #333;\n\n  -webkit-animation: gitment-spin 1s steps(12) infinite;\n  animation: gitment-spin 1s steps(12) infinite;\n}\n\n@-webkit-keyframes gitment-spin {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg)\n  }\n}\n\n@keyframes gitment-spin {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg)\n  }\n}\n\n.gitment-root-container {\n  margin: 19px 0;\n}\n\n.gitment-header-container {\n  margin: 19px 0;\n}\n\n.gitment-header-like-btn,\n.gitment-comment-like-btn {\n  cursor: pointer;\n}\n\n.gitment-comment-like-btn {\n  float: right;\n}\n\n.gitment-comment-like-btn.liked {\n  color: #F44336;\n}\n\n.gitment-header-like-btn svg {\n  vertical-align: middle;\n  height: 30px;\n}\n\n.gitment-comment-like-btn svg {\n  vertical-align: middle;\n  height: 20px;\n}\n\n.gitment-header-like-btn.liked svg,\n.gitment-comment-like-btn.liked svg {\n  fill: #F44336;\n}\n\na.gitment-header-issue-link,\na.gitment-header-issue-link:visited {\n  float: right;\n  line-height: 30px;\n  color: #666;\n}\n\na.gitment-header-issue-link:hover {\n  color: #666;\n}\n\n.gitment-comments-loading,\n.gitment-comments-error,\n.gitment-comments-empty {\n  text-align: center;\n  margin: 50px 0;\n}\n\n.gitment-comments-list {\n  list-style: none;\n  padding-left: 0;\n  margin: 0 0 38px;\n}\n\n.gitment-comment,\n.gitment-editor-container {\n  position: relative;\n  min-height: 60px;\n  padding-left: 60px;\n  margin: 19px 0;\n}\n\n.gitment-comment-avatar,\n.gitment-editor-avatar {\n  float: left;\n  margin-left: -60px;\n}\n\n.gitment-comment-avatar,\n.gitment-comment-avatar-img,\n.gitment-comment-avatar,\n.gitment-editor-avatar-img,\n.gitment-editor-avatar svg {\n  width: 44px;\n  height: 44px;\n  border-radius: 3px;\n}\n\n.gitment-editor-avatar .gitment-github-icon {\n  fill: #fff;\n  background-color: #333;\n}\n\n.gitment-comment-main,\n.gitment-editor-main {\n  position: relative;\n  background: #ffffff;\n  border: 1px solid #CFD8DC;\n  border-radius: 0;\n}\n\n.gitment-editor-main::before,\n.gitment-editor-main::after,\n.gitment-comment-main::before,\n.gitment-comment-main::after {\n  position: absolute;\n  top: 11px;\n  left: -16px;\n  display: block;\n  width: 0;\n  height: 0;\n  pointer-events: none;\n  content: \"\";\n  border-color: transparent;\n  border-style: solid solid outset;\n}\n\n.gitment-editor-main::before,\n.gitment-comment-main::before {\n  border-width: 8px;\n  border-right-color: #CFD8DC;\n}\n\n.gitment-editor-main::after,\n.gitment-comment-main::after {\n  margin-top: 1px;\n  margin-left: 2px;\n  border-width: 7px;\n  border-right-color: #fff;\n}\n\n.gitment-comment-header {\n  margin: 12px 15px;\n  color: #666;\n  background-color: #fff;\n  border-radius: 3px;\n}\n\n.gitment-editor-header {\n  padding: 0;\n  margin: 0;\n  border-bottom: 1px solid #CFD8DC;\n}\n\na.gitment-comment-name,\na.gitment-comment-name:visited {\n  font-weight: 600;\n  color: #00bebe;\n}\n\n.gitment-editor-tabs {\n  margin-bottom: -1px;\n  margin-left: -1px;\n}\n\n.gitment-editor-tab {\n  display: inline-block;\n  padding: 11px 12px;\n  font-size: 14px;\n  line-height: 20px;\n  color: #666;\n  text-decoration: none;\n  background-color: transparent;\n  border-width: 0 1px;\n  border-style: solid;\n  border-color: transparent;\n  border-radius: 0;\n\n  white-space: nowrap;\n  cursor: pointer;\n  user-select: none;\n\n  outline: none;\n}\n\n.gitment-editor-tab.gitment-selected {\n  color: #333;\n  background-color: #fff;\n  border-color: #CFD8DC;\n}\n@media screen and (max-width: 400px) {\n    .gitment-editor-tab {\n        display: none;\n    }\n    .gitment-editor-tab.gitment-selected {\n        display: block;\n    }\n}\n\n.gitment-editor-login {\n  float: right;\n  margin-top: -30px;\n  margin-right: 15px;\n}\n\na.gitment-footer-project-link,\na.gitment-footer-project-link:visited,\na.gitment-editor-login-link,\na.gitment-editor-login-link:visited {\n  color: #2196F3;\n}\n\na.gitment-editor-logout-link,\na.gitment-editor-logout-link:visited {\n  color: #666;\n}\n\na.gitment-editor-logout-link:hover {\n  color: #2196F3;\n  text-decoration: none;\n}\n\n.gitment-comment-body {\n  position: relative;\n  margin: 12px 15px;\n  overflow: hidden;\n  border-radius: 3px;\n}\n\n.gitment-comment-body-folded {\n  cursor: pointer;\n}\n\n.gitment-comment-body-folded::before {\n  display: block !important;\n  content: \"\";\n  position: absolute;\n  width: 100%;\n  left: 0;\n  top: 0;\n  bottom: 50px;\n  pointer-events: none;\n  background: -webkit-linear-gradient(top, rgba(255, 255, 255, 0), rgba(255, 255, 255, .9));\n  background: linear-gradient(180deg, rgba(255, 255, 255, 0), rgba(255, 255, 255, .9));\n}\n\n.gitment-comment-body-folded::after {\n  display: block !important;\n  content: \"Click to Expand\" !important;\n  text-align: center;\n  color: #666;\n  position: absolute;\n  width: 100%;\n  height: 50px;\n  line-height: 50px;\n  left: 0;\n  bottom: 0;\n  pointer-events: none;\n  background: rgba(255, 255, 255, .9);\n}\n\n.gitment-editor-body {\n  margin: 0;\n}\n\n.gitment-comment-body > *:first-child,\n.gitment-editor-preview > *:first-child {\n  margin-top: 0 !important;\n}\n\n.gitment-comment-body > *:last-child,\n.gitment-editor-preview > *:last-child {\n  margin-bottom: 0 !important;\n}\n\n.gitment-editor-body textarea {\n  display: block;\n  width: 100%;\n  min-height: 150px;\n  max-height: 500px;\n  padding: 16px;\n  resize: vertical;\n\n  max-width: 100%;\n  margin: 0;\n  font-size: 14px;\n  line-height: 1.6;\n\n  background-color: #fff;\n\n  color: #333;\n  vertical-align: middle;\n  border: none;\n  border-radius: 0;\n  outline: none;\n  box-shadow: none;\n\n  overflow: visible;\n}\n\n.gitment-editor-body textarea:focus {\n  background-color: #fff;\n}\n\n.gitment-editor-preview {\n  min-height: 150px;\n\n  padding: 16px;\n  background-color: transparent;\n\n  width: 100%;\n  font-size: 14px;\n\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n\n.gitment-editor-footer {\n  padding: 0;\n  margin-top: 10px;\n}\n\n.gitment-editor-footer::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\na.gitment-editor-footer-tip {\n  display: inline-block;\n  padding-top: 10px;\n  font-size: 12px;\n  color: #666;\n}\n\na.gitment-editor-footer-tip:hover {\n  color: #2196F3;\n  text-decoration: none;\n}\n\n.gitment-comments-pagination {\n  list-style: none;\n  text-align: right;\n  border-radius: 0;\n  margin: -19px 0 19px 0;\n}\n\n.gitment-comments-page-item {\n  display: inline-block;\n  cursor: pointer;\n  border: 1px solid #CFD8DC;\n  margin-left: -1px;\n  padding: .25rem .5rem;\n}\n\n.gitment-comments-page-item:hover {\n  background-color: #f5f5f5;\n}\n\n.gitment-comments-page-item.gitment-selected {\n  background-color: #f5f5f5;\n}\n\n.gitment-editor-submit,\n.gitment-comments-init-btn {\n  color: #fff;\n  background-color: #00BCD4;\n\n  position: relative;\n  display: inline-block;\n  padding: 7px 13px;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 20px;\n  white-space: nowrap;\n  vertical-align: middle;\n  cursor: pointer;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  background-size: 110% 110%;\n  border: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n}\n\n.gitment-editor-submit:hover,\n.gitment-comments-init-btn:hover {\n  background-color: #00ACC1;\n}\n\n.gitment-comments-init-btn:disabled,\n.gitment-editor-submit:disabled {\n  color: rgba(255,255,255,0.75);\n  background-color: #4DD0E1;\n  box-shadow: none;\n}\n\n.gitment-editor-submit {\n  float: right;\n}\n\n.gitment-footer-container {\n  margin-top: 30px;\n  margin-bottom: 20px;\n  text-align: right;\n  font-size: 12px;\n}\n\n/*\n * Markdown CSS\n * Copied from https://github.com/sindresorhus/github-markdown-css\n */\n.gitment-markdown {\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  line-height: 1.5;\n  color: #333;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n\n.gitment-markdown .pl-c {\n  color: #969896;\n}\n\n.gitment-markdown .pl-c1,\n.gitment-markdown .pl-s .pl-v {\n  color: #0086b3;\n}\n\n.gitment-markdown .pl-e,\n.gitment-markdown .pl-en {\n  color: #795da3;\n}\n\n.gitment-markdown .pl-smi,\n.gitment-markdown .pl-s .pl-s1 {\n  color: #333;\n}\n\n.gitment-markdown .pl-ent {\n  color: #63a35c;\n}\n\n.gitment-markdown .pl-k {\n  color: #a71d5d;\n}\n\n.gitment-markdown .pl-s,\n.gitment-markdown .pl-pds,\n.gitment-markdown .pl-s .pl-pse .pl-s1,\n.gitment-markdown .pl-sr,\n.gitment-markdown .pl-sr .pl-cce,\n.gitment-markdown .pl-sr .pl-sre,\n.gitment-markdown .pl-sr .pl-sra {\n  color: #183691;\n}\n\n.gitment-markdown .pl-v,\n.gitment-markdown .pl-smw {\n  color: #ed6a43;\n}\n\n.gitment-markdown .pl-bu {\n  color: #b52a1d;\n}\n\n.gitment-markdown .pl-ii {\n  color: #f8f8f8;\n  background-color: #b52a1d;\n}\n\n.gitment-markdown .pl-c2 {\n  color: #f8f8f8;\n  background-color: #b52a1d;\n}\n\n.gitment-markdown .pl-c2::before {\n  content: \"^M\";\n}\n\n.gitment-markdown .pl-sr .pl-cce {\n  font-weight: bold;\n  color: #63a35c;\n}\n\n.gitment-markdown .pl-ml {\n  color: #693a17;\n}\n\n.gitment-markdown .pl-mh,\n.gitment-markdown .pl-mh .pl-en,\n.gitment-markdown .pl-ms {\n  font-weight: bold;\n  color: #1d3e81;\n}\n\n.gitment-markdown .pl-mq {\n  color: #008080;\n}\n\n.gitment-markdown .pl-mi {\n  font-style: italic;\n  color: #333;\n}\n\n.gitment-markdown .pl-mb {\n  font-weight: bold;\n  color: #333;\n}\n\n.gitment-markdown .pl-md {\n  color: #bd2c00;\n  background-color: #ffecec;\n}\n\n.gitment-markdown .pl-mi1 {\n  color: #55a532;\n  background-color: #eaffea;\n}\n\n.gitment-markdown .pl-mc {\n  color: #ef9700;\n  background-color: #ffe3b4;\n}\n\n.gitment-markdown .pl-mi2 {\n  color: #d8d8d8;\n  background-color: #808080;\n}\n\n.gitment-markdown .pl-mdr {\n  font-weight: bold;\n  color: #795da3;\n}\n\n.gitment-markdown .pl-mo {\n  color: #1d3e81;\n}\n\n.gitment-markdown .pl-ba {\n  color: #595e62;\n}\n\n.gitment-markdown .pl-sg {\n  color: #c0c0c0;\n}\n\n.gitment-markdown .pl-corl {\n  text-decoration: underline;\n  color: #183691;\n}\n\n.gitment-markdown .octicon {\n  display: inline-block;\n  vertical-align: text-top;\n  fill: currentColor;\n}\n\n.gitment-markdown a {\n  background-color: transparent;\n  -webkit-text-decoration-skip: objects;\n}\n\n.gitment-markdown a:active,\n.gitment-markdown a:hover {\n  outline-width: 0;\n}\n\n.gitment-markdown strong {\n  font-weight: inherit;\n}\n\n.gitment-markdown strong {\n  font-weight: bolder;\n}\n\n.gitment-markdown h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n.gitment-markdown img {\n  border-style: none;\n}\n\n.gitment-markdown svg:not(:root) {\n  overflow: hidden;\n}\n\n.gitment-markdown code,\n.gitment-markdown kbd,\n.gitment-markdown pre {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n.gitment-markdown hr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible;\n}\n\n.gitment-markdown input {\n  font: inherit;\n  margin: 0;\n}\n\n.gitment-markdown input {\n  overflow: visible;\n}\n\n.gitment-markdown [type=\"checkbox\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.gitment-markdown * {\n  box-sizing: border-box;\n}\n\n.gitment-markdown input {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.gitment-markdown a {\n  color: #0366d6;\n  text-decoration: none;\n}\n\n.gitment-markdown a:hover {\n  text-decoration: underline;\n}\n\n.gitment-markdown strong {\n  font-weight: 600;\n}\n\n.gitment-markdown hr {\n  height: 0;\n  margin: 15px 0;\n  overflow: hidden;\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid #dfe2e5;\n}\n\n.gitment-markdown hr::before {\n  display: table;\n  content: \"\";\n}\n\n.gitment-markdown hr::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.gitment-markdown table {\n  border-spacing: 0;\n  border-collapse: collapse;\n}\n\n.gitment-markdown td,\n.gitment-markdown th {\n  padding: 0;\n}\n\n.gitment-markdown h1,\n.gitment-markdown h2,\n.gitment-markdown h3,\n.gitment-markdown h4,\n.gitment-markdown h5,\n.gitment-markdown h6 {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.gitment-markdown h1 {\n  font-size: 32px;\n  font-weight: 600;\n}\n\n.gitment-markdown h2 {\n  font-size: 24px;\n  font-weight: 600;\n}\n\n.gitment-markdown h3 {\n  font-size: 20px;\n  font-weight: 600;\n}\n\n.gitment-markdown h4 {\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.gitment-markdown h5 {\n  font-size: 14px;\n  font-weight: 600;\n}\n\n.gitment-markdown h6 {\n  font-size: 12px;\n  font-weight: 600;\n}\n\n.gitment-markdown p {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n\n.gitment-markdown blockquote {\n  margin: 0;\n}\n\n.gitment-markdown ul,\n.gitment-markdown ol {\n  padding-left: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.gitment-markdown ol ol,\n.gitment-markdown ul ol {\n  list-style-type: lower-roman;\n}\n\n.gitment-markdown ul ul ol,\n.gitment-markdown ul ol ol,\n.gitment-markdown ol ul ol,\n.gitment-markdown ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.gitment-markdown dd {\n  margin-left: 0;\n}\n\n.gitment-markdown code {\n  font-family: \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: 12px;\n}\n\n.gitment-markdown pre {\n  margin-top: 0;\n  margin-bottom: 0;\n  font: 12px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n}\n\n.gitment-markdown .octicon {\n  vertical-align: text-bottom;\n}\n\n.gitment-markdown .pl-0 {\n  padding-left: 0 !important;\n}\n\n.gitment-markdown .pl-1 {\n  padding-left: 4px !important;\n}\n\n.gitment-markdown .pl-2 {\n  padding-left: 8px !important;\n}\n\n.gitment-markdown .pl-3 {\n  padding-left: 16px !important;\n}\n\n.gitment-markdown .pl-4 {\n  padding-left: 24px !important;\n}\n\n.gitment-markdown .pl-5 {\n  padding-left: 32px !important;\n}\n\n.gitment-markdown .pl-6 {\n  padding-left: 40px !important;\n}\n\n.gitment-markdown::before {\n  display: table;\n  content: \"\";\n}\n\n.gitment-markdown::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.gitment-markdown>*:first-child {\n  margin-top: 0 !important;\n}\n\n.gitment-markdown>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.gitment-markdown a:not([href]) {\n  color: inherit;\n  text-decoration: none;\n}\n\n.gitment-markdown .anchor {\n  float: left;\n  padding-right: 4px;\n  margin-left: -20px;\n  line-height: 1;\n}\n\n.gitment-markdown .anchor:focus {\n  outline: none;\n}\n\n.gitment-markdown p,\n.gitment-markdown blockquote,\n.gitment-markdown ul,\n.gitment-markdown ol,\n.gitment-markdown dl,\n.gitment-markdown table,\n.gitment-markdown pre {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.gitment-markdown hr {\n  height: 0.25em;\n  padding: 0;\n  margin: 24px 0;\n  background-color: #e1e4e8;\n  border: 0;\n}\n\n.gitment-markdown blockquote {\n  padding: 0 1em;\n  color: #6a737d;\n  border-left: 0.25em solid #dfe2e5;\n}\n\n.gitment-markdown blockquote>:first-child {\n  margin-top: 0;\n}\n\n.gitment-markdown blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.gitment-markdown kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font-size: 11px;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #c6cbd1;\n  border-bottom-color: #959da5;\n  border-radius: 0;\n  box-shadow: inset 0 -1px 0 #959da5;\n}\n\n.gitment-markdown h1,\n.gitment-markdown h2,\n.gitment-markdown h3,\n.gitment-markdown h4,\n.gitment-markdown h5,\n.gitment-markdown h6 {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: 600;\n  line-height: 1.25;\n}\n\n.gitment-markdown h1 .octicon-link,\n.gitment-markdown h2 .octicon-link,\n.gitment-markdown h3 .octicon-link,\n.gitment-markdown h4 .octicon-link,\n.gitment-markdown h5 .octicon-link,\n.gitment-markdown h6 .octicon-link {\n  color: #1b1f23;\n  vertical-align: middle;\n  visibility: hidden;\n}\n\n.gitment-markdown h1:hover .anchor,\n.gitment-markdown h2:hover .anchor,\n.gitment-markdown h3:hover .anchor,\n.gitment-markdown h4:hover .anchor,\n.gitment-markdown h5:hover .anchor,\n.gitment-markdown h6:hover .anchor {\n  text-decoration: none;\n}\n\n.gitment-markdown h1:hover .anchor .octicon-link,\n.gitment-markdown h2:hover .anchor .octicon-link,\n.gitment-markdown h3:hover .anchor .octicon-link,\n.gitment-markdown h4:hover .anchor .octicon-link,\n.gitment-markdown h5:hover .anchor .octicon-link,\n.gitment-markdown h6:hover .anchor .octicon-link {\n  visibility: visible;\n}\n\n.gitment-markdown h1 {\n  padding-bottom: 0.3em;\n  font-size: 2em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.gitment-markdown h2 {\n  padding-bottom: 0.3em;\n  font-size: 1.5em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.gitment-markdown h3 {\n  font-size: 1.25em;\n}\n\n.gitment-markdown h4 {\n  font-size: 1em;\n}\n\n.gitment-markdown h5 {\n  font-size: 0.875em;\n}\n\n.gitment-markdown h6 {\n  font-size: 0.85em;\n  color: #6a737d;\n}\n\n.gitment-markdown ul,\n.gitment-markdown ol {\n  padding-left: 2em;\n}\n\n.gitment-markdown ul ul,\n.gitment-markdown ul ol,\n.gitment-markdown ol ol,\n.gitment-markdown ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.gitment-markdown li>p {\n  margin-top: 16px;\n}\n\n.gitment-markdown li+li {\n  margin-top: 0.25em;\n}\n\n.gitment-markdown dl {\n  padding: 0;\n}\n\n.gitment-markdown dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: 600;\n}\n\n.gitment-markdown dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.gitment-markdown table {\n  display: block;\n  width: 100%;\n  overflow: auto;\n}\n\n.gitment-markdown table th {\n  font-weight: 600;\n}\n\n.gitment-markdown table th,\n.gitment-markdown table td {\n  padding: 6px 13px;\n  border: 1px solid #dfe2e5;\n}\n\n.gitment-markdown table tr {\n  background-color: #fff;\n  border-top: 1px solid #c6cbd1;\n}\n\n.gitment-markdown table tr:nth-child(2n) {\n  background-color: #f5f5f5;\n}\n\n.gitment-markdown img {\n  max-width: 100%;\n  box-sizing: content-box;\n  background-color: #fff;\n}\n\n.gitment-markdown code {\n  padding: 0;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n  margin: 0;\n  font-size: 85%;\n  background-color: rgba(27,31,35,0.05);\n  border-radius: 0;\n}\n\n.gitment-markdown code::before,\n.gitment-markdown code::after {\n  letter-spacing: -0.2em;\n  content: \"\\00a0\";\n}\n\n.gitment-markdown pre {\n  word-wrap: normal;\n}\n\n.gitment-markdown pre>code {\n  padding: 0;\n  margin: 0;\n  font-size: 100%;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.gitment-markdown .highlight {\n  margin-bottom: 16px;\n}\n\n.gitment-markdown .highlight pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.gitment-markdown .highlight pre,\n.gitment-markdown pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: #f5f5f5;\n  border-radius: 0;\n}\n\n.gitment-markdown pre code {\n  display: inline;\n  max-width: auto;\n  padding: 0;\n  margin: 0;\n  overflow: visible;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.gitment-markdown pre code::before,\n.gitment-markdown pre code::after {\n  content: normal;\n}\n\n.gitment-markdown .full-commit .btn-outline:not(:disabled):hover {\n  color: #005cc5;\n  border-color: #005cc5;\n}\n\n.gitment-markdown kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fcfcfc;\n  border: solid 1px #c6cbd1;\n  border-bottom-color: #959da5;\n  border-radius: 0;\n  box-shadow: inset 0 -1px 0 #959da5;\n}\n\n.gitment-markdown :checked+.radio-label {\n  position: relative;\n  z-index: 1;\n  border-color: #0366d6;\n}\n\n.gitment-markdown .task-list-item {\n  list-style-type: none;\n}\n\n.gitment-markdown .task-list-item+.task-list-item {\n  margin-top: 3px;\n}\n\n.gitment-markdown .task-list-item input {\n  margin: 0 0.2em 0.25em -1.6em;\n  vertical-align: middle;\n}\n\n.gitment-markdown hr {\n  border-bottom-color: #eee;\n}","site":{"data":{}},"excerpt":"","more":".gitment-container {\n  font-family: sans-serif;\n  font-size: 14px;\n  line-height: 1.5;\n  color: #333;\n  word-wrap: break-word;\n}\n\n.gitment-container * {\n  box-sizing: border-box;\n}\n\n.gitment-container *:disabled {\n  cursor: not-allowed;\n}\n\n.gitment-container a,\n.gitment-container a:visited {\n  cursor: pointer;\n  text-decoration: none;\n}\n\n.gitment-container a:hover {\n  text-decoration: underline;\n}\n\n.gitment-container .gitment-hidden {\n  display: none;\n}\n\n.gitment-container .gitment-spinner-icon {\n  fill: #333;\n\n  -webkit-animation: gitment-spin 1s steps(12) infinite;\n  animation: gitment-spin 1s steps(12) infinite;\n}\n\n@-webkit-keyframes gitment-spin {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg)\n  }\n}\n\n@keyframes gitment-spin {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg)\n  }\n}\n\n.gitment-root-container {\n  margin: 19px 0;\n}\n\n.gitment-header-container {\n  margin: 19px 0;\n}\n\n.gitment-header-like-btn,\n.gitment-comment-like-btn {\n  cursor: pointer;\n}\n\n.gitment-comment-like-btn {\n  float: right;\n}\n\n.gitment-comment-like-btn.liked {\n  color: #F44336;\n}\n\n.gitment-header-like-btn svg {\n  vertical-align: middle;\n  height: 30px;\n}\n\n.gitment-comment-like-btn svg {\n  vertical-align: middle;\n  height: 20px;\n}\n\n.gitment-header-like-btn.liked svg,\n.gitment-comment-like-btn.liked svg {\n  fill: #F44336;\n}\n\na.gitment-header-issue-link,\na.gitment-header-issue-link:visited {\n  float: right;\n  line-height: 30px;\n  color: #666;\n}\n\na.gitment-header-issue-link:hover {\n  color: #666;\n}\n\n.gitment-comments-loading,\n.gitment-comments-error,\n.gitment-comments-empty {\n  text-align: center;\n  margin: 50px 0;\n}\n\n.gitment-comments-list {\n  list-style: none;\n  padding-left: 0;\n  margin: 0 0 38px;\n}\n\n.gitment-comment,\n.gitment-editor-container {\n  position: relative;\n  min-height: 60px;\n  padding-left: 60px;\n  margin: 19px 0;\n}\n\n.gitment-comment-avatar,\n.gitment-editor-avatar {\n  float: left;\n  margin-left: -60px;\n}\n\n.gitment-comment-avatar,\n.gitment-comment-avatar-img,\n.gitment-comment-avatar,\n.gitment-editor-avatar-img,\n.gitment-editor-avatar svg {\n  width: 44px;\n  height: 44px;\n  border-radius: 3px;\n}\n\n.gitment-editor-avatar .gitment-github-icon {\n  fill: #fff;\n  background-color: #333;\n}\n\n.gitment-comment-main,\n.gitment-editor-main {\n  position: relative;\n  background: #ffffff;\n  border: 1px solid #CFD8DC;\n  border-radius: 0;\n}\n\n.gitment-editor-main::before,\n.gitment-editor-main::after,\n.gitment-comment-main::before,\n.gitment-comment-main::after {\n  position: absolute;\n  top: 11px;\n  left: -16px;\n  display: block;\n  width: 0;\n  height: 0;\n  pointer-events: none;\n  content: \"\";\n  border-color: transparent;\n  border-style: solid solid outset;\n}\n\n.gitment-editor-main::before,\n.gitment-comment-main::before {\n  border-width: 8px;\n  border-right-color: #CFD8DC;\n}\n\n.gitment-editor-main::after,\n.gitment-comment-main::after {\n  margin-top: 1px;\n  margin-left: 2px;\n  border-width: 7px;\n  border-right-color: #fff;\n}\n\n.gitment-comment-header {\n  margin: 12px 15px;\n  color: #666;\n  background-color: #fff;\n  border-radius: 3px;\n}\n\n.gitment-editor-header {\n  padding: 0;\n  margin: 0;\n  border-bottom: 1px solid #CFD8DC;\n}\n\na.gitment-comment-name,\na.gitment-comment-name:visited {\n  font-weight: 600;\n  color: #00bebe;\n}\n\n.gitment-editor-tabs {\n  margin-bottom: -1px;\n  margin-left: -1px;\n}\n\n.gitment-editor-tab {\n  display: inline-block;\n  padding: 11px 12px;\n  font-size: 14px;\n  line-height: 20px;\n  color: #666;\n  text-decoration: none;\n  background-color: transparent;\n  border-width: 0 1px;\n  border-style: solid;\n  border-color: transparent;\n  border-radius: 0;\n\n  white-space: nowrap;\n  cursor: pointer;\n  user-select: none;\n\n  outline: none;\n}\n\n.gitment-editor-tab.gitment-selected {\n  color: #333;\n  background-color: #fff;\n  border-color: #CFD8DC;\n}\n@media screen and (max-width: 400px) {\n    .gitment-editor-tab {\n        display: none;\n    }\n    .gitment-editor-tab.gitment-selected {\n        display: block;\n    }\n}\n\n.gitment-editor-login {\n  float: right;\n  margin-top: -30px;\n  margin-right: 15px;\n}\n\na.gitment-footer-project-link,\na.gitment-footer-project-link:visited,\na.gitment-editor-login-link,\na.gitment-editor-login-link:visited {\n  color: #2196F3;\n}\n\na.gitment-editor-logout-link,\na.gitment-editor-logout-link:visited {\n  color: #666;\n}\n\na.gitment-editor-logout-link:hover {\n  color: #2196F3;\n  text-decoration: none;\n}\n\n.gitment-comment-body {\n  position: relative;\n  margin: 12px 15px;\n  overflow: hidden;\n  border-radius: 3px;\n}\n\n.gitment-comment-body-folded {\n  cursor: pointer;\n}\n\n.gitment-comment-body-folded::before {\n  display: block !important;\n  content: \"\";\n  position: absolute;\n  width: 100%;\n  left: 0;\n  top: 0;\n  bottom: 50px;\n  pointer-events: none;\n  background: -webkit-linear-gradient(top, rgba(255, 255, 255, 0), rgba(255, 255, 255, .9));\n  background: linear-gradient(180deg, rgba(255, 255, 255, 0), rgba(255, 255, 255, .9));\n}\n\n.gitment-comment-body-folded::after {\n  display: block !important;\n  content: \"Click to Expand\" !important;\n  text-align: center;\n  color: #666;\n  position: absolute;\n  width: 100%;\n  height: 50px;\n  line-height: 50px;\n  left: 0;\n  bottom: 0;\n  pointer-events: none;\n  background: rgba(255, 255, 255, .9);\n}\n\n.gitment-editor-body {\n  margin: 0;\n}\n\n.gitment-comment-body > *:first-child,\n.gitment-editor-preview > *:first-child {\n  margin-top: 0 !important;\n}\n\n.gitment-comment-body > *:last-child,\n.gitment-editor-preview > *:last-child {\n  margin-bottom: 0 !important;\n}\n\n.gitment-editor-body textarea {\n  display: block;\n  width: 100%;\n  min-height: 150px;\n  max-height: 500px;\n  padding: 16px;\n  resize: vertical;\n\n  max-width: 100%;\n  margin: 0;\n  font-size: 14px;\n  line-height: 1.6;\n\n  background-color: #fff;\n\n  color: #333;\n  vertical-align: middle;\n  border: none;\n  border-radius: 0;\n  outline: none;\n  box-shadow: none;\n\n  overflow: visible;\n}\n\n.gitment-editor-body textarea:focus {\n  background-color: #fff;\n}\n\n.gitment-editor-preview {\n  min-height: 150px;\n\n  padding: 16px;\n  background-color: transparent;\n\n  width: 100%;\n  font-size: 14px;\n\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n\n.gitment-editor-footer {\n  padding: 0;\n  margin-top: 10px;\n}\n\n.gitment-editor-footer::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\na.gitment-editor-footer-tip {\n  display: inline-block;\n  padding-top: 10px;\n  font-size: 12px;\n  color: #666;\n}\n\na.gitment-editor-footer-tip:hover {\n  color: #2196F3;\n  text-decoration: none;\n}\n\n.gitment-comments-pagination {\n  list-style: none;\n  text-align: right;\n  border-radius: 0;\n  margin: -19px 0 19px 0;\n}\n\n.gitment-comments-page-item {\n  display: inline-block;\n  cursor: pointer;\n  border: 1px solid #CFD8DC;\n  margin-left: -1px;\n  padding: .25rem .5rem;\n}\n\n.gitment-comments-page-item:hover {\n  background-color: #f5f5f5;\n}\n\n.gitment-comments-page-item.gitment-selected {\n  background-color: #f5f5f5;\n}\n\n.gitment-editor-submit,\n.gitment-comments-init-btn {\n  color: #fff;\n  background-color: #00BCD4;\n\n  position: relative;\n  display: inline-block;\n  padding: 7px 13px;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 20px;\n  white-space: nowrap;\n  vertical-align: middle;\n  cursor: pointer;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  background-size: 110% 110%;\n  border: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n}\n\n.gitment-editor-submit:hover,\n.gitment-comments-init-btn:hover {\n  background-color: #00ACC1;\n}\n\n.gitment-comments-init-btn:disabled,\n.gitment-editor-submit:disabled {\n  color: rgba(255,255,255,0.75);\n  background-color: #4DD0E1;\n  box-shadow: none;\n}\n\n.gitment-editor-submit {\n  float: right;\n}\n\n.gitment-footer-container {\n  margin-top: 30px;\n  margin-bottom: 20px;\n  text-align: right;\n  font-size: 12px;\n}\n\n/*\n * Markdown CSS\n * Copied from https://github.com/sindresorhus/github-markdown-css\n */\n.gitment-markdown {\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  line-height: 1.5;\n  color: #333;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n\n.gitment-markdown .pl-c {\n  color: #969896;\n}\n\n.gitment-markdown .pl-c1,\n.gitment-markdown .pl-s .pl-v {\n  color: #0086b3;\n}\n\n.gitment-markdown .pl-e,\n.gitment-markdown .pl-en {\n  color: #795da3;\n}\n\n.gitment-markdown .pl-smi,\n.gitment-markdown .pl-s .pl-s1 {\n  color: #333;\n}\n\n.gitment-markdown .pl-ent {\n  color: #63a35c;\n}\n\n.gitment-markdown .pl-k {\n  color: #a71d5d;\n}\n\n.gitment-markdown .pl-s,\n.gitment-markdown .pl-pds,\n.gitment-markdown .pl-s .pl-pse .pl-s1,\n.gitment-markdown .pl-sr,\n.gitment-markdown .pl-sr .pl-cce,\n.gitment-markdown .pl-sr .pl-sre,\n.gitment-markdown .pl-sr .pl-sra {\n  color: #183691;\n}\n\n.gitment-markdown .pl-v,\n.gitment-markdown .pl-smw {\n  color: #ed6a43;\n}\n\n.gitment-markdown .pl-bu {\n  color: #b52a1d;\n}\n\n.gitment-markdown .pl-ii {\n  color: #f8f8f8;\n  background-color: #b52a1d;\n}\n\n.gitment-markdown .pl-c2 {\n  color: #f8f8f8;\n  background-color: #b52a1d;\n}\n\n.gitment-markdown .pl-c2::before {\n  content: \"^M\";\n}\n\n.gitment-markdown .pl-sr .pl-cce {\n  font-weight: bold;\n  color: #63a35c;\n}\n\n.gitment-markdown .pl-ml {\n  color: #693a17;\n}\n\n.gitment-markdown .pl-mh,\n.gitment-markdown .pl-mh .pl-en,\n.gitment-markdown .pl-ms {\n  font-weight: bold;\n  color: #1d3e81;\n}\n\n.gitment-markdown .pl-mq {\n  color: #008080;\n}\n\n.gitment-markdown .pl-mi {\n  font-style: italic;\n  color: #333;\n}\n\n.gitment-markdown .pl-mb {\n  font-weight: bold;\n  color: #333;\n}\n\n.gitment-markdown .pl-md {\n  color: #bd2c00;\n  background-color: #ffecec;\n}\n\n.gitment-markdown .pl-mi1 {\n  color: #55a532;\n  background-color: #eaffea;\n}\n\n.gitment-markdown .pl-mc {\n  color: #ef9700;\n  background-color: #ffe3b4;\n}\n\n.gitment-markdown .pl-mi2 {\n  color: #d8d8d8;\n  background-color: #808080;\n}\n\n.gitment-markdown .pl-mdr {\n  font-weight: bold;\n  color: #795da3;\n}\n\n.gitment-markdown .pl-mo {\n  color: #1d3e81;\n}\n\n.gitment-markdown .pl-ba {\n  color: #595e62;\n}\n\n.gitment-markdown .pl-sg {\n  color: #c0c0c0;\n}\n\n.gitment-markdown .pl-corl {\n  text-decoration: underline;\n  color: #183691;\n}\n\n.gitment-markdown .octicon {\n  display: inline-block;\n  vertical-align: text-top;\n  fill: currentColor;\n}\n\n.gitment-markdown a {\n  background-color: transparent;\n  -webkit-text-decoration-skip: objects;\n}\n\n.gitment-markdown a:active,\n.gitment-markdown a:hover {\n  outline-width: 0;\n}\n\n.gitment-markdown strong {\n  font-weight: inherit;\n}\n\n.gitment-markdown strong {\n  font-weight: bolder;\n}\n\n.gitment-markdown h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n.gitment-markdown img {\n  border-style: none;\n}\n\n.gitment-markdown svg:not(:root) {\n  overflow: hidden;\n}\n\n.gitment-markdown code,\n.gitment-markdown kbd,\n.gitment-markdown pre {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n.gitment-markdown hr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible;\n}\n\n.gitment-markdown input {\n  font: inherit;\n  margin: 0;\n}\n\n.gitment-markdown input {\n  overflow: visible;\n}\n\n.gitment-markdown [type=\"checkbox\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.gitment-markdown * {\n  box-sizing: border-box;\n}\n\n.gitment-markdown input {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.gitment-markdown a {\n  color: #0366d6;\n  text-decoration: none;\n}\n\n.gitment-markdown a:hover {\n  text-decoration: underline;\n}\n\n.gitment-markdown strong {\n  font-weight: 600;\n}\n\n.gitment-markdown hr {\n  height: 0;\n  margin: 15px 0;\n  overflow: hidden;\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid #dfe2e5;\n}\n\n.gitment-markdown hr::before {\n  display: table;\n  content: \"\";\n}\n\n.gitment-markdown hr::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.gitment-markdown table {\n  border-spacing: 0;\n  border-collapse: collapse;\n}\n\n.gitment-markdown td,\n.gitment-markdown th {\n  padding: 0;\n}\n\n.gitment-markdown h1,\n.gitment-markdown h2,\n.gitment-markdown h3,\n.gitment-markdown h4,\n.gitment-markdown h5,\n.gitment-markdown h6 {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.gitment-markdown h1 {\n  font-size: 32px;\n  font-weight: 600;\n}\n\n.gitment-markdown h2 {\n  font-size: 24px;\n  font-weight: 600;\n}\n\n.gitment-markdown h3 {\n  font-size: 20px;\n  font-weight: 600;\n}\n\n.gitment-markdown h4 {\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.gitment-markdown h5 {\n  font-size: 14px;\n  font-weight: 600;\n}\n\n.gitment-markdown h6 {\n  font-size: 12px;\n  font-weight: 600;\n}\n\n.gitment-markdown p {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n\n.gitment-markdown blockquote {\n  margin: 0;\n}\n\n.gitment-markdown ul,\n.gitment-markdown ol {\n  padding-left: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.gitment-markdown ol ol,\n.gitment-markdown ul ol {\n  list-style-type: lower-roman;\n}\n\n.gitment-markdown ul ul ol,\n.gitment-markdown ul ol ol,\n.gitment-markdown ol ul ol,\n.gitment-markdown ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.gitment-markdown dd {\n  margin-left: 0;\n}\n\n.gitment-markdown code {\n  font-family: \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: 12px;\n}\n\n.gitment-markdown pre {\n  margin-top: 0;\n  margin-bottom: 0;\n  font: 12px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n}\n\n.gitment-markdown .octicon {\n  vertical-align: text-bottom;\n}\n\n.gitment-markdown .pl-0 {\n  padding-left: 0 !important;\n}\n\n.gitment-markdown .pl-1 {\n  padding-left: 4px !important;\n}\n\n.gitment-markdown .pl-2 {\n  padding-left: 8px !important;\n}\n\n.gitment-markdown .pl-3 {\n  padding-left: 16px !important;\n}\n\n.gitment-markdown .pl-4 {\n  padding-left: 24px !important;\n}\n\n.gitment-markdown .pl-5 {\n  padding-left: 32px !important;\n}\n\n.gitment-markdown .pl-6 {\n  padding-left: 40px !important;\n}\n\n.gitment-markdown::before {\n  display: table;\n  content: \"\";\n}\n\n.gitment-markdown::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.gitment-markdown>*:first-child {\n  margin-top: 0 !important;\n}\n\n.gitment-markdown>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.gitment-markdown a:not([href]) {\n  color: inherit;\n  text-decoration: none;\n}\n\n.gitment-markdown .anchor {\n  float: left;\n  padding-right: 4px;\n  margin-left: -20px;\n  line-height: 1;\n}\n\n.gitment-markdown .anchor:focus {\n  outline: none;\n}\n\n.gitment-markdown p,\n.gitment-markdown blockquote,\n.gitment-markdown ul,\n.gitment-markdown ol,\n.gitment-markdown dl,\n.gitment-markdown table,\n.gitment-markdown pre {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.gitment-markdown hr {\n  height: 0.25em;\n  padding: 0;\n  margin: 24px 0;\n  background-color: #e1e4e8;\n  border: 0;\n}\n\n.gitment-markdown blockquote {\n  padding: 0 1em;\n  color: #6a737d;\n  border-left: 0.25em solid #dfe2e5;\n}\n\n.gitment-markdown blockquote>:first-child {\n  margin-top: 0;\n}\n\n.gitment-markdown blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.gitment-markdown kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font-size: 11px;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #c6cbd1;\n  border-bottom-color: #959da5;\n  border-radius: 0;\n  box-shadow: inset 0 -1px 0 #959da5;\n}\n\n.gitment-markdown h1,\n.gitment-markdown h2,\n.gitment-markdown h3,\n.gitment-markdown h4,\n.gitment-markdown h5,\n.gitment-markdown h6 {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: 600;\n  line-height: 1.25;\n}\n\n.gitment-markdown h1 .octicon-link,\n.gitment-markdown h2 .octicon-link,\n.gitment-markdown h3 .octicon-link,\n.gitment-markdown h4 .octicon-link,\n.gitment-markdown h5 .octicon-link,\n.gitment-markdown h6 .octicon-link {\n  color: #1b1f23;\n  vertical-align: middle;\n  visibility: hidden;\n}\n\n.gitment-markdown h1:hover .anchor,\n.gitment-markdown h2:hover .anchor,\n.gitment-markdown h3:hover .anchor,\n.gitment-markdown h4:hover .anchor,\n.gitment-markdown h5:hover .anchor,\n.gitment-markdown h6:hover .anchor {\n  text-decoration: none;\n}\n\n.gitment-markdown h1:hover .anchor .octicon-link,\n.gitment-markdown h2:hover .anchor .octicon-link,\n.gitment-markdown h3:hover .anchor .octicon-link,\n.gitment-markdown h4:hover .anchor .octicon-link,\n.gitment-markdown h5:hover .anchor .octicon-link,\n.gitment-markdown h6:hover .anchor .octicon-link {\n  visibility: visible;\n}\n\n.gitment-markdown h1 {\n  padding-bottom: 0.3em;\n  font-size: 2em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.gitment-markdown h2 {\n  padding-bottom: 0.3em;\n  font-size: 1.5em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.gitment-markdown h3 {\n  font-size: 1.25em;\n}\n\n.gitment-markdown h4 {\n  font-size: 1em;\n}\n\n.gitment-markdown h5 {\n  font-size: 0.875em;\n}\n\n.gitment-markdown h6 {\n  font-size: 0.85em;\n  color: #6a737d;\n}\n\n.gitment-markdown ul,\n.gitment-markdown ol {\n  padding-left: 2em;\n}\n\n.gitment-markdown ul ul,\n.gitment-markdown ul ol,\n.gitment-markdown ol ol,\n.gitment-markdown ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.gitment-markdown li>p {\n  margin-top: 16px;\n}\n\n.gitment-markdown li+li {\n  margin-top: 0.25em;\n}\n\n.gitment-markdown dl {\n  padding: 0;\n}\n\n.gitment-markdown dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: 600;\n}\n\n.gitment-markdown dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.gitment-markdown table {\n  display: block;\n  width: 100%;\n  overflow: auto;\n}\n\n.gitment-markdown table th {\n  font-weight: 600;\n}\n\n.gitment-markdown table th,\n.gitment-markdown table td {\n  padding: 6px 13px;\n  border: 1px solid #dfe2e5;\n}\n\n.gitment-markdown table tr {\n  background-color: #fff;\n  border-top: 1px solid #c6cbd1;\n}\n\n.gitment-markdown table tr:nth-child(2n) {\n  background-color: #f5f5f5;\n}\n\n.gitment-markdown img {\n  max-width: 100%;\n  box-sizing: content-box;\n  background-color: #fff;\n}\n\n.gitment-markdown code {\n  padding: 0;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n  margin: 0;\n  font-size: 85%;\n  background-color: rgba(27,31,35,0.05);\n  border-radius: 0;\n}\n\n.gitment-markdown code::before,\n.gitment-markdown code::after {\n  letter-spacing: -0.2em;\n  content: \"\\00a0\";\n}\n\n.gitment-markdown pre {\n  word-wrap: normal;\n}\n\n.gitment-markdown pre>code {\n  padding: 0;\n  margin: 0;\n  font-size: 100%;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.gitment-markdown .highlight {\n  margin-bottom: 16px;\n}\n\n.gitment-markdown .highlight pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.gitment-markdown .highlight pre,\n.gitment-markdown pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: #f5f5f5;\n  border-radius: 0;\n}\n\n.gitment-markdown pre code {\n  display: inline;\n  max-width: auto;\n  padding: 0;\n  margin: 0;\n  overflow: visible;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.gitment-markdown pre code::before,\n.gitment-markdown pre code::after {\n  content: normal;\n}\n\n.gitment-markdown .full-commit .btn-outline:not(:disabled):hover {\n  color: #005cc5;\n  border-color: #005cc5;\n}\n\n.gitment-markdown kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fcfcfc;\n  border: solid 1px #c6cbd1;\n  border-bottom-color: #959da5;\n  border-radius: 0;\n  box-shadow: inset 0 -1px 0 #959da5;\n}\n\n.gitment-markdown :checked+.radio-label {\n  position: relative;\n  z-index: 1;\n  border-color: #0366d6;\n}\n\n.gitment-markdown .task-list-item {\n  list-style-type: none;\n}\n\n.gitment-markdown .task-list-item+.task-list-item {\n  margin-top: 3px;\n}\n\n.gitment-markdown .task-list-item input {\n  margin: 0 0.2em 0.25em -1.6em;\n  vertical-align: middle;\n}\n\n.gitment-markdown hr {\n  border-bottom-color: #eee;\n}"}],"Post":[{"title":"知识点","date":"2019-06-06T08:48:44.000Z","_content":"\n### 1. 一些js插件为什么以`;`开头\n\n因为js代码允许在结束的时候不添加`;`, 所以两个js文件在合并拼接的的时候可能出错。\n\n```js\n// a.js\n// 末尾没有添加;符号\nvar a = 'test'\n\n// b.js\n(function(){\n    // do something\n})();\n\n```\n\n<!-- More -->\n\n以上两个文件进行合并压缩的时候就可能变为：\n\n```js\nvar a = 'test'(function(){})();\n\n// 这样会报错： TypeError: 'test' is not a function\n```\n\n### 2. 使用闭包定义私有属性\n\n```js\nfunction Product() {\n\n    var name;\n\n    this.setName = function(value) {\n        name = value;\n    };\n\n    this.getName = function() {\n        return name;\n    };\n}\n\nvar p = new Product();\np.setName(\"test\");\n\nconsole.log(p.name); // 输出undefined\nconsole.log(p.getName()); // 输出test\n```\n\n代码中，对象p的的`name`属性为`私有属性`，使用`p.name`不能直接访问。\n\n### 3. 枚举属性\n\n- 可枚举性\n在js中，`基本数据类型`的原型属性是不可枚举的，比如`Object`、`Array`、`Number`等。\n\n```js\n    // 打印结果为空 Number内置属性是不可枚举的\n    var num = new Number()\n    for (let i in num) {\n        console.log(i, num[i])\n    }\n```\n\n- propertyIsEnumerable\n\n> Object.propertyIsEnumerable(prop)\n> prop 需要测试的属性名\n> 返回值 用来表示指定的属性名是否可枚举的Boolean\n> 属性必须满足 自身属性 && 枚举属性，才会返回true\n\n```js\nvar obj = {}\nobj.test = 'Jnathan'\n\nvar arr = [23, 67]\nobj.propertyIsEnumerable('test')  // true\narr.propertyIsEnumerable(0)  // true\narr.propertyIsEnumerable(1)  // true\n```\n\n- hasOwnProperty\n\n> Object.hasOwnProperty(prop)\n> prop 需要测试的属性名\n> 返回值 用来表示指定的属性名是否在对象中的Boolean\n\n```js\nvar obj = {}\nobj.x = 'Jnathan'\nobj.y = function() {}\nobj.hasOwnProperty('x')  // true\nobj.hasOwnProperty('y')  // true 方法也属于属性\nobj.hasOwnProperty('z')  // false 属性不存在\nobj.hasOwnProperty('toString')  // false toString是继承的Object中的属性，obj自身属性中不包含\n```\n\n```js\nfunction Person() {\n    this.name = 'Jnathan'\n}\nPerson.prototype = {\n    constructor: Person,\n    job: 'student',\n}\nvar Jnathan = new Person()\nObject.defineProperty(Jnathan, \"gender\", {\n    value: 'female',\n    enumerable: false\n})\n```\n\n以上， 用`defineProperty`为`对象Jnathan`定义了一个名为`gender`的`不可枚举属性`\n\n- 枚举 for...in\n\n```js\nfor (let item in Jnathan) {\n    console.log('Jnathan.' + item + ' = ' + Jnathan[item])\n}\n// Jnathan.name = Jnathan\n// Jnathan.constructor = function Person() {\n//     this.name = 'Jnathan'\n// }\n// Jnathan.job = student\n\nfunction enumer() {\n    this.a = '我是对象本身就有的属性'\n}\nenumer.prototype.b = '我是通过原型对象挂载的属性'\nlet fn = new enumer()\nObject.defineProperty(fn, 'c', {\n    value: '我是通过Object.defineProperty方法添加的可枚举属性',\n    enumerable: true\n});\nfor(let item in fn) {\n    console.log(item)\n}\n// a\n// b\n// c\n```\n\n- 枚举 Object.keys()\n\n```js\nObject.keys(Jnathan)\n// [\"name\"]\n\nfunction enumer() {\n    this.a = '我是对象本身就有的属性'\n}\nenumer.prototype.b = '我是通过原型对象挂载的属性'\nlet fn = new enumer()\nObject.defineProperty(fn, 'c', {\n    value: '我是通过Object.defineProperty方法添加的可枚举属性',\n    enumerable: true\n});\nconsole.log(Object.keys(fn))\n// [\"a\", \"c\"]\n```\n\n- 枚举 JSON.stringify()\n\n```js\nJSON.stringify(Jnathan)\n// \"{\"name\":\"Jnathan\"}\"\n\nfunction enumer() {\n    this.a = '我是对象本身就有的属性'\n}\nenumer.prototype.b = '我是通过原型对象挂载的属性'\nlet fn = new enumer()\nObject.defineProperty(fn, 'c', {\n    value: '我是通过Object.defineProperty方法添加的可枚举属性',\n    enumerable: true\n})\nconsole.log(JSON.stringify(fn))\n// {\"a\":\"我是对象本身就有的属性\",\"c\":\"我是通过Object.defineProperty方法添加的可枚举属性\"}\n```\n\n> 根据现象有以下总结\n> for...in 可以枚举对象本身具有的属性，通过Object.defineProperty()方法加的可枚举属性，或者通过原型对象绑定的可以枚举属性\n> Object.keys() 可以枚举对象本身的属性和通过Object.defineProperty()添加的可枚举属性\n> JSON.stringify() 可以枚举对象本身的属性和通过Object.defineProperty()添加的可枚举属性，并序列化为JSON字符串\n\n- !== undefined\n\n```js\nvar obj = {x: 1, y: undefined, z: null}\nconsole.log(obj.x !== undefined)  // true 属性存在\nconsole.log(obj.y !== undefined)  // false 此时会出现歧义，不能准确判断属性是不存在还是属性值本身就为undefined\nconsole.log(obj.z !== undefined)  // true 属性存在\nconsole.log(obj.z != undefined)  // false != 不能区分undefined和null，将两者同等对待\nconsole.log(obj.w !== undefined)  // false 属性不存在\nconsole.log(obj.toString !== undefined)  // true 存在toString函数属性。\n```\n\n- in 自身存在的属性或者继承的属性均返回true\n\n```js\nvar obj = {x: 1, y: undefined, z: null}\nconsole.log(\"x\" in obj)  // true 属性存在\nconsole.log(\"y\" in obj)  // true 属性存在\nconsole.log(\"z\" in obj)  // true 属性存在\nconsole.log(\"w\" in obj)  // false 属性不存在\nconsole.log(\"toString\" in obj)  // true 属性存在\n```\n\n- Object.defineProperty()\n\n> 参数：\n> Object.defineProperty(object, propertyname, descriptor)\n> object 必需。 要在其上添加或修改属性的对象。 这可能是一个本机 JavaScript 对象（即用户定义的对象或内置对象）或 DOM 对象。\n> propertyname 必需。 一个包含属性名称的字符串。\n> descriptor 必需。 属性描述符。 它可以针对数据属性或访问器属性。\n> 返回值：\n> 已修改对象\n\n当对象不具有指定的属性名称时，向对象添加新属性。当对象已具有指定的属性名称时，修改现有属性的特性。\n\n```js\nvar obj = {}\nObject.defineProperty(obj, \"newDataProperty\", {\n    value: 101,\n    writable: false,\n    enumerable: false,\n    configurable: true\n});\n\nobj.newDataProperty = 102\nconsole.log(obj.newDataProperty)  // 101 whiteable为false 只读，不能修改\n```\n\n- Object.getOwnPropertyNames\n\n由于obj的属性newDataProperty是不可枚举的，使用for...in不能找到newDataProperty属性\n\n```js\nfor (let item in obj) {\n    console.log(item, obj[item])  // 无输出\n}\n```\n\n此时可以使用Object.getOwnPropertyNames来遍历\n\n```js\nvar names = Object.getOwnPropertyNames(obj)\nfor (let i = 0; i < names.e]length; names++) {\n    console.log(names, i, names[i])\n}\n// [\"newDataProperty\"] 0 newDataProperty\n```\n\n```js\nvar obj = {}\nObject.defineProperty(obj, \"newAccessorProperty\", {\n    set: function (x) {\n        console.log(\"in property set accessor\");\n        this.newaccpropvalue = x;\n    },\n    get: function () {\n        console.log(\"in property get accessor\");\n        return this.newaccpropvalue;\n    },\n    enumerable: true,\n    configurable: true\n});\n\nobj.newAccessorProperty = 30\nconsole.log(\"Property value: \" + obj.newAccessorProperty)\n// in property set accessor\n// in property get accessor\n// Property value: 30\n```\n\n- 修改DOM上的属性\n\n```js\nObject.getOwnPropertyDescriptor(Element.prototype, \"querySelector\")\n// {value: ƒ, writable: true, enumerable: true, configurable: true}\n```\n\n```js\nvar descriptor = Object.getOwnPropertyDescriptor(Element.prototype, \"querySelector\")\n\ndescriptor.value = \"query\"\ndescriptor.writable = false\n\nObject.defineProperty(Element.prototype, \"querySelector\", descriptor)\n\nvar elem = document.getElementById(\"div\")\n\nelem.querySelector = \"anotherQuery\"  // whitable 为false 更改不生效\nconsole.log(elem.querySelector)  // query\n```\n","source":"_posts/brief-info.md","raw":"---\ntitle: 知识点\ndate: 2019-06-06 16:48:44\ntags:\n---\n\n### 1. 一些js插件为什么以`;`开头\n\n因为js代码允许在结束的时候不添加`;`, 所以两个js文件在合并拼接的的时候可能出错。\n\n```js\n// a.js\n// 末尾没有添加;符号\nvar a = 'test'\n\n// b.js\n(function(){\n    // do something\n})();\n\n```\n\n<!-- More -->\n\n以上两个文件进行合并压缩的时候就可能变为：\n\n```js\nvar a = 'test'(function(){})();\n\n// 这样会报错： TypeError: 'test' is not a function\n```\n\n### 2. 使用闭包定义私有属性\n\n```js\nfunction Product() {\n\n    var name;\n\n    this.setName = function(value) {\n        name = value;\n    };\n\n    this.getName = function() {\n        return name;\n    };\n}\n\nvar p = new Product();\np.setName(\"test\");\n\nconsole.log(p.name); // 输出undefined\nconsole.log(p.getName()); // 输出test\n```\n\n代码中，对象p的的`name`属性为`私有属性`，使用`p.name`不能直接访问。\n\n### 3. 枚举属性\n\n- 可枚举性\n在js中，`基本数据类型`的原型属性是不可枚举的，比如`Object`、`Array`、`Number`等。\n\n```js\n    // 打印结果为空 Number内置属性是不可枚举的\n    var num = new Number()\n    for (let i in num) {\n        console.log(i, num[i])\n    }\n```\n\n- propertyIsEnumerable\n\n> Object.propertyIsEnumerable(prop)\n> prop 需要测试的属性名\n> 返回值 用来表示指定的属性名是否可枚举的Boolean\n> 属性必须满足 自身属性 && 枚举属性，才会返回true\n\n```js\nvar obj = {}\nobj.test = 'Jnathan'\n\nvar arr = [23, 67]\nobj.propertyIsEnumerable('test')  // true\narr.propertyIsEnumerable(0)  // true\narr.propertyIsEnumerable(1)  // true\n```\n\n- hasOwnProperty\n\n> Object.hasOwnProperty(prop)\n> prop 需要测试的属性名\n> 返回值 用来表示指定的属性名是否在对象中的Boolean\n\n```js\nvar obj = {}\nobj.x = 'Jnathan'\nobj.y = function() {}\nobj.hasOwnProperty('x')  // true\nobj.hasOwnProperty('y')  // true 方法也属于属性\nobj.hasOwnProperty('z')  // false 属性不存在\nobj.hasOwnProperty('toString')  // false toString是继承的Object中的属性，obj自身属性中不包含\n```\n\n```js\nfunction Person() {\n    this.name = 'Jnathan'\n}\nPerson.prototype = {\n    constructor: Person,\n    job: 'student',\n}\nvar Jnathan = new Person()\nObject.defineProperty(Jnathan, \"gender\", {\n    value: 'female',\n    enumerable: false\n})\n```\n\n以上， 用`defineProperty`为`对象Jnathan`定义了一个名为`gender`的`不可枚举属性`\n\n- 枚举 for...in\n\n```js\nfor (let item in Jnathan) {\n    console.log('Jnathan.' + item + ' = ' + Jnathan[item])\n}\n// Jnathan.name = Jnathan\n// Jnathan.constructor = function Person() {\n//     this.name = 'Jnathan'\n// }\n// Jnathan.job = student\n\nfunction enumer() {\n    this.a = '我是对象本身就有的属性'\n}\nenumer.prototype.b = '我是通过原型对象挂载的属性'\nlet fn = new enumer()\nObject.defineProperty(fn, 'c', {\n    value: '我是通过Object.defineProperty方法添加的可枚举属性',\n    enumerable: true\n});\nfor(let item in fn) {\n    console.log(item)\n}\n// a\n// b\n// c\n```\n\n- 枚举 Object.keys()\n\n```js\nObject.keys(Jnathan)\n// [\"name\"]\n\nfunction enumer() {\n    this.a = '我是对象本身就有的属性'\n}\nenumer.prototype.b = '我是通过原型对象挂载的属性'\nlet fn = new enumer()\nObject.defineProperty(fn, 'c', {\n    value: '我是通过Object.defineProperty方法添加的可枚举属性',\n    enumerable: true\n});\nconsole.log(Object.keys(fn))\n// [\"a\", \"c\"]\n```\n\n- 枚举 JSON.stringify()\n\n```js\nJSON.stringify(Jnathan)\n// \"{\"name\":\"Jnathan\"}\"\n\nfunction enumer() {\n    this.a = '我是对象本身就有的属性'\n}\nenumer.prototype.b = '我是通过原型对象挂载的属性'\nlet fn = new enumer()\nObject.defineProperty(fn, 'c', {\n    value: '我是通过Object.defineProperty方法添加的可枚举属性',\n    enumerable: true\n})\nconsole.log(JSON.stringify(fn))\n// {\"a\":\"我是对象本身就有的属性\",\"c\":\"我是通过Object.defineProperty方法添加的可枚举属性\"}\n```\n\n> 根据现象有以下总结\n> for...in 可以枚举对象本身具有的属性，通过Object.defineProperty()方法加的可枚举属性，或者通过原型对象绑定的可以枚举属性\n> Object.keys() 可以枚举对象本身的属性和通过Object.defineProperty()添加的可枚举属性\n> JSON.stringify() 可以枚举对象本身的属性和通过Object.defineProperty()添加的可枚举属性，并序列化为JSON字符串\n\n- !== undefined\n\n```js\nvar obj = {x: 1, y: undefined, z: null}\nconsole.log(obj.x !== undefined)  // true 属性存在\nconsole.log(obj.y !== undefined)  // false 此时会出现歧义，不能准确判断属性是不存在还是属性值本身就为undefined\nconsole.log(obj.z !== undefined)  // true 属性存在\nconsole.log(obj.z != undefined)  // false != 不能区分undefined和null，将两者同等对待\nconsole.log(obj.w !== undefined)  // false 属性不存在\nconsole.log(obj.toString !== undefined)  // true 存在toString函数属性。\n```\n\n- in 自身存在的属性或者继承的属性均返回true\n\n```js\nvar obj = {x: 1, y: undefined, z: null}\nconsole.log(\"x\" in obj)  // true 属性存在\nconsole.log(\"y\" in obj)  // true 属性存在\nconsole.log(\"z\" in obj)  // true 属性存在\nconsole.log(\"w\" in obj)  // false 属性不存在\nconsole.log(\"toString\" in obj)  // true 属性存在\n```\n\n- Object.defineProperty()\n\n> 参数：\n> Object.defineProperty(object, propertyname, descriptor)\n> object 必需。 要在其上添加或修改属性的对象。 这可能是一个本机 JavaScript 对象（即用户定义的对象或内置对象）或 DOM 对象。\n> propertyname 必需。 一个包含属性名称的字符串。\n> descriptor 必需。 属性描述符。 它可以针对数据属性或访问器属性。\n> 返回值：\n> 已修改对象\n\n当对象不具有指定的属性名称时，向对象添加新属性。当对象已具有指定的属性名称时，修改现有属性的特性。\n\n```js\nvar obj = {}\nObject.defineProperty(obj, \"newDataProperty\", {\n    value: 101,\n    writable: false,\n    enumerable: false,\n    configurable: true\n});\n\nobj.newDataProperty = 102\nconsole.log(obj.newDataProperty)  // 101 whiteable为false 只读，不能修改\n```\n\n- Object.getOwnPropertyNames\n\n由于obj的属性newDataProperty是不可枚举的，使用for...in不能找到newDataProperty属性\n\n```js\nfor (let item in obj) {\n    console.log(item, obj[item])  // 无输出\n}\n```\n\n此时可以使用Object.getOwnPropertyNames来遍历\n\n```js\nvar names = Object.getOwnPropertyNames(obj)\nfor (let i = 0; i < names.e]length; names++) {\n    console.log(names, i, names[i])\n}\n// [\"newDataProperty\"] 0 newDataProperty\n```\n\n```js\nvar obj = {}\nObject.defineProperty(obj, \"newAccessorProperty\", {\n    set: function (x) {\n        console.log(\"in property set accessor\");\n        this.newaccpropvalue = x;\n    },\n    get: function () {\n        console.log(\"in property get accessor\");\n        return this.newaccpropvalue;\n    },\n    enumerable: true,\n    configurable: true\n});\n\nobj.newAccessorProperty = 30\nconsole.log(\"Property value: \" + obj.newAccessorProperty)\n// in property set accessor\n// in property get accessor\n// Property value: 30\n```\n\n- 修改DOM上的属性\n\n```js\nObject.getOwnPropertyDescriptor(Element.prototype, \"querySelector\")\n// {value: ƒ, writable: true, enumerable: true, configurable: true}\n```\n\n```js\nvar descriptor = Object.getOwnPropertyDescriptor(Element.prototype, \"querySelector\")\n\ndescriptor.value = \"query\"\ndescriptor.writable = false\n\nObject.defineProperty(Element.prototype, \"querySelector\", descriptor)\n\nvar elem = document.getElementById(\"div\")\n\nelem.querySelector = \"anotherQuery\"  // whitable 为false 更改不生效\nconsole.log(elem.querySelector)  // query\n```\n","slug":"brief-info","published":1,"updated":"2019-07-29T09:33:04.106Z","_id":"cjyo49r550000u16tdvbtcn0s","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-一些js插件为什么以-开头\"><a href=\"#1-一些js插件为什么以-开头\" class=\"headerlink\" title=\"1. 一些js插件为什么以;开头\"></a>1. 一些js插件为什么以<code>;</code>开头</h3><p>因为js代码允许在结束的时候不添加<code>;</code>, 所以两个js文件在合并拼接的的时候可能出错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"comment\">// 末尾没有添加;符号</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'test'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>以上两个文件进行合并压缩的时候就可能变为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'test'</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这样会报错： TypeError: 'test' is not a function</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-使用闭包定义私有属性\"><a href=\"#2-使用闭包定义私有属性\" class=\"headerlink\" title=\"2. 使用闭包定义私有属性\"></a>2. 使用闭包定义私有属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Product</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        name = value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Product();</span><br><span class=\"line\">p.setName(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.name); <span class=\"comment\">// 输出undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.getName()); <span class=\"comment\">// 输出test</span></span><br></pre></td></tr></table></figure>\n<p>代码中，对象p的的<code>name</code>属性为<code>私有属性</code>，使用<code>p.name</code>不能直接访问。</p>\n<h3 id=\"3-枚举属性\"><a href=\"#3-枚举属性\" class=\"headerlink\" title=\"3. 枚举属性\"></a>3. 枚举属性</h3><ul>\n<li>可枚举性<br>在js中，<code>基本数据类型</code>的原型属性是不可枚举的，比如<code>Object</code>、<code>Array</code>、<code>Number</code>等。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打印结果为空 Number内置属性是不可枚举的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>()</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> num) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i, num[i])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>propertyIsEnumerable</li>\n</ul>\n<blockquote>\n<p>Object.propertyIsEnumerable(prop)<br>prop 需要测试的属性名<br>返回值 用来表示指定的属性名是否可枚举的Boolean<br>属性必须满足 自身属性 &amp;&amp; 枚举属性，才会返回true</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\">obj.test = <span class=\"string\">'Jnathan'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">23</span>, <span class=\"number\">67</span>]</span><br><span class=\"line\">obj.propertyIsEnumerable(<span class=\"string\">'test'</span>)  <span class=\"comment\">// true</span></span><br><span class=\"line\">arr.propertyIsEnumerable(<span class=\"number\">0</span>)  <span class=\"comment\">// true</span></span><br><span class=\"line\">arr.propertyIsEnumerable(<span class=\"number\">1</span>)  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>hasOwnProperty</li>\n</ul>\n<blockquote>\n<p>Object.hasOwnProperty(prop)<br>prop 需要测试的属性名<br>返回值 用来表示指定的属性名是否在对象中的Boolean</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\">obj.x = <span class=\"string\">'Jnathan'</span></span><br><span class=\"line\">obj.y = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">obj.hasOwnProperty(<span class=\"string\">'x'</span>)  <span class=\"comment\">// true</span></span><br><span class=\"line\">obj.hasOwnProperty(<span class=\"string\">'y'</span>)  <span class=\"comment\">// true 方法也属于属性</span></span><br><span class=\"line\">obj.hasOwnProperty(<span class=\"string\">'z'</span>)  <span class=\"comment\">// false 属性不存在</span></span><br><span class=\"line\">obj.hasOwnProperty(<span class=\"string\">'toString'</span>)  <span class=\"comment\">// false toString是继承的Object中的属性，obj自身属性中不包含</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'Jnathan'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: Person,</span><br><span class=\"line\">    job: 'student',</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var Jnathan = new Person()</span><br><span class=\"line\">Object.defineProperty(Jnathan, \"gender\", &#123;</span><br><span class=\"line\">    value: <span class=\"string\">'female'</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>以上， 用<code>defineProperty</code>为<code>对象Jnathan</code>定义了一个名为<code>gender</code>的<code>不可枚举属性</code></p>\n<ul>\n<li>枚举 for…in</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> Jnathan) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Jnathan.'</span> + item + <span class=\"string\">' = '</span> + Jnathan[item])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Jnathan.name = Jnathan</span></span><br><span class=\"line\"><span class=\"comment\">// Jnathan.constructor = function Person() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     this.name = 'Jnathan'</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// Jnathan.job = student</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enumer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"string\">'我是对象本身就有的属性'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">enumer.prototype.b = <span class=\"string\">'我是通过原型对象挂载的属性'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">new</span> enumer()</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(fn, <span class=\"string\">'c'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"string\">'我是通过Object.defineProperty方法添加的可枚举属性'</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> fn) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a</span></span><br><span class=\"line\"><span class=\"comment\">// b</span></span><br><span class=\"line\"><span class=\"comment\">// c</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>枚举 Object.keys()</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.keys(Jnathan)</span><br><span class=\"line\"><span class=\"comment\">// [\"name\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enumer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"string\">'我是对象本身就有的属性'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">enumer.prototype.b = <span class=\"string\">'我是通过原型对象挂载的属性'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">new</span> enumer()</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(fn, <span class=\"string\">'c'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"string\">'我是通过Object.defineProperty方法添加的可枚举属性'</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(fn))</span><br><span class=\"line\"><span class=\"comment\">// [\"a\", \"c\"]</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>枚举 JSON.stringify()</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(Jnathan)</span><br><span class=\"line\"><span class=\"comment\">// \"&#123;\"name\":\"Jnathan\"&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enumer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"string\">'我是对象本身就有的属性'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">enumer.prototype.b = <span class=\"string\">'我是通过原型对象挂载的属性'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">new</span> enumer()</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(fn, <span class=\"string\">'c'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"string\">'我是通过Object.defineProperty方法添加的可枚举属性'</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(fn))</span><br><span class=\"line\"><span class=\"comment\">// &#123;\"a\":\"我是对象本身就有的属性\",\"c\":\"我是通过Object.defineProperty方法添加的可枚举属性\"&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>根据现象有以下总结<br>for…in 可以枚举对象本身具有的属性，通过Object.defineProperty()方法加的可枚举属性，或者通过原型对象绑定的可以枚举属性<br>Object.keys() 可以枚举对象本身的属性和通过Object.defineProperty()添加的可枚举属性<br>JSON.stringify() 可以枚举对象本身的属性和通过Object.defineProperty()添加的可枚举属性，并序列化为JSON字符串</p>\n</blockquote>\n<ul>\n<li>!== undefined</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">z</span>: <span class=\"literal\">null</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.x !== <span class=\"literal\">undefined</span>)  <span class=\"comment\">// true 属性存在</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.y !== <span class=\"literal\">undefined</span>)  <span class=\"comment\">// false 此时会出现歧义，不能准确判断属性是不存在还是属性值本身就为undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.z !== <span class=\"literal\">undefined</span>)  <span class=\"comment\">// true 属性存在</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.z != <span class=\"literal\">undefined</span>)  <span class=\"comment\">// false != 不能区分undefined和null，将两者同等对待</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.w !== <span class=\"literal\">undefined</span>)  <span class=\"comment\">// false 属性不存在</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.toString !== <span class=\"literal\">undefined</span>)  <span class=\"comment\">// true 存在toString函数属性。</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>in 自身存在的属性或者继承的属性均返回true</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">z</span>: <span class=\"literal\">null</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"x\"</span> <span class=\"keyword\">in</span> obj)  <span class=\"comment\">// true 属性存在</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"y\"</span> <span class=\"keyword\">in</span> obj)  <span class=\"comment\">// true 属性存在</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"z\"</span> <span class=\"keyword\">in</span> obj)  <span class=\"comment\">// true 属性存在</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"w\"</span> <span class=\"keyword\">in</span> obj)  <span class=\"comment\">// false 属性不存在</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"toString\"</span> <span class=\"keyword\">in</span> obj)  <span class=\"comment\">// true 属性存在</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Object.defineProperty()</li>\n</ul>\n<blockquote>\n<p>参数：<br>Object.defineProperty(object, propertyname, descriptor)<br>object 必需。 要在其上添加或修改属性的对象。 这可能是一个本机 JavaScript 对象（即用户定义的对象或内置对象）或 DOM 对象。<br>propertyname 必需。 一个包含属性名称的字符串。<br>descriptor 必需。 属性描述符。 它可以针对数据属性或访问器属性。<br>返回值：<br>已修改对象</p>\n</blockquote>\n<p>当对象不具有指定的属性名称时，向对象添加新属性。当对象已具有指定的属性名称时，修改现有属性的特性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"newDataProperty\"</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"number\">101</span>,</span><br><span class=\"line\">    writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">obj.newDataProperty = <span class=\"number\">102</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.newDataProperty)  <span class=\"comment\">// 101 whiteable为false 只读，不能修改</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Object.getOwnPropertyNames</li>\n</ul>\n<p>由于obj的属性newDataProperty是不可枚举的，使用for…in不能找到newDataProperty属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item, obj[item])  <span class=\"comment\">// 无输出</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时可以使用Object.getOwnPropertyNames来遍历</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> names = <span class=\"built_in\">Object</span>.getOwnPropertyNames(obj)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; names.e]length; names++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(names, i, names[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// [\"newDataProperty\"] 0 newDataProperty</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"newAccessorProperty\"</span>, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function (x) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"in property set accessor\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.newaccpropvalue = x;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"in property get accessor\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.newaccpropvalue;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">obj.newAccessorProperty = <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Property value: \"</span> + obj.newAccessorProperty)</span><br><span class=\"line\"><span class=\"comment\">// in property set accessor</span></span><br><span class=\"line\"><span class=\"comment\">// in property get accessor</span></span><br><span class=\"line\"><span class=\"comment\">// Property value: 30</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改DOM上的属性</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(Element.prototype, <span class=\"string\">\"querySelector\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// &#123;value: ƒ, writable: true, enumerable: true, configurable: true&#125;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> descriptor = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(Element.prototype, <span class=\"string\">\"querySelector\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">descriptor.value = <span class=\"string\">\"query\"</span></span><br><span class=\"line\">descriptor.writable = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Element.prototype, <span class=\"string\">\"querySelector\"</span>, descriptor)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> elem = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"div\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">elem.querySelector = <span class=\"string\">\"anotherQuery\"</span>  <span class=\"comment\">// whitable 为false 更改不生效</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(elem.querySelector)  <span class=\"comment\">// query</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-一些js插件为什么以-开头\"><a href=\"#1-一些js插件为什么以-开头\" class=\"headerlink\" title=\"1. 一些js插件为什么以;开头\"></a>1. 一些js插件为什么以<code>;</code>开头</h3><p>因为js代码允许在结束的时候不添加<code>;</code>, 所以两个js文件在合并拼接的的时候可能出错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"comment\">// 末尾没有添加;符号</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'test'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>","more":"<p>以上两个文件进行合并压缩的时候就可能变为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'test'</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这样会报错： TypeError: 'test' is not a function</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-使用闭包定义私有属性\"><a href=\"#2-使用闭包定义私有属性\" class=\"headerlink\" title=\"2. 使用闭包定义私有属性\"></a>2. 使用闭包定义私有属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Product</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        name = value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Product();</span><br><span class=\"line\">p.setName(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.name); <span class=\"comment\">// 输出undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.getName()); <span class=\"comment\">// 输出test</span></span><br></pre></td></tr></table></figure>\n<p>代码中，对象p的的<code>name</code>属性为<code>私有属性</code>，使用<code>p.name</code>不能直接访问。</p>\n<h3 id=\"3-枚举属性\"><a href=\"#3-枚举属性\" class=\"headerlink\" title=\"3. 枚举属性\"></a>3. 枚举属性</h3><ul>\n<li>可枚举性<br>在js中，<code>基本数据类型</code>的原型属性是不可枚举的，比如<code>Object</code>、<code>Array</code>、<code>Number</code>等。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打印结果为空 Number内置属性是不可枚举的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>()</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> num) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i, num[i])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>propertyIsEnumerable</li>\n</ul>\n<blockquote>\n<p>Object.propertyIsEnumerable(prop)<br>prop 需要测试的属性名<br>返回值 用来表示指定的属性名是否可枚举的Boolean<br>属性必须满足 自身属性 &amp;&amp; 枚举属性，才会返回true</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\">obj.test = <span class=\"string\">'Jnathan'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">23</span>, <span class=\"number\">67</span>]</span><br><span class=\"line\">obj.propertyIsEnumerable(<span class=\"string\">'test'</span>)  <span class=\"comment\">// true</span></span><br><span class=\"line\">arr.propertyIsEnumerable(<span class=\"number\">0</span>)  <span class=\"comment\">// true</span></span><br><span class=\"line\">arr.propertyIsEnumerable(<span class=\"number\">1</span>)  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>hasOwnProperty</li>\n</ul>\n<blockquote>\n<p>Object.hasOwnProperty(prop)<br>prop 需要测试的属性名<br>返回值 用来表示指定的属性名是否在对象中的Boolean</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\">obj.x = <span class=\"string\">'Jnathan'</span></span><br><span class=\"line\">obj.y = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">obj.hasOwnProperty(<span class=\"string\">'x'</span>)  <span class=\"comment\">// true</span></span><br><span class=\"line\">obj.hasOwnProperty(<span class=\"string\">'y'</span>)  <span class=\"comment\">// true 方法也属于属性</span></span><br><span class=\"line\">obj.hasOwnProperty(<span class=\"string\">'z'</span>)  <span class=\"comment\">// false 属性不存在</span></span><br><span class=\"line\">obj.hasOwnProperty(<span class=\"string\">'toString'</span>)  <span class=\"comment\">// false toString是继承的Object中的属性，obj自身属性中不包含</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'Jnathan'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: Person,</span><br><span class=\"line\">    job: 'student',</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var Jnathan = new Person()</span><br><span class=\"line\">Object.defineProperty(Jnathan, \"gender\", &#123;</span><br><span class=\"line\">    value: <span class=\"string\">'female'</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>以上， 用<code>defineProperty</code>为<code>对象Jnathan</code>定义了一个名为<code>gender</code>的<code>不可枚举属性</code></p>\n<ul>\n<li>枚举 for…in</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> Jnathan) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Jnathan.'</span> + item + <span class=\"string\">' = '</span> + Jnathan[item])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Jnathan.name = Jnathan</span></span><br><span class=\"line\"><span class=\"comment\">// Jnathan.constructor = function Person() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     this.name = 'Jnathan'</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// Jnathan.job = student</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enumer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"string\">'我是对象本身就有的属性'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">enumer.prototype.b = <span class=\"string\">'我是通过原型对象挂载的属性'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">new</span> enumer()</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(fn, <span class=\"string\">'c'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"string\">'我是通过Object.defineProperty方法添加的可枚举属性'</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> fn) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a</span></span><br><span class=\"line\"><span class=\"comment\">// b</span></span><br><span class=\"line\"><span class=\"comment\">// c</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>枚举 Object.keys()</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.keys(Jnathan)</span><br><span class=\"line\"><span class=\"comment\">// [\"name\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enumer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"string\">'我是对象本身就有的属性'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">enumer.prototype.b = <span class=\"string\">'我是通过原型对象挂载的属性'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">new</span> enumer()</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(fn, <span class=\"string\">'c'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"string\">'我是通过Object.defineProperty方法添加的可枚举属性'</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(fn))</span><br><span class=\"line\"><span class=\"comment\">// [\"a\", \"c\"]</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>枚举 JSON.stringify()</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(Jnathan)</span><br><span class=\"line\"><span class=\"comment\">// \"&#123;\"name\":\"Jnathan\"&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enumer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"string\">'我是对象本身就有的属性'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">enumer.prototype.b = <span class=\"string\">'我是通过原型对象挂载的属性'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">new</span> enumer()</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(fn, <span class=\"string\">'c'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"string\">'我是通过Object.defineProperty方法添加的可枚举属性'</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(fn))</span><br><span class=\"line\"><span class=\"comment\">// &#123;\"a\":\"我是对象本身就有的属性\",\"c\":\"我是通过Object.defineProperty方法添加的可枚举属性\"&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>根据现象有以下总结<br>for…in 可以枚举对象本身具有的属性，通过Object.defineProperty()方法加的可枚举属性，或者通过原型对象绑定的可以枚举属性<br>Object.keys() 可以枚举对象本身的属性和通过Object.defineProperty()添加的可枚举属性<br>JSON.stringify() 可以枚举对象本身的属性和通过Object.defineProperty()添加的可枚举属性，并序列化为JSON字符串</p>\n</blockquote>\n<ul>\n<li>!== undefined</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">z</span>: <span class=\"literal\">null</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.x !== <span class=\"literal\">undefined</span>)  <span class=\"comment\">// true 属性存在</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.y !== <span class=\"literal\">undefined</span>)  <span class=\"comment\">// false 此时会出现歧义，不能准确判断属性是不存在还是属性值本身就为undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.z !== <span class=\"literal\">undefined</span>)  <span class=\"comment\">// true 属性存在</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.z != <span class=\"literal\">undefined</span>)  <span class=\"comment\">// false != 不能区分undefined和null，将两者同等对待</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.w !== <span class=\"literal\">undefined</span>)  <span class=\"comment\">// false 属性不存在</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.toString !== <span class=\"literal\">undefined</span>)  <span class=\"comment\">// true 存在toString函数属性。</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>in 自身存在的属性或者继承的属性均返回true</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">z</span>: <span class=\"literal\">null</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"x\"</span> <span class=\"keyword\">in</span> obj)  <span class=\"comment\">// true 属性存在</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"y\"</span> <span class=\"keyword\">in</span> obj)  <span class=\"comment\">// true 属性存在</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"z\"</span> <span class=\"keyword\">in</span> obj)  <span class=\"comment\">// true 属性存在</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"w\"</span> <span class=\"keyword\">in</span> obj)  <span class=\"comment\">// false 属性不存在</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"toString\"</span> <span class=\"keyword\">in</span> obj)  <span class=\"comment\">// true 属性存在</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Object.defineProperty()</li>\n</ul>\n<blockquote>\n<p>参数：<br>Object.defineProperty(object, propertyname, descriptor)<br>object 必需。 要在其上添加或修改属性的对象。 这可能是一个本机 JavaScript 对象（即用户定义的对象或内置对象）或 DOM 对象。<br>propertyname 必需。 一个包含属性名称的字符串。<br>descriptor 必需。 属性描述符。 它可以针对数据属性或访问器属性。<br>返回值：<br>已修改对象</p>\n</blockquote>\n<p>当对象不具有指定的属性名称时，向对象添加新属性。当对象已具有指定的属性名称时，修改现有属性的特性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"newDataProperty\"</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"number\">101</span>,</span><br><span class=\"line\">    writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">obj.newDataProperty = <span class=\"number\">102</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.newDataProperty)  <span class=\"comment\">// 101 whiteable为false 只读，不能修改</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Object.getOwnPropertyNames</li>\n</ul>\n<p>由于obj的属性newDataProperty是不可枚举的，使用for…in不能找到newDataProperty属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item, obj[item])  <span class=\"comment\">// 无输出</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时可以使用Object.getOwnPropertyNames来遍历</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> names = <span class=\"built_in\">Object</span>.getOwnPropertyNames(obj)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; names.e]length; names++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(names, i, names[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// [\"newDataProperty\"] 0 newDataProperty</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"newAccessorProperty\"</span>, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function (x) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"in property set accessor\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.newaccpropvalue = x;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"in property get accessor\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.newaccpropvalue;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">obj.newAccessorProperty = <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Property value: \"</span> + obj.newAccessorProperty)</span><br><span class=\"line\"><span class=\"comment\">// in property set accessor</span></span><br><span class=\"line\"><span class=\"comment\">// in property get accessor</span></span><br><span class=\"line\"><span class=\"comment\">// Property value: 30</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改DOM上的属性</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(Element.prototype, <span class=\"string\">\"querySelector\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// &#123;value: ƒ, writable: true, enumerable: true, configurable: true&#125;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> descriptor = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(Element.prototype, <span class=\"string\">\"querySelector\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">descriptor.value = <span class=\"string\">\"query\"</span></span><br><span class=\"line\">descriptor.writable = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Element.prototype, <span class=\"string\">\"querySelector\"</span>, descriptor)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> elem = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"div\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">elem.querySelector = <span class=\"string\">\"anotherQuery\"</span>  <span class=\"comment\">// whitable 为false 更改不生效</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(elem.querySelector)  <span class=\"comment\">// query</span></span><br></pre></td></tr></table></figure>"},{"title":"forEach遍历中断","date":"2019-05-22T09:28:36.000Z","_content":"\n```js\ntry {\n    [22, 34, 20, 36, 98].forEach( (value, index, arr) => {\n        if (value === 20) {\n            console.log('遇到20能够退出循环吗？')\n            throw Error('自定义异常提示语')\n            return  // return并不能中断循环，这里可写可不写\n        } else console.log('当前遍历值：', value)\n    })\n} catch(err) {\n    console.log(err.message)\n}\n// 22\n// 34\n// 遇到20能够退出循环吗？\n// 自定义异常提示语\n```","source":"_posts/forEach-interrupt.md","raw":"---\ntitle: forEach遍历中断\ndate: 2019-05-22 17:28:36\ntags:\n---\n\n```js\ntry {\n    [22, 34, 20, 36, 98].forEach( (value, index, arr) => {\n        if (value === 20) {\n            console.log('遇到20能够退出循环吗？')\n            throw Error('自定义异常提示语')\n            return  // return并不能中断循环，这里可写可不写\n        } else console.log('当前遍历值：', value)\n    })\n} catch(err) {\n    console.log(err.message)\n}\n// 22\n// 34\n// 遇到20能够退出循环吗？\n// 自定义异常提示语\n```","slug":"forEach-interrupt","published":1,"updated":"2019-05-22T09:40:16.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyo49r5a0001u16ti5kqb0i3","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    [<span class=\"number\">22</span>, <span class=\"number\">34</span>, <span class=\"number\">20</span>, <span class=\"number\">36</span>, <span class=\"number\">98</span>].forEach( <span class=\"function\">(<span class=\"params\">value, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value === <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'遇到20能够退出循环吗？'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'自定义异常提示语'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>  <span class=\"comment\">// return并不能中断循环，这里可写可不写</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'当前遍历值：'</span>, value)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err.message)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 22</span></span><br><span class=\"line\"><span class=\"comment\">// 34</span></span><br><span class=\"line\"><span class=\"comment\">// 遇到20能够退出循环吗？</span></span><br><span class=\"line\"><span class=\"comment\">// 自定义异常提示语</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    [<span class=\"number\">22</span>, <span class=\"number\">34</span>, <span class=\"number\">20</span>, <span class=\"number\">36</span>, <span class=\"number\">98</span>].forEach( <span class=\"function\">(<span class=\"params\">value, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value === <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'遇到20能够退出循环吗？'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'自定义异常提示语'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>  <span class=\"comment\">// return并不能中断循环，这里可写可不写</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'当前遍历值：'</span>, value)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err.message)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 22</span></span><br><span class=\"line\"><span class=\"comment\">// 34</span></span><br><span class=\"line\"><span class=\"comment\">// 遇到20能够退出循环吗？</span></span><br><span class=\"line\"><span class=\"comment\">// 自定义异常提示语</span></span><br></pre></td></tr></table></figure>"},{"title":"日志内容【二】","date":"2019-05-26T06:08:31.000Z","toc":true,"_content":"\n### 1. substr() 和 substring()\n\n- substr\n\n> stringObject.substr(startIndex[, length])\n\n<!-- More -->\n\n```js\nvar str = ‘abcdefg'\n\nstr.substr(2)  // ‘cdefg’\nstr.substr(-1) => str.substr(6)  // ‘fg’\nstr.substr(6)  // ‘'\nstr.substr(2,2)  // ‘cd’\nstr.substr(2,7)  // ‘cdefg’\nstr.substr(2,-1) // ''\n```\n\n- substring\n\n> stringObject.substring(startIndex[, stop]) 注意stop的含义\n\n```js\nvar str = ‘abcdefg'\n\nstr.substring(2)  // ‘cdefg’\nstr.substring(2,4)  // ‘cd’\nstr.substring(2,9)  // ‘cdefg’\nstr.substring(-2) => str.substring(0)  // ‘abcdefg’\nstr.substring(2,-4) => str.substring(2,0) => str.substring(0,2)  // ‘ab'\n```\n\n### 2. slice() 和 splice()\n\n- slice\n\n> stringObject.slice(startIndex[, stop])\n> arrayObject.slice(startIndex[, stop])\n> stop  缺省时 默认一直到最后\n\n```js\nvar str = ‘abcdefg’\n\nstr.slice(2)  // ‘cdefg'\nstr.slice(0)  // ‘abcdefg’\nstr.slice(-2) => str.slice(5)  // ‘fg’\nstr.slice(8)  // ‘’ 空串 \nstr.slice(2,4)  // ‘cd’\nstr.slice(2,6)  // ‘cdef’\nstr.slice(2,18)  // ‘cdefg’\nstr.slice(4,2)  // ‘’ 空串\nstr.slice(4,-1) => str.slice(4,6)  // ‘ef’\n\n// 数组方法类似\n```\n\n- splice\n\n> arrayObject.splice(startIndex, length[, item1, item2…])\n> splice操作会改变原数组  返回被移除的元素数组\n\n```js\nvar arr = [‘a’,’b’,’c’,’d’,’e’,’f’,’g’]\n\narr.splice(2,0)  // 空数组 arr = [‘a’,’b’,’c’,’d’,’e’,’f’,’g’]\narr.splice(2,8)  // arr = [‘a’, ‘b’, ‘c']\narr.splice(2,-5)  // 返回arr  arr没有变化\n\narr.splice(8,2)  // 返回arr  arr没有变化\narr.splice(2,2,'11',’22')  // 返回[‘a’, ‘b’, ’11’, ’22’, ‘e’, ‘f’, ‘g’]  arr = [‘c’, ‘d']\n```\n\n### 3. 检测数据类型\n\n- typeof\n\n> typeof  是解释器内部实现，根据 ECMA-262 规定的几种类型的值来返回类型名称。\n> 但是  typeof  的应用场景非常有限，基本上只能判断出来使用字面量方式赋值的基本数据类型。\n\n```js\ntypeof 23  // number\ntypeof '124'  // string\ntypeof true  // boolean\ntypeof undefined  // undefined\ntypeof {}  // object\ntypeof null  // object\ntypeof [1, 3, 8]  // object\ntypeof function fn () {}  // function\ntypeof (new Number(33))  // object\ntypeof (new String('hello'))  // object\n```\n\n从上面例子可以看出， typeof  检测出来的类型不够准确，具有相当大的局限性。\n\n- instanceof\n\n> instance  检测类型的原理大致为: 判断左边的对象的隐式原型  __proto__  是否和右边对象的显式原型  prototype  相等。 很像  new  操作，这样就可以判断指定的某个对象是否为某个构造函数的实例。  instance  的局限性应该是不能检测基本数据类型。另外一点，不同  window  或者  iframe  之间对象类型检测不能使用  instanceof  来检测。\n\n```js\n'123' instance String  // false\n\nNumber instanceof Number  // true\n\nnew String('hello') instance String  // true\n\nnew Number(33) instance Number  // true\n```\n\n- Object.prototype.toString\n\n```js\nObject.prototype.toString.call(33)  // [object Number]\n\nObject.prototype.toString.call('hello')  // [object String]\n\nObject.prototype.toString.call([])  // [object Array]\n\nObject.prototype.toString.call({})  // [object Object]\n\nObject.prototype.toString.call(true)  // [object Boolean]\n\nObject.prototype.toString.call(null)  // [object null]\n\nObject.prototype.toString.call(undefined)  // [object undefined]\n\nObject.prototype.toString.call(function fn () {})  // [object Function]\n\nObject.prototype.toString.call(new Number(33))   // [object Number] \n```\n\n- constructor\n\n> constructor  属性返回对创建此对象的数组函数的引用。\n> constructor  不能检测出null和undefined两种，会报错。\n\n```js\n(33).constructor == Number  // true\n\n('hello'.constructor == String  // true\n\n([]).constructor == Array  // true\n\n({}).constructor == Object  // true\n\n(true).constructor == Boolean  // true\n\n(null).constructor == null  // TypeError: Cannot read property 'constructor' of null\n\n(undefined).constructor == undefined  // TypeError: Cannot read property 'constructor' of undefined\n\nvar fn = function () {}\nfn.constructor == Function  // true\n\nvar number = new Number(66)\nnumber.constructor == Number  // true\nnumber.constructor == Object  // false\n```\n\n- 我是分割线\n\n- Array.isArray()\n\n### 4. ES5 Array Function\n\n- forEach\n\n> Array.forEach(callbackFn[, thisObj])\n> callbackFn (value, index, arr)\n> `thisObj` 默认为 `window`\n\n```js\n[1, 2, 5, 8].forEach( function (ele, index, arr) {\n    console.log(ele, index, arr)\n})\n```\n\n- map\n\n> Array.map(callbackFn[, thisObj])\n> callbackFn (value, index, arr)\n\n```js\n[1, 2, 5, 8].map(function (ele, index, arr) {\n    return ele * index  // [0, 2, 10, 24]\n})\n```\n\n- filter\n\n> Array.filter(callbackFn[, thisObj])\n> callbackFn (value, index, arr), 需要返回 Boolean 值\n\n```js\n[0, 2, 5, 8].filter(function (ele, index, arr) {\n    return ele  // [2, 5, 8]\n})\n\n[0, 2, 5, 1].filter(function (ele, index, arr) {\n    return ele <= index  // [0, 1]\n})\n```\n\n- some\n\n> Array.some(callbackFn[, thisObj])\n> callbackFn (value, index, arr)\n\n```js\n[1, 2, 5, 8].some(function (ele, index, arr) {\n    return ele > 5  // true (8 > 5)\n})\n```\n\n- every\n\n> Array.every(callbackFn[, thisObj])\n> callbackFn (value, index, arr)\n\n```js\n[1, 2, 5, 8].every(function (ele, index, arr) {\n    return ele > 5  // false (1, 2, 5 均不大于5)\n})\n```\n\n- indexOf\n\n> Array.indexof(searchEle[, fromIndex])\n> 第一个出现的 `searchEle` 的索引位置\n> `searchEle` 要查找的元素\n> `fromIndex` 开始查找的索引位置，缺省或不符合规范时为 0\n\n```js\n[1, 2, 5, 8].indexOf(2)  // 1\n[1, 2, 5, 8].indexOf(2, '0')  // 1\n[1, 2, 5, 8].indexOf(2, 'f') => [1, 2, 5, 8].indexOf(2, 0)  // 1\n[1, 2, 5, 8].indexOf(2, 2)  // -1\n```\n\n- lastIndexOf\n\n> Array.lastIndexOf(searchEle[, fromIndex])\n> 与 `indexOf` 不同在于此方法是从后面元素开始查找的\n> `searchEle` 要查找的元素\n> `fromIndex` 开始查找的索引位置，缺省时或大于等于 Array.length 为 Array.length - 1\n\n```js\n[1, 2, 5, 8, 5].lastIndexOf(5)  // 4\n[1, 2, 5, 8, 5].lastIndexOf(5, 4)  // 4\n[1, 2, 5, 8, 5].lastIndexOf(5, 8) => [1, 2, 5, 8, 5].lastIndexOf(5, 4)  // 4\n[1, 2, 5, 8, 5].lastIndexOf(5, 'f')  // -1\n[1, 2, 5, 8, 5].lastIndexOf(5, 3)  // 2\n[1, 2, 5, 8, 5].lastIndexOf(5, 1)  // -1\n```\n\n- reduce\n\n> Array.reduce(callbackFn[, initValue])\n> callbackFn(previous, current, index, arr)\n> `previous` 前一次迭代计算出来的值\n> `current` 当前迭代的值\n> `initValue` 初始值, 未指定时取数组的第一个元素\n\n```js\n[1, 2, 5, 8].reduce(function (preV, curV, index, arr) {\n    return preV + curV\n}, 10)  // 26\n```\n\n```js\n// 梳理一下计算过程：\n// 初始化的时候\npreV = initValue = 10, curV = 1, index = 0\n\n// 第一次计算\npreV = 10 + 1 = 11, curV = 2, index = 1\n\n// 第二次计算\npreV = 11 + 2 = 13, curV = 5, index = 2\n\n// 第三次计算\npreV = 13 + 5 = 18, curV = 8, index = 3\n\n// 第四次计算\npreV = 18 + 8 = 26, curV = undefined (退出)\n```\n\n- reduceRight\n\n> 和 `reduceRight` 用法基本一致，不过是从数组后面开始迭代的\n> Array.reduceRight(callbackFn[, initValue])\n> callbackFn(previous, current, index, arr)\n> `previous` 前一次迭代计算出来的值\n> `current` 当前迭代的值\n\n```js\n[1, 2, 5, 8].reduceRight(function (preV, curV, index, arr) {\n    if (index == 0) {\n        return preV - curV\n    }\n    return preV + curV\n}, 10)  // 24\n```\n\n```js\n// 梳理一下计算过程：\n// 初始化的时候\npreV = initValue = 10, curV = 8, index = 3\n\n// 第一次计算\npreV = 10 + 8 = 18, curV = 5, index = 2\n\n// 第二次计算\npreV = 18 + 5 = 23, curV = 2, index = 1\n\n// 第三次计算\npreV = 23 + 2 = 25, curV = 1, index = 0\n\n// 第四次计算\npreV = 25 - 1 = 24, curV = undefined (退出)\n```\n\n### [参考文章](https://juejin.im/post/59b5540c5188257e8769e95d)","source":"_posts/multiple-diary2.md","raw":"---\ntitle: 日志内容【二】\ndate: 2019-05-26 14:08:31\ntoc: true\ntags:\n---\n\n### 1. substr() 和 substring()\n\n- substr\n\n> stringObject.substr(startIndex[, length])\n\n<!-- More -->\n\n```js\nvar str = ‘abcdefg'\n\nstr.substr(2)  // ‘cdefg’\nstr.substr(-1) => str.substr(6)  // ‘fg’\nstr.substr(6)  // ‘'\nstr.substr(2,2)  // ‘cd’\nstr.substr(2,7)  // ‘cdefg’\nstr.substr(2,-1) // ''\n```\n\n- substring\n\n> stringObject.substring(startIndex[, stop]) 注意stop的含义\n\n```js\nvar str = ‘abcdefg'\n\nstr.substring(2)  // ‘cdefg’\nstr.substring(2,4)  // ‘cd’\nstr.substring(2,9)  // ‘cdefg’\nstr.substring(-2) => str.substring(0)  // ‘abcdefg’\nstr.substring(2,-4) => str.substring(2,0) => str.substring(0,2)  // ‘ab'\n```\n\n### 2. slice() 和 splice()\n\n- slice\n\n> stringObject.slice(startIndex[, stop])\n> arrayObject.slice(startIndex[, stop])\n> stop  缺省时 默认一直到最后\n\n```js\nvar str = ‘abcdefg’\n\nstr.slice(2)  // ‘cdefg'\nstr.slice(0)  // ‘abcdefg’\nstr.slice(-2) => str.slice(5)  // ‘fg’\nstr.slice(8)  // ‘’ 空串 \nstr.slice(2,4)  // ‘cd’\nstr.slice(2,6)  // ‘cdef’\nstr.slice(2,18)  // ‘cdefg’\nstr.slice(4,2)  // ‘’ 空串\nstr.slice(4,-1) => str.slice(4,6)  // ‘ef’\n\n// 数组方法类似\n```\n\n- splice\n\n> arrayObject.splice(startIndex, length[, item1, item2…])\n> splice操作会改变原数组  返回被移除的元素数组\n\n```js\nvar arr = [‘a’,’b’,’c’,’d’,’e’,’f’,’g’]\n\narr.splice(2,0)  // 空数组 arr = [‘a’,’b’,’c’,’d’,’e’,’f’,’g’]\narr.splice(2,8)  // arr = [‘a’, ‘b’, ‘c']\narr.splice(2,-5)  // 返回arr  arr没有变化\n\narr.splice(8,2)  // 返回arr  arr没有变化\narr.splice(2,2,'11',’22')  // 返回[‘a’, ‘b’, ’11’, ’22’, ‘e’, ‘f’, ‘g’]  arr = [‘c’, ‘d']\n```\n\n### 3. 检测数据类型\n\n- typeof\n\n> typeof  是解释器内部实现，根据 ECMA-262 规定的几种类型的值来返回类型名称。\n> 但是  typeof  的应用场景非常有限，基本上只能判断出来使用字面量方式赋值的基本数据类型。\n\n```js\ntypeof 23  // number\ntypeof '124'  // string\ntypeof true  // boolean\ntypeof undefined  // undefined\ntypeof {}  // object\ntypeof null  // object\ntypeof [1, 3, 8]  // object\ntypeof function fn () {}  // function\ntypeof (new Number(33))  // object\ntypeof (new String('hello'))  // object\n```\n\n从上面例子可以看出， typeof  检测出来的类型不够准确，具有相当大的局限性。\n\n- instanceof\n\n> instance  检测类型的原理大致为: 判断左边的对象的隐式原型  __proto__  是否和右边对象的显式原型  prototype  相等。 很像  new  操作，这样就可以判断指定的某个对象是否为某个构造函数的实例。  instance  的局限性应该是不能检测基本数据类型。另外一点，不同  window  或者  iframe  之间对象类型检测不能使用  instanceof  来检测。\n\n```js\n'123' instance String  // false\n\nNumber instanceof Number  // true\n\nnew String('hello') instance String  // true\n\nnew Number(33) instance Number  // true\n```\n\n- Object.prototype.toString\n\n```js\nObject.prototype.toString.call(33)  // [object Number]\n\nObject.prototype.toString.call('hello')  // [object String]\n\nObject.prototype.toString.call([])  // [object Array]\n\nObject.prototype.toString.call({})  // [object Object]\n\nObject.prototype.toString.call(true)  // [object Boolean]\n\nObject.prototype.toString.call(null)  // [object null]\n\nObject.prototype.toString.call(undefined)  // [object undefined]\n\nObject.prototype.toString.call(function fn () {})  // [object Function]\n\nObject.prototype.toString.call(new Number(33))   // [object Number] \n```\n\n- constructor\n\n> constructor  属性返回对创建此对象的数组函数的引用。\n> constructor  不能检测出null和undefined两种，会报错。\n\n```js\n(33).constructor == Number  // true\n\n('hello'.constructor == String  // true\n\n([]).constructor == Array  // true\n\n({}).constructor == Object  // true\n\n(true).constructor == Boolean  // true\n\n(null).constructor == null  // TypeError: Cannot read property 'constructor' of null\n\n(undefined).constructor == undefined  // TypeError: Cannot read property 'constructor' of undefined\n\nvar fn = function () {}\nfn.constructor == Function  // true\n\nvar number = new Number(66)\nnumber.constructor == Number  // true\nnumber.constructor == Object  // false\n```\n\n- 我是分割线\n\n- Array.isArray()\n\n### 4. ES5 Array Function\n\n- forEach\n\n> Array.forEach(callbackFn[, thisObj])\n> callbackFn (value, index, arr)\n> `thisObj` 默认为 `window`\n\n```js\n[1, 2, 5, 8].forEach( function (ele, index, arr) {\n    console.log(ele, index, arr)\n})\n```\n\n- map\n\n> Array.map(callbackFn[, thisObj])\n> callbackFn (value, index, arr)\n\n```js\n[1, 2, 5, 8].map(function (ele, index, arr) {\n    return ele * index  // [0, 2, 10, 24]\n})\n```\n\n- filter\n\n> Array.filter(callbackFn[, thisObj])\n> callbackFn (value, index, arr), 需要返回 Boolean 值\n\n```js\n[0, 2, 5, 8].filter(function (ele, index, arr) {\n    return ele  // [2, 5, 8]\n})\n\n[0, 2, 5, 1].filter(function (ele, index, arr) {\n    return ele <= index  // [0, 1]\n})\n```\n\n- some\n\n> Array.some(callbackFn[, thisObj])\n> callbackFn (value, index, arr)\n\n```js\n[1, 2, 5, 8].some(function (ele, index, arr) {\n    return ele > 5  // true (8 > 5)\n})\n```\n\n- every\n\n> Array.every(callbackFn[, thisObj])\n> callbackFn (value, index, arr)\n\n```js\n[1, 2, 5, 8].every(function (ele, index, arr) {\n    return ele > 5  // false (1, 2, 5 均不大于5)\n})\n```\n\n- indexOf\n\n> Array.indexof(searchEle[, fromIndex])\n> 第一个出现的 `searchEle` 的索引位置\n> `searchEle` 要查找的元素\n> `fromIndex` 开始查找的索引位置，缺省或不符合规范时为 0\n\n```js\n[1, 2, 5, 8].indexOf(2)  // 1\n[1, 2, 5, 8].indexOf(2, '0')  // 1\n[1, 2, 5, 8].indexOf(2, 'f') => [1, 2, 5, 8].indexOf(2, 0)  // 1\n[1, 2, 5, 8].indexOf(2, 2)  // -1\n```\n\n- lastIndexOf\n\n> Array.lastIndexOf(searchEle[, fromIndex])\n> 与 `indexOf` 不同在于此方法是从后面元素开始查找的\n> `searchEle` 要查找的元素\n> `fromIndex` 开始查找的索引位置，缺省时或大于等于 Array.length 为 Array.length - 1\n\n```js\n[1, 2, 5, 8, 5].lastIndexOf(5)  // 4\n[1, 2, 5, 8, 5].lastIndexOf(5, 4)  // 4\n[1, 2, 5, 8, 5].lastIndexOf(5, 8) => [1, 2, 5, 8, 5].lastIndexOf(5, 4)  // 4\n[1, 2, 5, 8, 5].lastIndexOf(5, 'f')  // -1\n[1, 2, 5, 8, 5].lastIndexOf(5, 3)  // 2\n[1, 2, 5, 8, 5].lastIndexOf(5, 1)  // -1\n```\n\n- reduce\n\n> Array.reduce(callbackFn[, initValue])\n> callbackFn(previous, current, index, arr)\n> `previous` 前一次迭代计算出来的值\n> `current` 当前迭代的值\n> `initValue` 初始值, 未指定时取数组的第一个元素\n\n```js\n[1, 2, 5, 8].reduce(function (preV, curV, index, arr) {\n    return preV + curV\n}, 10)  // 26\n```\n\n```js\n// 梳理一下计算过程：\n// 初始化的时候\npreV = initValue = 10, curV = 1, index = 0\n\n// 第一次计算\npreV = 10 + 1 = 11, curV = 2, index = 1\n\n// 第二次计算\npreV = 11 + 2 = 13, curV = 5, index = 2\n\n// 第三次计算\npreV = 13 + 5 = 18, curV = 8, index = 3\n\n// 第四次计算\npreV = 18 + 8 = 26, curV = undefined (退出)\n```\n\n- reduceRight\n\n> 和 `reduceRight` 用法基本一致，不过是从数组后面开始迭代的\n> Array.reduceRight(callbackFn[, initValue])\n> callbackFn(previous, current, index, arr)\n> `previous` 前一次迭代计算出来的值\n> `current` 当前迭代的值\n\n```js\n[1, 2, 5, 8].reduceRight(function (preV, curV, index, arr) {\n    if (index == 0) {\n        return preV - curV\n    }\n    return preV + curV\n}, 10)  // 24\n```\n\n```js\n// 梳理一下计算过程：\n// 初始化的时候\npreV = initValue = 10, curV = 8, index = 3\n\n// 第一次计算\npreV = 10 + 8 = 18, curV = 5, index = 2\n\n// 第二次计算\npreV = 18 + 5 = 23, curV = 2, index = 1\n\n// 第三次计算\npreV = 23 + 2 = 25, curV = 1, index = 0\n\n// 第四次计算\npreV = 25 - 1 = 24, curV = undefined (退出)\n```\n\n### [参考文章](https://juejin.im/post/59b5540c5188257e8769e95d)","slug":"multiple-diary2","published":1,"updated":"2019-06-06T08:58:09.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyo49r5c0002u16ta2kn96ar","content":"<h3 id=\"1-substr-和-substring\"><a href=\"#1-substr-和-substring\" class=\"headerlink\" title=\"1. substr() 和 substring()\"></a>1. substr() 和 substring()</h3><ul>\n<li>substr</li>\n</ul>\n<blockquote>\n<p>stringObject.substr(startIndex[, length])</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = ‘abcdefg<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">str.substr(2)  // ‘cdefg’</span></span><br><span class=\"line\"><span class=\"string\">str.substr(-1) =&gt; str.substr(6)  // ‘fg’</span></span><br><span class=\"line\"><span class=\"string\">str.substr(6)  // ‘'</span></span><br><span class=\"line\">str.substr(<span class=\"number\">2</span>,<span class=\"number\">2</span>)  <span class=\"comment\">// ‘cd’</span></span><br><span class=\"line\">str.substr(<span class=\"number\">2</span>,<span class=\"number\">7</span>)  <span class=\"comment\">// ‘cdefg’</span></span><br><span class=\"line\">str.substr(<span class=\"number\">2</span>,<span class=\"number\">-1</span>) <span class=\"comment\">// ''</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>substring</li>\n</ul>\n<blockquote>\n<p>stringObject.substring(startIndex[, stop]) 注意stop的含义</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = ‘abcdefg<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">str.substring(2)  // ‘cdefg’</span></span><br><span class=\"line\"><span class=\"string\">str.substring(2,4)  // ‘cd’</span></span><br><span class=\"line\"><span class=\"string\">str.substring(2,9)  // ‘cdefg’</span></span><br><span class=\"line\"><span class=\"string\">str.substring(-2) =&gt; str.substring(0)  // ‘abcdefg’</span></span><br><span class=\"line\"><span class=\"string\">str.substring(2,-4) =&gt; str.substring(2,0) =&gt; str.substring(0,2)  // ‘ab'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-slice-和-splice\"><a href=\"#2-slice-和-splice\" class=\"headerlink\" title=\"2. slice() 和 splice()\"></a>2. slice() 和 splice()</h3><ul>\n<li>slice</li>\n</ul>\n<blockquote>\n<p>stringObject.slice(startIndex[, stop])<br>arrayObject.slice(startIndex[, stop])<br>stop  缺省时 默认一直到最后</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = ‘abcdefg’</span><br><span class=\"line\"></span><br><span class=\"line\">str.slice(<span class=\"number\">2</span>)  <span class=\"comment\">// ‘cdefg'</span></span><br><span class=\"line\">str.slice(<span class=\"number\">0</span>)  <span class=\"comment\">// ‘abcdefg’</span></span><br><span class=\"line\">str.slice(<span class=\"number\">-2</span>) =&gt; str.slice(<span class=\"number\">5</span>)  <span class=\"comment\">// ‘fg’</span></span><br><span class=\"line\">str.slice(<span class=\"number\">8</span>)  <span class=\"comment\">// ‘’ 空串 </span></span><br><span class=\"line\">str.slice(<span class=\"number\">2</span>,<span class=\"number\">4</span>)  <span class=\"comment\">// ‘cd’</span></span><br><span class=\"line\">str.slice(<span class=\"number\">2</span>,<span class=\"number\">6</span>)  <span class=\"comment\">// ‘cdef’</span></span><br><span class=\"line\">str.slice(<span class=\"number\">2</span>,<span class=\"number\">18</span>)  <span class=\"comment\">// ‘cdefg’</span></span><br><span class=\"line\">str.slice(<span class=\"number\">4</span>,<span class=\"number\">2</span>)  <span class=\"comment\">// ‘’ 空串</span></span><br><span class=\"line\">str.slice(<span class=\"number\">4</span>,<span class=\"number\">-1</span>) =&gt; str.slice(<span class=\"number\">4</span>,<span class=\"number\">6</span>)  <span class=\"comment\">// ‘ef’</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组方法类似</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>splice</li>\n</ul>\n<blockquote>\n<p>arrayObject.splice(startIndex, length[, item1, item2…])<br>splice操作会改变原数组  返回被移除的元素数组</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [‘a’,’b’,’c’,’d’,’e’,’f’,’g’]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.splice(<span class=\"number\">2</span>,<span class=\"number\">0</span>)  <span class=\"comment\">// 空数组 arr = [‘a’,’b’,’c’,’d’,’e’,’f’,’g’]</span></span><br><span class=\"line\">arr.splice(<span class=\"number\">2</span>,<span class=\"number\">8</span>)  <span class=\"comment\">// arr = [‘a’, ‘b’, ‘c']</span></span><br><span class=\"line\">arr.splice(<span class=\"number\">2</span>,<span class=\"number\">-5</span>)  <span class=\"comment\">// 返回arr  arr没有变化</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.splice(<span class=\"number\">8</span>,<span class=\"number\">2</span>)  <span class=\"comment\">// 返回arr  arr没有变化</span></span><br><span class=\"line\">arr.splice(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"string\">'11'</span>,’<span class=\"number\">22</span><span class=\"string\">')  // 返回[‘a’, ‘b’, ’11’, ’22’, ‘e’, ‘f’, ‘g’]  arr = [‘c’, ‘d'</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-检测数据类型\"><a href=\"#3-检测数据类型\" class=\"headerlink\" title=\"3. 检测数据类型\"></a>3. 检测数据类型</h3><ul>\n<li>typeof</li>\n</ul>\n<blockquote>\n<p>typeof  是解释器内部实现，根据 ECMA-262 规定的几种类型的值来返回类型名称。<br>但是  typeof  的应用场景非常有限，基本上只能判断出来使用字面量方式赋值的基本数据类型。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">23</span>  <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">'124'</span>  <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>  <span class=\"comment\">// boolean</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>  <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125;  <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>  <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>]  <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;&#125;  <span class=\"comment\">// function</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">33</span>))  <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'hello'</span>))  <span class=\"comment\">// object</span></span><br></pre></td></tr></table></figure>\n<p>从上面例子可以看出， typeof  检测出来的类型不够准确，具有相当大的局限性。</p>\n<ul>\n<li>instanceof</li>\n</ul>\n<blockquote>\n<p>instance  检测类型的原理大致为: 判断左边的对象的隐式原型  <strong>proto</strong>  是否和右边对象的显式原型  prototype  相等。 很像  new  操作，这样就可以判断指定的某个对象是否为某个构造函数的实例。  instance  的局限性应该是不能检测基本数据类型。另外一点，不同  window  或者  iframe  之间对象类型检测不能使用  instanceof  来检测。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'123'</span> instance <span class=\"built_in\">String</span>  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Number</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Number</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'hello'</span>) instance <span class=\"built_in\">String</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">33</span>) instance <span class=\"built_in\">Number</span>  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Object.prototype.toString</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"number\">33</span>)  <span class=\"comment\">// [object Number]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"string\">'hello'</span>)  <span class=\"comment\">// [object String]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call([])  <span class=\"comment\">// [object Array]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(&#123;&#125;)  <span class=\"comment\">// [object Object]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">true</span>)  <span class=\"comment\">// [object Boolean]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">null</span>)  <span class=\"comment\">// [object null]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">undefined</span>)  <span class=\"comment\">// [object undefined]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;&#125;)  <span class=\"comment\">// [object Function]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">33</span>))   <span class=\"comment\">// [object Number]</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>constructor</li>\n</ul>\n<blockquote>\n<p>constructor  属性返回对创建此对象的数组函数的引用。<br>constructor  不能检测出null和undefined两种，会报错。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">33</span>).constructor == <span class=\"built_in\">Number</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"string\">'hello'</span>.constructor == <span class=\"built_in\">String</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">([]).constructor == <span class=\"built_in\">Array</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">(&#123;&#125;).constructor == <span class=\"built_in\">Object</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"literal\">true</span>).constructor == <span class=\"built_in\">Boolean</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"literal\">null</span>).constructor == <span class=\"literal\">null</span>  <span class=\"comment\">// TypeError: Cannot read property 'constructor' of null</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"literal\">undefined</span>).constructor == <span class=\"literal\">undefined</span>  <span class=\"comment\">// TypeError: Cannot read property 'constructor' of undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">fn.constructor == <span class=\"built_in\">Function</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">66</span>)</span><br><span class=\"line\">number.constructor == <span class=\"built_in\">Number</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\">number.constructor == <span class=\"built_in\">Object</span>  <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>我是分割线</p>\n</li>\n<li><p>Array.isArray()</p>\n</li>\n</ul>\n<h3 id=\"4-ES5-Array-Function\"><a href=\"#4-ES5-Array-Function\" class=\"headerlink\" title=\"4. ES5 Array Function\"></a>4. ES5 Array Function</h3><ul>\n<li>forEach</li>\n</ul>\n<blockquote>\n<p>Array.forEach(callbackFn[, thisObj])<br>callbackFn (value, index, arr)<br><code>thisObj</code> 默认为 <code>window</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].forEach( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, index, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ele, index, arr)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>map</li>\n</ul>\n<blockquote>\n<p>Array.map(callbackFn[, thisObj])<br>callbackFn (value, index, arr)</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, index, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele * index  <span class=\"comment\">// [0, 2, 10, 24]</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>filter</li>\n</ul>\n<blockquote>\n<p>Array.filter(callbackFn[, thisObj])<br>callbackFn (value, index, arr), 需要返回 Boolean 值</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, index, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele  <span class=\"comment\">// [2, 5, 8]</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>].filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, index, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele &lt;= index  <span class=\"comment\">// [0, 1]</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>some</li>\n</ul>\n<blockquote>\n<p>Array.some(callbackFn[, thisObj])<br>callbackFn (value, index, arr)</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].some(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, index, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele &gt; <span class=\"number\">5</span>  <span class=\"comment\">// true (8 &gt; 5)</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>every</li>\n</ul>\n<blockquote>\n<p>Array.every(callbackFn[, thisObj])<br>callbackFn (value, index, arr)</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].every(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, index, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele &gt; <span class=\"number\">5</span>  <span class=\"comment\">// false (1, 2, 5 均不大于5)</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>indexOf</li>\n</ul>\n<blockquote>\n<p>Array.indexof(searchEle[, fromIndex])<br>第一个出现的 <code>searchEle</code> 的索引位置<br><code>searchEle</code> 要查找的元素<br><code>fromIndex</code> 开始查找的索引位置，缺省或不符合规范时为 0</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].indexOf(<span class=\"number\">2</span>)  <span class=\"comment\">// 1</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].indexOf(<span class=\"number\">2</span>, <span class=\"string\">'0'</span>)  <span class=\"comment\">// 1</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].indexOf(<span class=\"number\">2</span>, <span class=\"string\">'f'</span>) =&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].indexOf(<span class=\"number\">2</span>, <span class=\"number\">0</span>)  <span class=\"comment\">// 1</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].indexOf(<span class=\"number\">2</span>, <span class=\"number\">2</span>)  <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>lastIndexOf</li>\n</ul>\n<blockquote>\n<p>Array.lastIndexOf(searchEle[, fromIndex])<br>与 <code>indexOf</code> 不同在于此方法是从后面元素开始查找的<br><code>searchEle</code> 要查找的元素<br><code>fromIndex</code> 开始查找的索引位置，缺省时或大于等于 Array.length 为 Array.length - 1</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>].lastIndexOf(<span class=\"number\">5</span>)  <span class=\"comment\">// 4</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>].lastIndexOf(<span class=\"number\">5</span>, <span class=\"number\">4</span>)  <span class=\"comment\">// 4</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>].lastIndexOf(<span class=\"number\">5</span>, <span class=\"number\">8</span>) =&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>].lastIndexOf(<span class=\"number\">5</span>, <span class=\"number\">4</span>)  <span class=\"comment\">// 4</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>].lastIndexOf(<span class=\"number\">5</span>, <span class=\"string\">'f'</span>)  <span class=\"comment\">// -1</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>].lastIndexOf(<span class=\"number\">5</span>, <span class=\"number\">3</span>)  <span class=\"comment\">// 2</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>].lastIndexOf(<span class=\"number\">5</span>, <span class=\"number\">1</span>)  <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>reduce</li>\n</ul>\n<blockquote>\n<p>Array.reduce(callbackFn[, initValue])<br>callbackFn(previous, current, index, arr)<br><code>previous</code> 前一次迭代计算出来的值<br><code>current</code> 当前迭代的值<br><code>initValue</code> 初始值, 未指定时取数组的第一个元素</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">preV, curV, index, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> preV + curV</span><br><span class=\"line\">&#125;, <span class=\"number\">10</span>)  <span class=\"comment\">// 26</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 梳理一下计算过程：</span></span><br><span class=\"line\"><span class=\"comment\">// 初始化的时候</span></span><br><span class=\"line\">preV = initValue = <span class=\"number\">10</span>, curV = <span class=\"number\">1</span>, index = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一次计算</span></span><br><span class=\"line\">preV = <span class=\"number\">10</span> + <span class=\"number\">1</span> = <span class=\"number\">11</span>, curV = <span class=\"number\">2</span>, index = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二次计算</span></span><br><span class=\"line\">preV = <span class=\"number\">11</span> + <span class=\"number\">2</span> = <span class=\"number\">13</span>, curV = <span class=\"number\">5</span>, index = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三次计算</span></span><br><span class=\"line\">preV = <span class=\"number\">13</span> + <span class=\"number\">5</span> = <span class=\"number\">18</span>, curV = <span class=\"number\">8</span>, index = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第四次计算</span></span><br><span class=\"line\">preV = <span class=\"number\">18</span> + <span class=\"number\">8</span> = <span class=\"number\">26</span>, curV = <span class=\"literal\">undefined</span> (退出)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>reduceRight</li>\n</ul>\n<blockquote>\n<p>和 <code>reduceRight</code> 用法基本一致，不过是从数组后面开始迭代的<br>Array.reduceRight(callbackFn[, initValue])<br>callbackFn(previous, current, index, arr)<br><code>previous</code> 前一次迭代计算出来的值<br><code>current</code> 当前迭代的值</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].reduceRight(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">preV, curV, index, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> preV - curV</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> preV + curV</span><br><span class=\"line\">&#125;, <span class=\"number\">10</span>)  <span class=\"comment\">// 24</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 梳理一下计算过程：</span></span><br><span class=\"line\"><span class=\"comment\">// 初始化的时候</span></span><br><span class=\"line\">preV = initValue = <span class=\"number\">10</span>, curV = <span class=\"number\">8</span>, index = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一次计算</span></span><br><span class=\"line\">preV = <span class=\"number\">10</span> + <span class=\"number\">8</span> = <span class=\"number\">18</span>, curV = <span class=\"number\">5</span>, index = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二次计算</span></span><br><span class=\"line\">preV = <span class=\"number\">18</span> + <span class=\"number\">5</span> = <span class=\"number\">23</span>, curV = <span class=\"number\">2</span>, index = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三次计算</span></span><br><span class=\"line\">preV = <span class=\"number\">23</span> + <span class=\"number\">2</span> = <span class=\"number\">25</span>, curV = <span class=\"number\">1</span>, index = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第四次计算</span></span><br><span class=\"line\">preV = <span class=\"number\">25</span> - <span class=\"number\">1</span> = <span class=\"number\">24</span>, curV = <span class=\"literal\">undefined</span> (退出)</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a><a href=\"https://juejin.im/post/59b5540c5188257e8769e95d\" target=\"_blank\" rel=\"noopener\">参考文章</a></h3>","site":{"data":{}},"excerpt":"<h3 id=\"1-substr-和-substring\"><a href=\"#1-substr-和-substring\" class=\"headerlink\" title=\"1. substr() 和 substring()\"></a>1. substr() 和 substring()</h3><ul>\n<li>substr</li>\n</ul>\n<blockquote>\n<p>stringObject.substr(startIndex[, length])</p>\n</blockquote>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = ‘abcdefg<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">str.substr(2)  // ‘cdefg’</span></span><br><span class=\"line\"><span class=\"string\">str.substr(-1) =&gt; str.substr(6)  // ‘fg’</span></span><br><span class=\"line\"><span class=\"string\">str.substr(6)  // ‘'</span></span><br><span class=\"line\">str.substr(<span class=\"number\">2</span>,<span class=\"number\">2</span>)  <span class=\"comment\">// ‘cd’</span></span><br><span class=\"line\">str.substr(<span class=\"number\">2</span>,<span class=\"number\">7</span>)  <span class=\"comment\">// ‘cdefg’</span></span><br><span class=\"line\">str.substr(<span class=\"number\">2</span>,<span class=\"number\">-1</span>) <span class=\"comment\">// ''</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>substring</li>\n</ul>\n<blockquote>\n<p>stringObject.substring(startIndex[, stop]) 注意stop的含义</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = ‘abcdefg<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">str.substring(2)  // ‘cdefg’</span></span><br><span class=\"line\"><span class=\"string\">str.substring(2,4)  // ‘cd’</span></span><br><span class=\"line\"><span class=\"string\">str.substring(2,9)  // ‘cdefg’</span></span><br><span class=\"line\"><span class=\"string\">str.substring(-2) =&gt; str.substring(0)  // ‘abcdefg’</span></span><br><span class=\"line\"><span class=\"string\">str.substring(2,-4) =&gt; str.substring(2,0) =&gt; str.substring(0,2)  // ‘ab'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-slice-和-splice\"><a href=\"#2-slice-和-splice\" class=\"headerlink\" title=\"2. slice() 和 splice()\"></a>2. slice() 和 splice()</h3><ul>\n<li>slice</li>\n</ul>\n<blockquote>\n<p>stringObject.slice(startIndex[, stop])<br>arrayObject.slice(startIndex[, stop])<br>stop  缺省时 默认一直到最后</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = ‘abcdefg’</span><br><span class=\"line\"></span><br><span class=\"line\">str.slice(<span class=\"number\">2</span>)  <span class=\"comment\">// ‘cdefg'</span></span><br><span class=\"line\">str.slice(<span class=\"number\">0</span>)  <span class=\"comment\">// ‘abcdefg’</span></span><br><span class=\"line\">str.slice(<span class=\"number\">-2</span>) =&gt; str.slice(<span class=\"number\">5</span>)  <span class=\"comment\">// ‘fg’</span></span><br><span class=\"line\">str.slice(<span class=\"number\">8</span>)  <span class=\"comment\">// ‘’ 空串 </span></span><br><span class=\"line\">str.slice(<span class=\"number\">2</span>,<span class=\"number\">4</span>)  <span class=\"comment\">// ‘cd’</span></span><br><span class=\"line\">str.slice(<span class=\"number\">2</span>,<span class=\"number\">6</span>)  <span class=\"comment\">// ‘cdef’</span></span><br><span class=\"line\">str.slice(<span class=\"number\">2</span>,<span class=\"number\">18</span>)  <span class=\"comment\">// ‘cdefg’</span></span><br><span class=\"line\">str.slice(<span class=\"number\">4</span>,<span class=\"number\">2</span>)  <span class=\"comment\">// ‘’ 空串</span></span><br><span class=\"line\">str.slice(<span class=\"number\">4</span>,<span class=\"number\">-1</span>) =&gt; str.slice(<span class=\"number\">4</span>,<span class=\"number\">6</span>)  <span class=\"comment\">// ‘ef’</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组方法类似</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>splice</li>\n</ul>\n<blockquote>\n<p>arrayObject.splice(startIndex, length[, item1, item2…])<br>splice操作会改变原数组  返回被移除的元素数组</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [‘a’,’b’,’c’,’d’,’e’,’f’,’g’]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.splice(<span class=\"number\">2</span>,<span class=\"number\">0</span>)  <span class=\"comment\">// 空数组 arr = [‘a’,’b’,’c’,’d’,’e’,’f’,’g’]</span></span><br><span class=\"line\">arr.splice(<span class=\"number\">2</span>,<span class=\"number\">8</span>)  <span class=\"comment\">// arr = [‘a’, ‘b’, ‘c']</span></span><br><span class=\"line\">arr.splice(<span class=\"number\">2</span>,<span class=\"number\">-5</span>)  <span class=\"comment\">// 返回arr  arr没有变化</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.splice(<span class=\"number\">8</span>,<span class=\"number\">2</span>)  <span class=\"comment\">// 返回arr  arr没有变化</span></span><br><span class=\"line\">arr.splice(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"string\">'11'</span>,’<span class=\"number\">22</span><span class=\"string\">')  // 返回[‘a’, ‘b’, ’11’, ’22’, ‘e’, ‘f’, ‘g’]  arr = [‘c’, ‘d'</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-检测数据类型\"><a href=\"#3-检测数据类型\" class=\"headerlink\" title=\"3. 检测数据类型\"></a>3. 检测数据类型</h3><ul>\n<li>typeof</li>\n</ul>\n<blockquote>\n<p>typeof  是解释器内部实现，根据 ECMA-262 规定的几种类型的值来返回类型名称。<br>但是  typeof  的应用场景非常有限，基本上只能判断出来使用字面量方式赋值的基本数据类型。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">23</span>  <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">'124'</span>  <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>  <span class=\"comment\">// boolean</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>  <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125;  <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>  <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>]  <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;&#125;  <span class=\"comment\">// function</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">33</span>))  <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'hello'</span>))  <span class=\"comment\">// object</span></span><br></pre></td></tr></table></figure>\n<p>从上面例子可以看出， typeof  检测出来的类型不够准确，具有相当大的局限性。</p>\n<ul>\n<li>instanceof</li>\n</ul>\n<blockquote>\n<p>instance  检测类型的原理大致为: 判断左边的对象的隐式原型  <strong>proto</strong>  是否和右边对象的显式原型  prototype  相等。 很像  new  操作，这样就可以判断指定的某个对象是否为某个构造函数的实例。  instance  的局限性应该是不能检测基本数据类型。另外一点，不同  window  或者  iframe  之间对象类型检测不能使用  instanceof  来检测。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'123'</span> instance <span class=\"built_in\">String</span>  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Number</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Number</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'hello'</span>) instance <span class=\"built_in\">String</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">33</span>) instance <span class=\"built_in\">Number</span>  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Object.prototype.toString</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"number\">33</span>)  <span class=\"comment\">// [object Number]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"string\">'hello'</span>)  <span class=\"comment\">// [object String]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call([])  <span class=\"comment\">// [object Array]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(&#123;&#125;)  <span class=\"comment\">// [object Object]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">true</span>)  <span class=\"comment\">// [object Boolean]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">null</span>)  <span class=\"comment\">// [object null]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">undefined</span>)  <span class=\"comment\">// [object undefined]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;&#125;)  <span class=\"comment\">// [object Function]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">33</span>))   <span class=\"comment\">// [object Number]</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>constructor</li>\n</ul>\n<blockquote>\n<p>constructor  属性返回对创建此对象的数组函数的引用。<br>constructor  不能检测出null和undefined两种，会报错。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">33</span>).constructor == <span class=\"built_in\">Number</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"string\">'hello'</span>.constructor == <span class=\"built_in\">String</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">([]).constructor == <span class=\"built_in\">Array</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">(&#123;&#125;).constructor == <span class=\"built_in\">Object</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"literal\">true</span>).constructor == <span class=\"built_in\">Boolean</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"literal\">null</span>).constructor == <span class=\"literal\">null</span>  <span class=\"comment\">// TypeError: Cannot read property 'constructor' of null</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"literal\">undefined</span>).constructor == <span class=\"literal\">undefined</span>  <span class=\"comment\">// TypeError: Cannot read property 'constructor' of undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">fn.constructor == <span class=\"built_in\">Function</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">66</span>)</span><br><span class=\"line\">number.constructor == <span class=\"built_in\">Number</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\">number.constructor == <span class=\"built_in\">Object</span>  <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>我是分割线</p>\n</li>\n<li><p>Array.isArray()</p>\n</li>\n</ul>\n<h3 id=\"4-ES5-Array-Function\"><a href=\"#4-ES5-Array-Function\" class=\"headerlink\" title=\"4. ES5 Array Function\"></a>4. ES5 Array Function</h3><ul>\n<li>forEach</li>\n</ul>\n<blockquote>\n<p>Array.forEach(callbackFn[, thisObj])<br>callbackFn (value, index, arr)<br><code>thisObj</code> 默认为 <code>window</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].forEach( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, index, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ele, index, arr)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>map</li>\n</ul>\n<blockquote>\n<p>Array.map(callbackFn[, thisObj])<br>callbackFn (value, index, arr)</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, index, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele * index  <span class=\"comment\">// [0, 2, 10, 24]</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>filter</li>\n</ul>\n<blockquote>\n<p>Array.filter(callbackFn[, thisObj])<br>callbackFn (value, index, arr), 需要返回 Boolean 值</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, index, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele  <span class=\"comment\">// [2, 5, 8]</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>].filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, index, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele &lt;= index  <span class=\"comment\">// [0, 1]</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>some</li>\n</ul>\n<blockquote>\n<p>Array.some(callbackFn[, thisObj])<br>callbackFn (value, index, arr)</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].some(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, index, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele &gt; <span class=\"number\">5</span>  <span class=\"comment\">// true (8 &gt; 5)</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>every</li>\n</ul>\n<blockquote>\n<p>Array.every(callbackFn[, thisObj])<br>callbackFn (value, index, arr)</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].every(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, index, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele &gt; <span class=\"number\">5</span>  <span class=\"comment\">// false (1, 2, 5 均不大于5)</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>indexOf</li>\n</ul>\n<blockquote>\n<p>Array.indexof(searchEle[, fromIndex])<br>第一个出现的 <code>searchEle</code> 的索引位置<br><code>searchEle</code> 要查找的元素<br><code>fromIndex</code> 开始查找的索引位置，缺省或不符合规范时为 0</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].indexOf(<span class=\"number\">2</span>)  <span class=\"comment\">// 1</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].indexOf(<span class=\"number\">2</span>, <span class=\"string\">'0'</span>)  <span class=\"comment\">// 1</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].indexOf(<span class=\"number\">2</span>, <span class=\"string\">'f'</span>) =&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].indexOf(<span class=\"number\">2</span>, <span class=\"number\">0</span>)  <span class=\"comment\">// 1</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].indexOf(<span class=\"number\">2</span>, <span class=\"number\">2</span>)  <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>lastIndexOf</li>\n</ul>\n<blockquote>\n<p>Array.lastIndexOf(searchEle[, fromIndex])<br>与 <code>indexOf</code> 不同在于此方法是从后面元素开始查找的<br><code>searchEle</code> 要查找的元素<br><code>fromIndex</code> 开始查找的索引位置，缺省时或大于等于 Array.length 为 Array.length - 1</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>].lastIndexOf(<span class=\"number\">5</span>)  <span class=\"comment\">// 4</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>].lastIndexOf(<span class=\"number\">5</span>, <span class=\"number\">4</span>)  <span class=\"comment\">// 4</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>].lastIndexOf(<span class=\"number\">5</span>, <span class=\"number\">8</span>) =&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>].lastIndexOf(<span class=\"number\">5</span>, <span class=\"number\">4</span>)  <span class=\"comment\">// 4</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>].lastIndexOf(<span class=\"number\">5</span>, <span class=\"string\">'f'</span>)  <span class=\"comment\">// -1</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>].lastIndexOf(<span class=\"number\">5</span>, <span class=\"number\">3</span>)  <span class=\"comment\">// 2</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>].lastIndexOf(<span class=\"number\">5</span>, <span class=\"number\">1</span>)  <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>reduce</li>\n</ul>\n<blockquote>\n<p>Array.reduce(callbackFn[, initValue])<br>callbackFn(previous, current, index, arr)<br><code>previous</code> 前一次迭代计算出来的值<br><code>current</code> 当前迭代的值<br><code>initValue</code> 初始值, 未指定时取数组的第一个元素</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">preV, curV, index, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> preV + curV</span><br><span class=\"line\">&#125;, <span class=\"number\">10</span>)  <span class=\"comment\">// 26</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 梳理一下计算过程：</span></span><br><span class=\"line\"><span class=\"comment\">// 初始化的时候</span></span><br><span class=\"line\">preV = initValue = <span class=\"number\">10</span>, curV = <span class=\"number\">1</span>, index = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一次计算</span></span><br><span class=\"line\">preV = <span class=\"number\">10</span> + <span class=\"number\">1</span> = <span class=\"number\">11</span>, curV = <span class=\"number\">2</span>, index = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二次计算</span></span><br><span class=\"line\">preV = <span class=\"number\">11</span> + <span class=\"number\">2</span> = <span class=\"number\">13</span>, curV = <span class=\"number\">5</span>, index = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三次计算</span></span><br><span class=\"line\">preV = <span class=\"number\">13</span> + <span class=\"number\">5</span> = <span class=\"number\">18</span>, curV = <span class=\"number\">8</span>, index = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第四次计算</span></span><br><span class=\"line\">preV = <span class=\"number\">18</span> + <span class=\"number\">8</span> = <span class=\"number\">26</span>, curV = <span class=\"literal\">undefined</span> (退出)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>reduceRight</li>\n</ul>\n<blockquote>\n<p>和 <code>reduceRight</code> 用法基本一致，不过是从数组后面开始迭代的<br>Array.reduceRight(callbackFn[, initValue])<br>callbackFn(previous, current, index, arr)<br><code>previous</code> 前一次迭代计算出来的值<br><code>current</code> 当前迭代的值</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>].reduceRight(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">preV, curV, index, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> preV - curV</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> preV + curV</span><br><span class=\"line\">&#125;, <span class=\"number\">10</span>)  <span class=\"comment\">// 24</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 梳理一下计算过程：</span></span><br><span class=\"line\"><span class=\"comment\">// 初始化的时候</span></span><br><span class=\"line\">preV = initValue = <span class=\"number\">10</span>, curV = <span class=\"number\">8</span>, index = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一次计算</span></span><br><span class=\"line\">preV = <span class=\"number\">10</span> + <span class=\"number\">8</span> = <span class=\"number\">18</span>, curV = <span class=\"number\">5</span>, index = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二次计算</span></span><br><span class=\"line\">preV = <span class=\"number\">18</span> + <span class=\"number\">5</span> = <span class=\"number\">23</span>, curV = <span class=\"number\">2</span>, index = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三次计算</span></span><br><span class=\"line\">preV = <span class=\"number\">23</span> + <span class=\"number\">2</span> = <span class=\"number\">25</span>, curV = <span class=\"number\">1</span>, index = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第四次计算</span></span><br><span class=\"line\">preV = <span class=\"number\">25</span> - <span class=\"number\">1</span> = <span class=\"number\">24</span>, curV = <span class=\"literal\">undefined</span> (退出)</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a><a href=\"https://juejin.im/post/59b5540c5188257e8769e95d\" target=\"_blank\" rel=\"noopener\">参考文章</a></h3>"},{"title":"移动端真机调试 spy-debugger","date":"2019-07-15T08:53:26.000Z","_content":"\n### 关于spy-debugger\n\n一站式页面调试、抓包工具。远程调试任何手机浏览器页面，任何手机移动端`webview`（如：微信，HybridApp等）。支持H`TTP/HTTPS`，无需USB连接设备。\n\n### 特性\n\n1、页面调试＋抓包\n2、操作简单，无需USB连接设备\n3、支持HTTPS。\n4、spy-debugger内部集成了weinre、node-mitmproxy、AnyProxy。\n5、自动忽略原生App发起的https请求，只拦截webview发起的https请求。对使用了SSL pinning技术的原生App不造成任何影响。\n6、可以配合其它代理工具一起使用(默认使用AnyProxy) (设置外部代理)\n\n<!-- More -->\n\n### 安装\n\n```bash\n[sudo] npm install spy-debugger -g\n```\n\n### 三分钟上手\n\n第一步：手机和PC保持在同一网络下（比如同时连到一个Wi-Fi下）\n第二步：命令行输入spy-debugger，按命令行提示用浏览器打开相应地址。\n第三步：设置手机的HTTP代理，代理IP地址设置为PC的IP地址，端口为spy-debugger的启动端口(默认端口：9888)。\n\nAndroid设置代理步骤：设置 - WLAN - 长按选中网络 - 修改网络 - 高级 - 代理设置 - 手动\niOS设置代理步骤：设置 - 无线局域网 - 选中网络 - HTTP代理手动\n\n第五步：用手机浏览器访问你要调试的页面即可。\n\n### 效果截图\n![PC端调试界面](/assets/img/spy-debugger.jpg)\n![移动端界面](/assets/img/mobile-effect-snap.jpeg)\n\n\n### 自定义选项\n\n#### 端口(默认端口9888)\n\n```js\nspy-debugger -p 9999\n```\n\n#### 设置外部代理（默认使用AnyProxy）\n\n```js\nspy-debugger -e http://127.0.0.1:8888\n```\n\n#### 设置页面内容为可编辑模式（默认false）\n\n```js\nspy-debugger -w true\n```\n\n该功能使页面内容修改更加直观方便。内部实现原理：在需要调试的页面内注入代码：document.body.contentEditable=true。暂不支持使用了iscroll框架的页面。\n\n#### 是否允许weinre监控iframe加载的页面(默认false)\n\n```js\nspy-debugger -i true\n```\n\n#### 是否只拦截浏览器发起的https请求（默认true）\n\n```js\nspy-debugger -b false\n```\n\n#### 是否允许HTTP缓存(默认false)\n\n```js\nspy-debugger -c true\n```\n\n","source":"_posts/spy-debugger.md","raw":"---\ntitle: 移动端真机调试 spy-debugger\ndate: 2019-07-15 16:53:26\ntags:\n---\n\n### 关于spy-debugger\n\n一站式页面调试、抓包工具。远程调试任何手机浏览器页面，任何手机移动端`webview`（如：微信，HybridApp等）。支持H`TTP/HTTPS`，无需USB连接设备。\n\n### 特性\n\n1、页面调试＋抓包\n2、操作简单，无需USB连接设备\n3、支持HTTPS。\n4、spy-debugger内部集成了weinre、node-mitmproxy、AnyProxy。\n5、自动忽略原生App发起的https请求，只拦截webview发起的https请求。对使用了SSL pinning技术的原生App不造成任何影响。\n6、可以配合其它代理工具一起使用(默认使用AnyProxy) (设置外部代理)\n\n<!-- More -->\n\n### 安装\n\n```bash\n[sudo] npm install spy-debugger -g\n```\n\n### 三分钟上手\n\n第一步：手机和PC保持在同一网络下（比如同时连到一个Wi-Fi下）\n第二步：命令行输入spy-debugger，按命令行提示用浏览器打开相应地址。\n第三步：设置手机的HTTP代理，代理IP地址设置为PC的IP地址，端口为spy-debugger的启动端口(默认端口：9888)。\n\nAndroid设置代理步骤：设置 - WLAN - 长按选中网络 - 修改网络 - 高级 - 代理设置 - 手动\niOS设置代理步骤：设置 - 无线局域网 - 选中网络 - HTTP代理手动\n\n第五步：用手机浏览器访问你要调试的页面即可。\n\n### 效果截图\n![PC端调试界面](/assets/img/spy-debugger.jpg)\n![移动端界面](/assets/img/mobile-effect-snap.jpeg)\n\n\n### 自定义选项\n\n#### 端口(默认端口9888)\n\n```js\nspy-debugger -p 9999\n```\n\n#### 设置外部代理（默认使用AnyProxy）\n\n```js\nspy-debugger -e http://127.0.0.1:8888\n```\n\n#### 设置页面内容为可编辑模式（默认false）\n\n```js\nspy-debugger -w true\n```\n\n该功能使页面内容修改更加直观方便。内部实现原理：在需要调试的页面内注入代码：document.body.contentEditable=true。暂不支持使用了iscroll框架的页面。\n\n#### 是否允许weinre监控iframe加载的页面(默认false)\n\n```js\nspy-debugger -i true\n```\n\n#### 是否只拦截浏览器发起的https请求（默认true）\n\n```js\nspy-debugger -b false\n```\n\n#### 是否允许HTTP缓存(默认false)\n\n```js\nspy-debugger -c true\n```\n\n","slug":"spy-debugger","published":1,"updated":"2019-07-29T08:20:25.386Z","_id":"cjyo49r5d0003u16t5cal9tm5","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"关于spy-debugger\"><a href=\"#关于spy-debugger\" class=\"headerlink\" title=\"关于spy-debugger\"></a>关于spy-debugger</h3><p>一站式页面调试、抓包工具。远程调试任何手机浏览器页面，任何手机移动端<code>webview</code>（如：微信，HybridApp等）。支持H<code>TTP/HTTPS</code>，无需USB连接设备。</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><p>1、页面调试＋抓包<br>2、操作简单，无需USB连接设备<br>3、支持HTTPS。<br>4、spy-debugger内部集成了weinre、node-mitmproxy、AnyProxy。<br>5、自动忽略原生App发起的https请求，只拦截webview发起的https请求。对使用了SSL pinning技术的原生App不造成任何影响。<br>6、可以配合其它代理工具一起使用(默认使用AnyProxy) (设置外部代理)</p>\n<a id=\"more\"></a>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] npm install spy-debugger -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"三分钟上手\"><a href=\"#三分钟上手\" class=\"headerlink\" title=\"三分钟上手\"></a>三分钟上手</h3><p>第一步：手机和PC保持在同一网络下（比如同时连到一个Wi-Fi下）<br>第二步：命令行输入spy-debugger，按命令行提示用浏览器打开相应地址。<br>第三步：设置手机的HTTP代理，代理IP地址设置为PC的IP地址，端口为spy-debugger的启动端口(默认端口：9888)。</p>\n<p>Android设置代理步骤：设置 - WLAN - 长按选中网络 - 修改网络 - 高级 - 代理设置 - 手动<br>iOS设置代理步骤：设置 - 无线局域网 - 选中网络 - HTTP代理手动</p>\n<p>第五步：用手机浏览器访问你要调试的页面即可。</p>\n<h3 id=\"效果截图\"><a href=\"#效果截图\" class=\"headerlink\" title=\"效果截图\"></a>效果截图</h3><p><img src=\"/assets/img/spy-debugger.jpg\" alt=\"PC端调试界面\"><br><img src=\"/assets/img/mobile-effect-snap.jpeg\" alt=\"移动端界面\"></p>\n<h3 id=\"自定义选项\"><a href=\"#自定义选项\" class=\"headerlink\" title=\"自定义选项\"></a>自定义选项</h3><h4 id=\"端口-默认端口9888\"><a href=\"#端口-默认端口9888\" class=\"headerlink\" title=\"端口(默认端口9888)\"></a>端口(默认端口9888)</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spy-<span class=\"keyword\">debugger</span> -p <span class=\"number\">9999</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"设置外部代理（默认使用AnyProxy）\"><a href=\"#设置外部代理（默认使用AnyProxy）\" class=\"headerlink\" title=\"设置外部代理（默认使用AnyProxy）\"></a>设置外部代理（默认使用AnyProxy）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spy-<span class=\"keyword\">debugger</span> -e http:<span class=\"comment\">//127.0.0.1:8888</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"设置页面内容为可编辑模式（默认false）\"><a href=\"#设置页面内容为可编辑模式（默认false）\" class=\"headerlink\" title=\"设置页面内容为可编辑模式（默认false）\"></a>设置页面内容为可编辑模式（默认false）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spy-<span class=\"keyword\">debugger</span> -w <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>该功能使页面内容修改更加直观方便。内部实现原理：在需要调试的页面内注入代码：document.body.contentEditable=true。暂不支持使用了iscroll框架的页面。</p>\n<h4 id=\"是否允许weinre监控iframe加载的页面-默认false\"><a href=\"#是否允许weinre监控iframe加载的页面-默认false\" class=\"headerlink\" title=\"是否允许weinre监控iframe加载的页面(默认false)\"></a>是否允许weinre监控iframe加载的页面(默认false)</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spy-<span class=\"keyword\">debugger</span> -i <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"是否只拦截浏览器发起的https请求（默认true）\"><a href=\"#是否只拦截浏览器发起的https请求（默认true）\" class=\"headerlink\" title=\"是否只拦截浏览器发起的https请求（默认true）\"></a>是否只拦截浏览器发起的https请求（默认true）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spy-<span class=\"keyword\">debugger</span> -b <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"是否允许HTTP缓存-默认false\"><a href=\"#是否允许HTTP缓存-默认false\" class=\"headerlink\" title=\"是否允许HTTP缓存(默认false)\"></a>是否允许HTTP缓存(默认false)</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spy-<span class=\"keyword\">debugger</span> -c <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"关于spy-debugger\"><a href=\"#关于spy-debugger\" class=\"headerlink\" title=\"关于spy-debugger\"></a>关于spy-debugger</h3><p>一站式页面调试、抓包工具。远程调试任何手机浏览器页面，任何手机移动端<code>webview</code>（如：微信，HybridApp等）。支持H<code>TTP/HTTPS</code>，无需USB连接设备。</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><p>1、页面调试＋抓包<br>2、操作简单，无需USB连接设备<br>3、支持HTTPS。<br>4、spy-debugger内部集成了weinre、node-mitmproxy、AnyProxy。<br>5、自动忽略原生App发起的https请求，只拦截webview发起的https请求。对使用了SSL pinning技术的原生App不造成任何影响。<br>6、可以配合其它代理工具一起使用(默认使用AnyProxy) (设置外部代理)</p>","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] npm install spy-debugger -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"三分钟上手\"><a href=\"#三分钟上手\" class=\"headerlink\" title=\"三分钟上手\"></a>三分钟上手</h3><p>第一步：手机和PC保持在同一网络下（比如同时连到一个Wi-Fi下）<br>第二步：命令行输入spy-debugger，按命令行提示用浏览器打开相应地址。<br>第三步：设置手机的HTTP代理，代理IP地址设置为PC的IP地址，端口为spy-debugger的启动端口(默认端口：9888)。</p>\n<p>Android设置代理步骤：设置 - WLAN - 长按选中网络 - 修改网络 - 高级 - 代理设置 - 手动<br>iOS设置代理步骤：设置 - 无线局域网 - 选中网络 - HTTP代理手动</p>\n<p>第五步：用手机浏览器访问你要调试的页面即可。</p>\n<h3 id=\"效果截图\"><a href=\"#效果截图\" class=\"headerlink\" title=\"效果截图\"></a>效果截图</h3><p><img src=\"/assets/img/spy-debugger.jpg\" alt=\"PC端调试界面\"><br><img src=\"/assets/img/mobile-effect-snap.jpeg\" alt=\"移动端界面\"></p>\n<h3 id=\"自定义选项\"><a href=\"#自定义选项\" class=\"headerlink\" title=\"自定义选项\"></a>自定义选项</h3><h4 id=\"端口-默认端口9888\"><a href=\"#端口-默认端口9888\" class=\"headerlink\" title=\"端口(默认端口9888)\"></a>端口(默认端口9888)</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spy-<span class=\"keyword\">debugger</span> -p <span class=\"number\">9999</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"设置外部代理（默认使用AnyProxy）\"><a href=\"#设置外部代理（默认使用AnyProxy）\" class=\"headerlink\" title=\"设置外部代理（默认使用AnyProxy）\"></a>设置外部代理（默认使用AnyProxy）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spy-<span class=\"keyword\">debugger</span> -e http:<span class=\"comment\">//127.0.0.1:8888</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"设置页面内容为可编辑模式（默认false）\"><a href=\"#设置页面内容为可编辑模式（默认false）\" class=\"headerlink\" title=\"设置页面内容为可编辑模式（默认false）\"></a>设置页面内容为可编辑模式（默认false）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spy-<span class=\"keyword\">debugger</span> -w <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>该功能使页面内容修改更加直观方便。内部实现原理：在需要调试的页面内注入代码：document.body.contentEditable=true。暂不支持使用了iscroll框架的页面。</p>\n<h4 id=\"是否允许weinre监控iframe加载的页面-默认false\"><a href=\"#是否允许weinre监控iframe加载的页面-默认false\" class=\"headerlink\" title=\"是否允许weinre监控iframe加载的页面(默认false)\"></a>是否允许weinre监控iframe加载的页面(默认false)</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spy-<span class=\"keyword\">debugger</span> -i <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"是否只拦截浏览器发起的https请求（默认true）\"><a href=\"#是否只拦截浏览器发起的https请求（默认true）\" class=\"headerlink\" title=\"是否只拦截浏览器发起的https请求（默认true）\"></a>是否只拦截浏览器发起的https请求（默认true）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spy-<span class=\"keyword\">debugger</span> -b <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"是否允许HTTP缓存-默认false\"><a href=\"#是否允许HTTP缓存-默认false\" class=\"headerlink\" title=\"是否允许HTTP缓存(默认false)\"></a>是否允许HTTP缓存(默认false)</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spy-<span class=\"keyword\">debugger</span> -c <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>"},{"title":"CSS文本超出容器宽度使用省略号代替（不考虑js方法）","date":"2019-03-31T16:00:00.000Z","_content":"\n#### 方法一 ：常规方法（适用于`webkit`内核浏览器）\n\n```html\n<div class=\"container text-ellipsis\">单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号</div>\n<div class=\"container text-ellipsis-multi\">多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号</div>\n```\n\n<!-- More -->\n\n```html\n.container {\n    display: inline-block;\n    width: 333px;\n    height: 60px;\n    font-size: 16px;\n    border: 1px solid #00bebe;\n}\n.text-ellipsis {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n.text-ellipsis-multi {\n    line-height: 20px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-line-clamp: 3;  // 控制显示的行数\n    -webkit-box-orient: vertical\n}\n```\n\n在`webkit`浏览器中的表现：![单行省略](/assets/img/webkit-single.jpg) ![多行省略](/assets/img/webkit-multi.jpg)\n\n### 方法二：利用伪类+`float`（适用于大部分浏览器）\n\n```html\n<div class=\"wrap\">\n    <div class=\"text\">多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号</div>\n</div>\n```\n\n```html\n.wrap {\n    width: 333px;\n    height: 60px;\n    line-height: 20px;\n    overflow: hidden;\n    border: 1px solid #00bebe;\n}\n.wrap:before {\n    float: left;\n    content: '';\n    width: 5px;\n    height: 100%;\n}\n.wrap:after {\n    float: right;\n    content: '...';\n    width: 20px;\n    margin-left: -20px;\n    height: 20px;\n    line-height: 20px;\n    margin-right: 5px;\n    background: #fff;\n    position: relative;\n    top: -20px;\n    left: 100%;\n}\n.wrap .text {\n    float: right;\n    width: 100%;\n    margin-left: -5px;\n    word-break: break-all;\n}\n```\n\n在`非webkit`内核浏览器中的表现：![非webkit浏览器多行省略](/assets/img/unwebkit-multi.jpg)\n\n可以看到效果还是不那么尽人意，可以在此基础上再根据实际情况修改相应代码，比如`...`用渐变色代替现在的白色，会显得平滑。另外，也可以搭配js进一步处理，可以参考[这里](https://blog.csdn.net/lhban108/article/details/82757564)。","source":"_posts/text-overflow-ellipsis.md","raw":"---\ntitle: CSS文本超出容器宽度使用省略号代替（不考虑js方法）\ndate: 2019-04-01\ntags: [ellipsis, 换行, 省略号]\n---\n\n#### 方法一 ：常规方法（适用于`webkit`内核浏览器）\n\n```html\n<div class=\"container text-ellipsis\">单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号</div>\n<div class=\"container text-ellipsis-multi\">多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号</div>\n```\n\n<!-- More -->\n\n```html\n.container {\n    display: inline-block;\n    width: 333px;\n    height: 60px;\n    font-size: 16px;\n    border: 1px solid #00bebe;\n}\n.text-ellipsis {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n.text-ellipsis-multi {\n    line-height: 20px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-line-clamp: 3;  // 控制显示的行数\n    -webkit-box-orient: vertical\n}\n```\n\n在`webkit`浏览器中的表现：![单行省略](/assets/img/webkit-single.jpg) ![多行省略](/assets/img/webkit-multi.jpg)\n\n### 方法二：利用伪类+`float`（适用于大部分浏览器）\n\n```html\n<div class=\"wrap\">\n    <div class=\"text\">多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号</div>\n</div>\n```\n\n```html\n.wrap {\n    width: 333px;\n    height: 60px;\n    line-height: 20px;\n    overflow: hidden;\n    border: 1px solid #00bebe;\n}\n.wrap:before {\n    float: left;\n    content: '';\n    width: 5px;\n    height: 100%;\n}\n.wrap:after {\n    float: right;\n    content: '...';\n    width: 20px;\n    margin-left: -20px;\n    height: 20px;\n    line-height: 20px;\n    margin-right: 5px;\n    background: #fff;\n    position: relative;\n    top: -20px;\n    left: 100%;\n}\n.wrap .text {\n    float: right;\n    width: 100%;\n    margin-left: -5px;\n    word-break: break-all;\n}\n```\n\n在`非webkit`内核浏览器中的表现：![非webkit浏览器多行省略](/assets/img/unwebkit-multi.jpg)\n\n可以看到效果还是不那么尽人意，可以在此基础上再根据实际情况修改相应代码，比如`...`用渐变色代替现在的白色，会显得平滑。另外，也可以搭配js进一步处理，可以参考[这里](https://blog.csdn.net/lhban108/article/details/82757564)。","slug":"text-overflow-ellipsis","published":1,"updated":"2019-05-20T09:38:04.961Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyo49r5e0004u16t6f0fwikx","content":"<h4 id=\"方法一-：常规方法（适用于webkit内核浏览器）\"><a href=\"#方法一-：常规方法（适用于webkit内核浏览器）\" class=\"headerlink\" title=\"方法一 ：常规方法（适用于webkit内核浏览器）\"></a>方法一 ：常规方法（适用于<code>webkit</code>内核浏览器）</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container text-ellipsis\"</span>&gt;</span>单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container text-ellipsis-multi\"</span>&gt;</span>多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.container &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    width: 333px;</span><br><span class=\"line\">    height: 60px;</span><br><span class=\"line\">    font-size: 16px;</span><br><span class=\"line\">    border: 1px solid #00bebe;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.text-ellipsis &#123;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    text-overflow: ellipsis;</span><br><span class=\"line\">    white-space: nowrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.text-ellipsis-multi &#123;</span><br><span class=\"line\">    line-height: 20px;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    text-overflow: ellipsis;</span><br><span class=\"line\">    display: -webkit-box;</span><br><span class=\"line\">    -webkit-line-clamp: 3;  // 控制显示的行数</span><br><span class=\"line\">    -webkit-box-orient: vertical</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>webkit</code>浏览器中的表现：<img src=\"/assets/img/webkit-single.jpg\" alt=\"单行省略\"> <img src=\"/assets/img/webkit-multi.jpg\" alt=\"多行省略\"></p>\n<h3 id=\"方法二：利用伪类-float（适用于大部分浏览器）\"><a href=\"#方法二：利用伪类-float（适用于大部分浏览器）\" class=\"headerlink\" title=\"方法二：利用伪类+float（适用于大部分浏览器）\"></a>方法二：利用伪类+<code>float</code>（适用于大部分浏览器）</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text\"</span>&gt;</span>多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrap &#123;</span><br><span class=\"line\">    width: 333px;</span><br><span class=\"line\">    height: 60px;</span><br><span class=\"line\">    line-height: 20px;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    border: 1px solid #00bebe;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap:before &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    content: '';</span><br><span class=\"line\">    width: 5px;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap:after &#123;</span><br><span class=\"line\">    float: right;</span><br><span class=\"line\">    content: '...';</span><br><span class=\"line\">    width: 20px;</span><br><span class=\"line\">    margin-left: -20px;</span><br><span class=\"line\">    height: 20px;</span><br><span class=\"line\">    line-height: 20px;</span><br><span class=\"line\">    margin-right: 5px;</span><br><span class=\"line\">    background: #fff;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    top: -20px;</span><br><span class=\"line\">    left: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap .text &#123;</span><br><span class=\"line\">    float: right;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    margin-left: -5px;</span><br><span class=\"line\">    word-break: break-all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>非webkit</code>内核浏览器中的表现：<img src=\"/assets/img/unwebkit-multi.jpg\" alt=\"非webkit浏览器多行省略\"></p>\n<p>可以看到效果还是不那么尽人意，可以在此基础上再根据实际情况修改相应代码，比如<code>...</code>用渐变色代替现在的白色，会显得平滑。另外，也可以搭配js进一步处理，可以参考<a href=\"https://blog.csdn.net/lhban108/article/details/82757564\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"方法一-：常规方法（适用于webkit内核浏览器）\"><a href=\"#方法一-：常规方法（适用于webkit内核浏览器）\" class=\"headerlink\" title=\"方法一 ：常规方法（适用于webkit内核浏览器）\"></a>方法一 ：常规方法（适用于<code>webkit</code>内核浏览器）</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container text-ellipsis\"</span>&gt;</span>单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号单行文字超出省略号<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container text-ellipsis-multi\"</span>&gt;</span>多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.container &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    width: 333px;</span><br><span class=\"line\">    height: 60px;</span><br><span class=\"line\">    font-size: 16px;</span><br><span class=\"line\">    border: 1px solid #00bebe;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.text-ellipsis &#123;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    text-overflow: ellipsis;</span><br><span class=\"line\">    white-space: nowrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.text-ellipsis-multi &#123;</span><br><span class=\"line\">    line-height: 20px;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    text-overflow: ellipsis;</span><br><span class=\"line\">    display: -webkit-box;</span><br><span class=\"line\">    -webkit-line-clamp: 3;  // 控制显示的行数</span><br><span class=\"line\">    -webkit-box-orient: vertical</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>webkit</code>浏览器中的表现：<img src=\"/assets/img/webkit-single.jpg\" alt=\"单行省略\"> <img src=\"/assets/img/webkit-multi.jpg\" alt=\"多行省略\"></p>\n<h3 id=\"方法二：利用伪类-float（适用于大部分浏览器）\"><a href=\"#方法二：利用伪类-float（适用于大部分浏览器）\" class=\"headerlink\" title=\"方法二：利用伪类+float（适用于大部分浏览器）\"></a>方法二：利用伪类+<code>float</code>（适用于大部分浏览器）</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text\"</span>&gt;</span>多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号多行文字超出省略号<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrap &#123;</span><br><span class=\"line\">    width: 333px;</span><br><span class=\"line\">    height: 60px;</span><br><span class=\"line\">    line-height: 20px;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    border: 1px solid #00bebe;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap:before &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    content: '';</span><br><span class=\"line\">    width: 5px;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap:after &#123;</span><br><span class=\"line\">    float: right;</span><br><span class=\"line\">    content: '...';</span><br><span class=\"line\">    width: 20px;</span><br><span class=\"line\">    margin-left: -20px;</span><br><span class=\"line\">    height: 20px;</span><br><span class=\"line\">    line-height: 20px;</span><br><span class=\"line\">    margin-right: 5px;</span><br><span class=\"line\">    background: #fff;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    top: -20px;</span><br><span class=\"line\">    left: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap .text &#123;</span><br><span class=\"line\">    float: right;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    margin-left: -5px;</span><br><span class=\"line\">    word-break: break-all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>非webkit</code>内核浏览器中的表现：<img src=\"/assets/img/unwebkit-multi.jpg\" alt=\"非webkit浏览器多行省略\"></p>\n<p>可以看到效果还是不那么尽人意，可以在此基础上再根据实际情况修改相应代码，比如<code>...</code>用渐变色代替现在的白色，会显得平滑。另外，也可以搭配js进一步处理，可以参考<a href=\"https://blog.csdn.net/lhban108/article/details/82757564\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>"},{"title":"this + bind + call + apply","date":"2019-05-21T07:05:59.000Z","_content":"\n### this的指向\n\n> `this`的指向总结起来就是`this永远指向最后调用它的那个对象`\n\n<!-- More -->\n\n例1：\n\n```js\nvar name = 'global'\nfunction test() {\n    var name = 'cherry'\n    console.log(this)\n    console.log(this.name)\n}\ntest()\n// window\n// global\n```\n\n调用 `test` 方法的地方是 `test()` ，前面没有调用的对象即为 `window` （严格模式下为 `undefined` ），相当于 `window.test()` 。\n\n例2：\n\n```js\nvar name = 'global'\nvar obj = {\n    name: 'cherry',\n    fn: function () {\n        console.log(this.name)\n    }\n}\nobj.fn()  // cherry\nwindow.obj.fn()  // cherry\n```\n\n`obj.fn()` 取用的是 `obj` 对象 里面的 `name` 值， `window.obj.fn()` 里面，最后调用的是 `obj` 对象，所以也是 `cherry` 。  \n补充：假如将 `obj` 对象中 `name` 属性的定义注释掉，那么 `obj.fn()` 将会打印出 `undefined` ，因为只会看最近的调用 `obj` 对象 ，当没有定义时，不会继续向上一个对象 `window` 寻找 `name` 属性。\n\n例3：\n\n```js\nvar name = 'global'\nvar obj = {\n    name: 'cherry',\n    fn: function () {\n        console.log(this.name)\n    }\n}\nvar temp = obj.fn()\ntemp()  // global\n```\n\n再来看一遍：`this` 永远指向 `最后调用` 它的那个对象。 `obj.fn()` 赋值给 `temp` 时，并没有进行赋值！最后 temp() 调用的时候是 `window.temp()` ，所以打印 `global` 。\n\n例4：\n\n```js\nvar name = 'global'\nfunction fn () {\n    var name = 'cherry'\n    innerFn()\n    function innerFn () {\n        console.log(this.name)\n    }\n}\nfn()  // global\n```\n\n例5：\n\n```js\nfunction Func () {\n    this.name = 'cherry'\n}\nvar fn = new Func()\nconsole.log(fn.name)  // cherry\n\n// =================================\n\nfunction Func2 () {\n    this.name = 'cherry'\n    return {name: 'apple'}  // 返回一个对象 如果name改为name2，fn2.name为undefined\n}\nfunction Func3 () {\n    this.name = 'cherry'\n    return true  // 返回true，非对象（false, 124, 'abc'都可）\n}\nvar fn2 = new Func2()\nconsole.log(fn2.name)  // apple\nvar fn3 = new Func3()\nconsole.log(fn3.name)  // cherry\n```\n\n当我们通过 `new` 关键字构造一个实例对象的过程中，构造函数中的 this 一般情况下指向我们构造出来的实例化对象，因此在构造过程中 `this.name = 'cherry'` 这句代码就相当于给实例对象 `fn` 创建了一个 `name` 属性并赋值 `cherry` 。  \n特别的，当构造函数中的 `this` 遇到 `return` 的情况。当构造函数中返回值是一个对象时，`this` 指向的就是返回的那个对象；如果返回值不是对象时，`this` 指向的就是构造函数（这里是 Func3 ）。\n\n### 改变this的指向\n\n例6：\n\n```js\nvar name = 'global'\nvar obj = {\n    name: 'cherry',\n    fn1: function () {\n        console.log(this.name)\n    },\n    fn2: function () {\n        setTimeout(function () {\n            this.fn1()\n        }, 1000)\n    }\n}\nobj.fn2()  // this.fn1 is not a function\n```\n\n`setTimeout()` 即为 `window.setTimeout()` ，最后调用的对象是 `window`，而 `window` 中并没有方法 `fn1()` ，故而报错。\n\n**我们通常使用以下几种方法改变this的指向问题：**\n\n- var _this = this\n\n```js\n// ...\nfn2: function () {\n    var _this = this\n    setTimeout(function () {\n        _this.fn1()  // cherry\n    }, 1000)\n}\n// ...\n```\n\n- 箭头函数\n\n```js\n// ...\nfn2: function () {\n    setTimeout( () => {\n        this.fn1()  // cherry\n    }, 1000)\n}\n// ...\n```\n\n- bind\n\n```js\n// ...\nfn2: function () {\n    setTimeout(function () {\n        this.fn1()  // cherry\n    }. bind(obj)(), 1000)  // 这里的obj也可以换成this this指向obj\n}\n// ...\n```\n\n- call\n\n```js\n// ...\nfn2: function () {\n    setTimeout(function () {\n        this.fn1()  // cherry\n    }.call(obj), 1000)  // 这里的obj也可以换成this this指向obj\n}\n// ...\n```\n\n- apply\n\n```js\n// ...\nfn2: function () {\n    setTimeout(function () {\n        this.fn1()  // cherry\n    }.apply(obj), 1000)  // 这里的obj也可以换成this this指向obj\n}\n// ...\n```\n\n### bind介绍\n\n> `bind()` 方法创建一个 新的函数， 当被调用时，将其 `this` 关键字设置为提供的值。在调用新函数时，在任何提供之前提供一个给定的参数序列。\n\n例7：\n\n```js\nvar obj = {\n    func: function (a, b) {\n        console.log('乘积： ' + a * b)\n    }\n}\nobj.func.bind(obj, 2, 8)  // f (a, b) {\n                        //     console.log('乘积： ' + a * b)\n                        // }\nobj.func.bind(obj, 2, 8)()  // 乘积： 16\n```\n\n因为 bind 只会重新赋予 this，并不会自动执行，需要手动执行，固有第二个的结果。\n\n### call介绍\n\n> functionObj.call(thisArg[, args1, args2, args3, ...])\n>> `thisArg` -> 函数在运行时指定的 `this` 。当为 `null` 或者 `undefined` 时，自动指向 `window` 。当为`string` 、`number` 、`boolean` 类型的时候，`this` 指向各自的包装对象。\n\n```js\nfunction test () {\n    console.log('this: ' + this)\n}\ntest.call(null)  // window\ntest.call(undefined)  // window\ntest.call('abcd')  // String\ntest.call(128)  // Number\ntest.call(false)  // Boolean\n\n// apply() 的结果与 call() 一致\ntest.apply(null)  // window\n// ...\n```\n\n例8：\n\n```js\nvar obj = {\n    name: 'hello',\n    func: function (a, b) {\n        console.log('乘积： ' + a * b)\n    }\n}\nobj.func.call(obj, 2, 5)  // 乘积： 10\n```\n\n### apply介绍\n\n> functionObj.apply(thisArg[, argsArr])\n>> `apply` 的语法和 `call` 的语法类似，区别在于 `apply` 的参数列表是以 `数组` 或者 `类数组` 形式传入。\n\n例9：\n\n```js\nvar obj = {\n    name: 'hello',\n    func: function (a, b) {\n        console.log('乘积： ' + a * b)\n    }\n}\nobj.func.apply(obj, [2, 6])  // 乘积： 12\n```\n\n### call、apply常见用法\n\n- 将类数组 `ArrayLike` 转换成数组 `Array`\n\n```js\nvar arraylike = {'1': 'hello', '2': 'world', '3': 'balabala', length: 4}\nfunction ArrTransfer () {\n    // return [].slice.call(arguments)\n    return Array.prototype.slice.call(arguments)\n    // return [].splice.call(arguments, 0)\n    // return Array.prototype.splice.call(arguments, 0)\n    // return Array.from(arguments)\n}\nvar list = ArrTransfer(arrayLike)  // [{'1': 'hello', '2': 'world', '3': 'balabala', length: 3}]\n\nArray.prototype.slice.call(arrayLike).forEach( (elem, index) => {\n    console.log(elem, index)\n    // hello 1\n    // world 2\n    // balabala 3\n})\n```\n\n- 求最大最小值\n\n```js\nvar arr = [21, 2, 35, 9, 23, 16, 29]\nMath.max.apply(Math, arr)  // 35\nMath.min.apply(Math, arr)  // 2\n```\n\n### Useful Link\n\n- [全文参考自掘金文章](https://juejin.im/post/59bfe84351882531b730bac2)","source":"_posts/this.md","raw":"---\ntitle: this + bind + call + apply\ndate: 2019-05-21 15:05:59\ntags: [this, 作用域]\n---\n\n### this的指向\n\n> `this`的指向总结起来就是`this永远指向最后调用它的那个对象`\n\n<!-- More -->\n\n例1：\n\n```js\nvar name = 'global'\nfunction test() {\n    var name = 'cherry'\n    console.log(this)\n    console.log(this.name)\n}\ntest()\n// window\n// global\n```\n\n调用 `test` 方法的地方是 `test()` ，前面没有调用的对象即为 `window` （严格模式下为 `undefined` ），相当于 `window.test()` 。\n\n例2：\n\n```js\nvar name = 'global'\nvar obj = {\n    name: 'cherry',\n    fn: function () {\n        console.log(this.name)\n    }\n}\nobj.fn()  // cherry\nwindow.obj.fn()  // cherry\n```\n\n`obj.fn()` 取用的是 `obj` 对象 里面的 `name` 值， `window.obj.fn()` 里面，最后调用的是 `obj` 对象，所以也是 `cherry` 。  \n补充：假如将 `obj` 对象中 `name` 属性的定义注释掉，那么 `obj.fn()` 将会打印出 `undefined` ，因为只会看最近的调用 `obj` 对象 ，当没有定义时，不会继续向上一个对象 `window` 寻找 `name` 属性。\n\n例3：\n\n```js\nvar name = 'global'\nvar obj = {\n    name: 'cherry',\n    fn: function () {\n        console.log(this.name)\n    }\n}\nvar temp = obj.fn()\ntemp()  // global\n```\n\n再来看一遍：`this` 永远指向 `最后调用` 它的那个对象。 `obj.fn()` 赋值给 `temp` 时，并没有进行赋值！最后 temp() 调用的时候是 `window.temp()` ，所以打印 `global` 。\n\n例4：\n\n```js\nvar name = 'global'\nfunction fn () {\n    var name = 'cherry'\n    innerFn()\n    function innerFn () {\n        console.log(this.name)\n    }\n}\nfn()  // global\n```\n\n例5：\n\n```js\nfunction Func () {\n    this.name = 'cherry'\n}\nvar fn = new Func()\nconsole.log(fn.name)  // cherry\n\n// =================================\n\nfunction Func2 () {\n    this.name = 'cherry'\n    return {name: 'apple'}  // 返回一个对象 如果name改为name2，fn2.name为undefined\n}\nfunction Func3 () {\n    this.name = 'cherry'\n    return true  // 返回true，非对象（false, 124, 'abc'都可）\n}\nvar fn2 = new Func2()\nconsole.log(fn2.name)  // apple\nvar fn3 = new Func3()\nconsole.log(fn3.name)  // cherry\n```\n\n当我们通过 `new` 关键字构造一个实例对象的过程中，构造函数中的 this 一般情况下指向我们构造出来的实例化对象，因此在构造过程中 `this.name = 'cherry'` 这句代码就相当于给实例对象 `fn` 创建了一个 `name` 属性并赋值 `cherry` 。  \n特别的，当构造函数中的 `this` 遇到 `return` 的情况。当构造函数中返回值是一个对象时，`this` 指向的就是返回的那个对象；如果返回值不是对象时，`this` 指向的就是构造函数（这里是 Func3 ）。\n\n### 改变this的指向\n\n例6：\n\n```js\nvar name = 'global'\nvar obj = {\n    name: 'cherry',\n    fn1: function () {\n        console.log(this.name)\n    },\n    fn2: function () {\n        setTimeout(function () {\n            this.fn1()\n        }, 1000)\n    }\n}\nobj.fn2()  // this.fn1 is not a function\n```\n\n`setTimeout()` 即为 `window.setTimeout()` ，最后调用的对象是 `window`，而 `window` 中并没有方法 `fn1()` ，故而报错。\n\n**我们通常使用以下几种方法改变this的指向问题：**\n\n- var _this = this\n\n```js\n// ...\nfn2: function () {\n    var _this = this\n    setTimeout(function () {\n        _this.fn1()  // cherry\n    }, 1000)\n}\n// ...\n```\n\n- 箭头函数\n\n```js\n// ...\nfn2: function () {\n    setTimeout( () => {\n        this.fn1()  // cherry\n    }, 1000)\n}\n// ...\n```\n\n- bind\n\n```js\n// ...\nfn2: function () {\n    setTimeout(function () {\n        this.fn1()  // cherry\n    }. bind(obj)(), 1000)  // 这里的obj也可以换成this this指向obj\n}\n// ...\n```\n\n- call\n\n```js\n// ...\nfn2: function () {\n    setTimeout(function () {\n        this.fn1()  // cherry\n    }.call(obj), 1000)  // 这里的obj也可以换成this this指向obj\n}\n// ...\n```\n\n- apply\n\n```js\n// ...\nfn2: function () {\n    setTimeout(function () {\n        this.fn1()  // cherry\n    }.apply(obj), 1000)  // 这里的obj也可以换成this this指向obj\n}\n// ...\n```\n\n### bind介绍\n\n> `bind()` 方法创建一个 新的函数， 当被调用时，将其 `this` 关键字设置为提供的值。在调用新函数时，在任何提供之前提供一个给定的参数序列。\n\n例7：\n\n```js\nvar obj = {\n    func: function (a, b) {\n        console.log('乘积： ' + a * b)\n    }\n}\nobj.func.bind(obj, 2, 8)  // f (a, b) {\n                        //     console.log('乘积： ' + a * b)\n                        // }\nobj.func.bind(obj, 2, 8)()  // 乘积： 16\n```\n\n因为 bind 只会重新赋予 this，并不会自动执行，需要手动执行，固有第二个的结果。\n\n### call介绍\n\n> functionObj.call(thisArg[, args1, args2, args3, ...])\n>> `thisArg` -> 函数在运行时指定的 `this` 。当为 `null` 或者 `undefined` 时，自动指向 `window` 。当为`string` 、`number` 、`boolean` 类型的时候，`this` 指向各自的包装对象。\n\n```js\nfunction test () {\n    console.log('this: ' + this)\n}\ntest.call(null)  // window\ntest.call(undefined)  // window\ntest.call('abcd')  // String\ntest.call(128)  // Number\ntest.call(false)  // Boolean\n\n// apply() 的结果与 call() 一致\ntest.apply(null)  // window\n// ...\n```\n\n例8：\n\n```js\nvar obj = {\n    name: 'hello',\n    func: function (a, b) {\n        console.log('乘积： ' + a * b)\n    }\n}\nobj.func.call(obj, 2, 5)  // 乘积： 10\n```\n\n### apply介绍\n\n> functionObj.apply(thisArg[, argsArr])\n>> `apply` 的语法和 `call` 的语法类似，区别在于 `apply` 的参数列表是以 `数组` 或者 `类数组` 形式传入。\n\n例9：\n\n```js\nvar obj = {\n    name: 'hello',\n    func: function (a, b) {\n        console.log('乘积： ' + a * b)\n    }\n}\nobj.func.apply(obj, [2, 6])  // 乘积： 12\n```\n\n### call、apply常见用法\n\n- 将类数组 `ArrayLike` 转换成数组 `Array`\n\n```js\nvar arraylike = {'1': 'hello', '2': 'world', '3': 'balabala', length: 4}\nfunction ArrTransfer () {\n    // return [].slice.call(arguments)\n    return Array.prototype.slice.call(arguments)\n    // return [].splice.call(arguments, 0)\n    // return Array.prototype.splice.call(arguments, 0)\n    // return Array.from(arguments)\n}\nvar list = ArrTransfer(arrayLike)  // [{'1': 'hello', '2': 'world', '3': 'balabala', length: 3}]\n\nArray.prototype.slice.call(arrayLike).forEach( (elem, index) => {\n    console.log(elem, index)\n    // hello 1\n    // world 2\n    // balabala 3\n})\n```\n\n- 求最大最小值\n\n```js\nvar arr = [21, 2, 35, 9, 23, 16, 29]\nMath.max.apply(Math, arr)  // 35\nMath.min.apply(Math, arr)  // 2\n```\n\n### Useful Link\n\n- [全文参考自掘金文章](https://juejin.im/post/59bfe84351882531b730bac2)","slug":"this","published":1,"updated":"2019-05-22T05:46:45.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyo49r5f0005u16tj96wyx9w","content":"<h3 id=\"this的指向\"><a href=\"#this的指向\" class=\"headerlink\" title=\"this的指向\"></a>this的指向</h3><blockquote>\n<p><code>this</code>的指向总结起来就是<code>this永远指向最后调用它的那个对象</code></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>例1：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'global'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">'cherry'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test()</span><br><span class=\"line\"><span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"comment\">// global</span></span><br></pre></td></tr></table></figure>\n<p>调用 <code>test</code> 方法的地方是 <code>test()</code> ，前面没有调用的对象即为 <code>window</code> （严格模式下为 <code>undefined</code> ），相当于 <code>window.test()</code> 。</p>\n<p>例2：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'global'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'cherry'</span>,</span><br><span class=\"line\">    fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.fn()  <span class=\"comment\">// cherry</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.obj.fn()  <span class=\"comment\">// cherry</span></span><br></pre></td></tr></table></figure>\n<p><code>obj.fn()</code> 取用的是 <code>obj</code> 对象 里面的 <code>name</code> 值， <code>window.obj.fn()</code> 里面，最后调用的是 <code>obj</code> 对象，所以也是 <code>cherry</code> 。<br>补充：假如将 <code>obj</code> 对象中 <code>name</code> 属性的定义注释掉，那么 <code>obj.fn()</code> 将会打印出 <code>undefined</code> ，因为只会看最近的调用 <code>obj</code> 对象 ，当没有定义时，不会继续向上一个对象 <code>window</code> 寻找 <code>name</code> 属性。</p>\n<p>例3：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'global'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'cherry'</span>,</span><br><span class=\"line\">    fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = obj.fn()</span><br><span class=\"line\">temp()  <span class=\"comment\">// global</span></span><br></pre></td></tr></table></figure>\n<p>再来看一遍：<code>this</code> 永远指向 <code>最后调用</code> 它的那个对象。 <code>obj.fn()</code> 赋值给 <code>temp</code> 时，并没有进行赋值！最后 temp() 调用的时候是 <code>window.temp()</code> ，所以打印 <code>global</code> 。</p>\n<p>例4：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'global'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">'cherry'</span></span><br><span class=\"line\">    innerFn()</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn()  <span class=\"comment\">// global</span></span><br></pre></td></tr></table></figure>\n<p>例5：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Func</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'cherry'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"keyword\">new</span> Func()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn.name)  <span class=\"comment\">// cherry</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// =================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Func2</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'cherry'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">name</span>: <span class=\"string\">'apple'</span>&#125;  <span class=\"comment\">// 返回一个对象 如果name改为name2，fn2.name为undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Func3</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'cherry'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>  <span class=\"comment\">// 返回true，非对象（false, 124, 'abc'都可）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn2 = <span class=\"keyword\">new</span> Func2()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn2.name)  <span class=\"comment\">// apple</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn3 = <span class=\"keyword\">new</span> Func3()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn3.name)  <span class=\"comment\">// cherry</span></span><br></pre></td></tr></table></figure>\n<p>当我们通过 <code>new</code> 关键字构造一个实例对象的过程中，构造函数中的 this 一般情况下指向我们构造出来的实例化对象，因此在构造过程中 <code>this.name = &#39;cherry&#39;</code> 这句代码就相当于给实例对象 <code>fn</code> 创建了一个 <code>name</code> 属性并赋值 <code>cherry</code> 。<br>特别的，当构造函数中的 <code>this</code> 遇到 <code>return</code> 的情况。当构造函数中返回值是一个对象时，<code>this</code> 指向的就是返回的那个对象；如果返回值不是对象时，<code>this</code> 指向的就是构造函数（这里是 Func3 ）。</p>\n<h3 id=\"改变this的指向\"><a href=\"#改变this的指向\" class=\"headerlink\" title=\"改变this的指向\"></a>改变this的指向</h3><p>例6：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'global'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'cherry'</span>,</span><br><span class=\"line\">    fn1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    fn2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.fn1()</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.fn2()  <span class=\"comment\">// this.fn1 is not a function</span></span><br></pre></td></tr></table></figure>\n<p><code>setTimeout()</code> 即为 <code>window.setTimeout()</code> ，最后调用的对象是 <code>window</code>，而 <code>window</code> 中并没有方法 <code>fn1()</code> ，故而报错。</p>\n<p><strong>我们通常使用以下几种方法改变this的指向问题：</strong></p>\n<ul>\n<li>var _this = this</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">fn2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        _this.fn1()  <span class=\"comment\">// cherry</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>箭头函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">fn2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fn1()  <span class=\"comment\">// cherry</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>bind</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">fn2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fn1()  <span class=\"comment\">// cherry</span></span><br><span class=\"line\">    &#125;. bind(obj)(), <span class=\"number\">1000</span>)  <span class=\"comment\">// 这里的obj也可以换成this this指向obj</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>call</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">fn2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fn1()  <span class=\"comment\">// cherry</span></span><br><span class=\"line\">    &#125;.call(obj), <span class=\"number\">1000</span>)  <span class=\"comment\">// 这里的obj也可以换成this this指向obj</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>apply</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">fn2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fn1()  <span class=\"comment\">// cherry</span></span><br><span class=\"line\">    &#125;.apply(obj), <span class=\"number\">1000</span>)  <span class=\"comment\">// 这里的obj也可以换成this this指向obj</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"bind介绍\"><a href=\"#bind介绍\" class=\"headerlink\" title=\"bind介绍\"></a>bind介绍</h3><blockquote>\n<p><code>bind()</code> 方法创建一个 新的函数， 当被调用时，将其 <code>this</code> 关键字设置为提供的值。在调用新函数时，在任何提供之前提供一个给定的参数序列。</p>\n</blockquote>\n<p>例7：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    func: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'乘积： '</span> + a * b)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.func.bind(obj, <span class=\"number\">2</span>, <span class=\"number\">8</span>)  <span class=\"comment\">// f (a, b) &#123;</span></span><br><span class=\"line\">                        <span class=\"comment\">//     console.log('乘积： ' + a * b)</span></span><br><span class=\"line\">                        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">obj.func.bind(obj, <span class=\"number\">2</span>, <span class=\"number\">8</span>)()  <span class=\"comment\">// 乘积： 16</span></span><br></pre></td></tr></table></figure>\n<p>因为 bind 只会重新赋予 this，并不会自动执行，需要手动执行，固有第二个的结果。</p>\n<h3 id=\"call介绍\"><a href=\"#call介绍\" class=\"headerlink\" title=\"call介绍\"></a>call介绍</h3><blockquote>\n<p>functionObj.call(thisArg[, args1, args2, args3, …])</p>\n<blockquote>\n<p><code>thisArg</code> -&gt; 函数在运行时指定的 <code>this</code> 。当为 <code>null</code> 或者 <code>undefined</code> 时，自动指向 <code>window</code> 。当为<code>string</code> 、<code>number</code> 、<code>boolean</code> 类型的时候，<code>this</code> 指向各自的包装对象。</p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this: '</span> + <span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test.call(<span class=\"literal\">null</span>)  <span class=\"comment\">// window</span></span><br><span class=\"line\">test.call(<span class=\"literal\">undefined</span>)  <span class=\"comment\">// window</span></span><br><span class=\"line\">test.call(<span class=\"string\">'abcd'</span>)  <span class=\"comment\">// String</span></span><br><span class=\"line\">test.call(<span class=\"number\">128</span>)  <span class=\"comment\">// Number</span></span><br><span class=\"line\">test.call(<span class=\"literal\">false</span>)  <span class=\"comment\">// Boolean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// apply() 的结果与 call() 一致</span></span><br><span class=\"line\">test.apply(<span class=\"literal\">null</span>)  <span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>例8：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">    func: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'乘积： '</span> + a * b)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.func.call(obj, <span class=\"number\">2</span>, <span class=\"number\">5</span>)  <span class=\"comment\">// 乘积： 10</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"apply介绍\"><a href=\"#apply介绍\" class=\"headerlink\" title=\"apply介绍\"></a>apply介绍</h3><blockquote>\n<p>functionObj.apply(thisArg[, argsArr])</p>\n<blockquote>\n<p><code>apply</code> 的语法和 <code>call</code> 的语法类似，区别在于 <code>apply</code> 的参数列表是以 <code>数组</code> 或者 <code>类数组</code> 形式传入。</p>\n</blockquote>\n</blockquote>\n<p>例9：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">    func: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'乘积： '</span> + a * b)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.func.apply(obj, [<span class=\"number\">2</span>, <span class=\"number\">6</span>])  <span class=\"comment\">// 乘积： 12</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"call、apply常见用法\"><a href=\"#call、apply常见用法\" class=\"headerlink\" title=\"call、apply常见用法\"></a>call、apply常见用法</h3><ul>\n<li>将类数组 <code>ArrayLike</code> 转换成数组 <code>Array</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arraylike = &#123;<span class=\"string\">'1'</span>: <span class=\"string\">'hello'</span>, <span class=\"string\">'2'</span>: <span class=\"string\">'world'</span>, <span class=\"string\">'3'</span>: <span class=\"string\">'balabala'</span>, <span class=\"attr\">length</span>: <span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ArrTransfer</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// return [].slice.call(arguments)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    <span class=\"comment\">// return [].splice.call(arguments, 0)</span></span><br><span class=\"line\">    <span class=\"comment\">// return Array.prototype.splice.call(arguments, 0)</span></span><br><span class=\"line\">    <span class=\"comment\">// return Array.from(arguments)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> list = ArrTransfer(arrayLike)  <span class=\"comment\">// [&#123;'1': 'hello', '2': 'world', '3': 'balabala', length: 3&#125;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.slice.call(arrayLike).forEach( <span class=\"function\">(<span class=\"params\">elem, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(elem, index)</span><br><span class=\"line\">    <span class=\"comment\">// hello 1</span></span><br><span class=\"line\">    <span class=\"comment\">// world 2</span></span><br><span class=\"line\">    <span class=\"comment\">// balabala 3</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>求最大最小值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">21</span>, <span class=\"number\">2</span>, <span class=\"number\">35</span>, <span class=\"number\">9</span>, <span class=\"number\">23</span>, <span class=\"number\">16</span>, <span class=\"number\">29</span>]</span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"built_in\">Math</span>, arr)  <span class=\"comment\">// 35</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.min.apply(<span class=\"built_in\">Math</span>, arr)  <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Useful-Link\"><a href=\"#Useful-Link\" class=\"headerlink\" title=\"Useful Link\"></a>Useful Link</h3><ul>\n<li><a href=\"https://juejin.im/post/59bfe84351882531b730bac2\" target=\"_blank\" rel=\"noopener\">全文参考自掘金文章</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"this的指向\"><a href=\"#this的指向\" class=\"headerlink\" title=\"this的指向\"></a>this的指向</h3><blockquote>\n<p><code>this</code>的指向总结起来就是<code>this永远指向最后调用它的那个对象</code></p>\n</blockquote>","more":"<p>例1：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'global'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">'cherry'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test()</span><br><span class=\"line\"><span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"comment\">// global</span></span><br></pre></td></tr></table></figure>\n<p>调用 <code>test</code> 方法的地方是 <code>test()</code> ，前面没有调用的对象即为 <code>window</code> （严格模式下为 <code>undefined</code> ），相当于 <code>window.test()</code> 。</p>\n<p>例2：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'global'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'cherry'</span>,</span><br><span class=\"line\">    fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.fn()  <span class=\"comment\">// cherry</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.obj.fn()  <span class=\"comment\">// cherry</span></span><br></pre></td></tr></table></figure>\n<p><code>obj.fn()</code> 取用的是 <code>obj</code> 对象 里面的 <code>name</code> 值， <code>window.obj.fn()</code> 里面，最后调用的是 <code>obj</code> 对象，所以也是 <code>cherry</code> 。<br>补充：假如将 <code>obj</code> 对象中 <code>name</code> 属性的定义注释掉，那么 <code>obj.fn()</code> 将会打印出 <code>undefined</code> ，因为只会看最近的调用 <code>obj</code> 对象 ，当没有定义时，不会继续向上一个对象 <code>window</code> 寻找 <code>name</code> 属性。</p>\n<p>例3：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'global'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'cherry'</span>,</span><br><span class=\"line\">    fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = obj.fn()</span><br><span class=\"line\">temp()  <span class=\"comment\">// global</span></span><br></pre></td></tr></table></figure>\n<p>再来看一遍：<code>this</code> 永远指向 <code>最后调用</code> 它的那个对象。 <code>obj.fn()</code> 赋值给 <code>temp</code> 时，并没有进行赋值！最后 temp() 调用的时候是 <code>window.temp()</code> ，所以打印 <code>global</code> 。</p>\n<p>例4：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'global'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">'cherry'</span></span><br><span class=\"line\">    innerFn()</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn()  <span class=\"comment\">// global</span></span><br></pre></td></tr></table></figure>\n<p>例5：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Func</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'cherry'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"keyword\">new</span> Func()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn.name)  <span class=\"comment\">// cherry</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// =================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Func2</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'cherry'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">name</span>: <span class=\"string\">'apple'</span>&#125;  <span class=\"comment\">// 返回一个对象 如果name改为name2，fn2.name为undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Func3</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'cherry'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>  <span class=\"comment\">// 返回true，非对象（false, 124, 'abc'都可）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn2 = <span class=\"keyword\">new</span> Func2()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn2.name)  <span class=\"comment\">// apple</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn3 = <span class=\"keyword\">new</span> Func3()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn3.name)  <span class=\"comment\">// cherry</span></span><br></pre></td></tr></table></figure>\n<p>当我们通过 <code>new</code> 关键字构造一个实例对象的过程中，构造函数中的 this 一般情况下指向我们构造出来的实例化对象，因此在构造过程中 <code>this.name = &#39;cherry&#39;</code> 这句代码就相当于给实例对象 <code>fn</code> 创建了一个 <code>name</code> 属性并赋值 <code>cherry</code> 。<br>特别的，当构造函数中的 <code>this</code> 遇到 <code>return</code> 的情况。当构造函数中返回值是一个对象时，<code>this</code> 指向的就是返回的那个对象；如果返回值不是对象时，<code>this</code> 指向的就是构造函数（这里是 Func3 ）。</p>\n<h3 id=\"改变this的指向\"><a href=\"#改变this的指向\" class=\"headerlink\" title=\"改变this的指向\"></a>改变this的指向</h3><p>例6：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'global'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'cherry'</span>,</span><br><span class=\"line\">    fn1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    fn2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.fn1()</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.fn2()  <span class=\"comment\">// this.fn1 is not a function</span></span><br></pre></td></tr></table></figure>\n<p><code>setTimeout()</code> 即为 <code>window.setTimeout()</code> ，最后调用的对象是 <code>window</code>，而 <code>window</code> 中并没有方法 <code>fn1()</code> ，故而报错。</p>\n<p><strong>我们通常使用以下几种方法改变this的指向问题：</strong></p>\n<ul>\n<li>var _this = this</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">fn2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        _this.fn1()  <span class=\"comment\">// cherry</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>箭头函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">fn2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fn1()  <span class=\"comment\">// cherry</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>bind</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">fn2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fn1()  <span class=\"comment\">// cherry</span></span><br><span class=\"line\">    &#125;. bind(obj)(), <span class=\"number\">1000</span>)  <span class=\"comment\">// 这里的obj也可以换成this this指向obj</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>call</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">fn2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fn1()  <span class=\"comment\">// cherry</span></span><br><span class=\"line\">    &#125;.call(obj), <span class=\"number\">1000</span>)  <span class=\"comment\">// 这里的obj也可以换成this this指向obj</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>apply</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">fn2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fn1()  <span class=\"comment\">// cherry</span></span><br><span class=\"line\">    &#125;.apply(obj), <span class=\"number\">1000</span>)  <span class=\"comment\">// 这里的obj也可以换成this this指向obj</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"bind介绍\"><a href=\"#bind介绍\" class=\"headerlink\" title=\"bind介绍\"></a>bind介绍</h3><blockquote>\n<p><code>bind()</code> 方法创建一个 新的函数， 当被调用时，将其 <code>this</code> 关键字设置为提供的值。在调用新函数时，在任何提供之前提供一个给定的参数序列。</p>\n</blockquote>\n<p>例7：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    func: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'乘积： '</span> + a * b)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.func.bind(obj, <span class=\"number\">2</span>, <span class=\"number\">8</span>)  <span class=\"comment\">// f (a, b) &#123;</span></span><br><span class=\"line\">                        <span class=\"comment\">//     console.log('乘积： ' + a * b)</span></span><br><span class=\"line\">                        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">obj.func.bind(obj, <span class=\"number\">2</span>, <span class=\"number\">8</span>)()  <span class=\"comment\">// 乘积： 16</span></span><br></pre></td></tr></table></figure>\n<p>因为 bind 只会重新赋予 this，并不会自动执行，需要手动执行，固有第二个的结果。</p>\n<h3 id=\"call介绍\"><a href=\"#call介绍\" class=\"headerlink\" title=\"call介绍\"></a>call介绍</h3><blockquote>\n<p>functionObj.call(thisArg[, args1, args2, args3, …])</p>\n<blockquote>\n<p><code>thisArg</code> -&gt; 函数在运行时指定的 <code>this</code> 。当为 <code>null</code> 或者 <code>undefined</code> 时，自动指向 <code>window</code> 。当为<code>string</code> 、<code>number</code> 、<code>boolean</code> 类型的时候，<code>this</code> 指向各自的包装对象。</p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this: '</span> + <span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test.call(<span class=\"literal\">null</span>)  <span class=\"comment\">// window</span></span><br><span class=\"line\">test.call(<span class=\"literal\">undefined</span>)  <span class=\"comment\">// window</span></span><br><span class=\"line\">test.call(<span class=\"string\">'abcd'</span>)  <span class=\"comment\">// String</span></span><br><span class=\"line\">test.call(<span class=\"number\">128</span>)  <span class=\"comment\">// Number</span></span><br><span class=\"line\">test.call(<span class=\"literal\">false</span>)  <span class=\"comment\">// Boolean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// apply() 的结果与 call() 一致</span></span><br><span class=\"line\">test.apply(<span class=\"literal\">null</span>)  <span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>例8：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">    func: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'乘积： '</span> + a * b)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.func.call(obj, <span class=\"number\">2</span>, <span class=\"number\">5</span>)  <span class=\"comment\">// 乘积： 10</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"apply介绍\"><a href=\"#apply介绍\" class=\"headerlink\" title=\"apply介绍\"></a>apply介绍</h3><blockquote>\n<p>functionObj.apply(thisArg[, argsArr])</p>\n<blockquote>\n<p><code>apply</code> 的语法和 <code>call</code> 的语法类似，区别在于 <code>apply</code> 的参数列表是以 <code>数组</code> 或者 <code>类数组</code> 形式传入。</p>\n</blockquote>\n</blockquote>\n<p>例9：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">    func: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'乘积： '</span> + a * b)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.func.apply(obj, [<span class=\"number\">2</span>, <span class=\"number\">6</span>])  <span class=\"comment\">// 乘积： 12</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"call、apply常见用法\"><a href=\"#call、apply常见用法\" class=\"headerlink\" title=\"call、apply常见用法\"></a>call、apply常见用法</h3><ul>\n<li>将类数组 <code>ArrayLike</code> 转换成数组 <code>Array</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arraylike = &#123;<span class=\"string\">'1'</span>: <span class=\"string\">'hello'</span>, <span class=\"string\">'2'</span>: <span class=\"string\">'world'</span>, <span class=\"string\">'3'</span>: <span class=\"string\">'balabala'</span>, <span class=\"attr\">length</span>: <span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ArrTransfer</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// return [].slice.call(arguments)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    <span class=\"comment\">// return [].splice.call(arguments, 0)</span></span><br><span class=\"line\">    <span class=\"comment\">// return Array.prototype.splice.call(arguments, 0)</span></span><br><span class=\"line\">    <span class=\"comment\">// return Array.from(arguments)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> list = ArrTransfer(arrayLike)  <span class=\"comment\">// [&#123;'1': 'hello', '2': 'world', '3': 'balabala', length: 3&#125;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.slice.call(arrayLike).forEach( <span class=\"function\">(<span class=\"params\">elem, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(elem, index)</span><br><span class=\"line\">    <span class=\"comment\">// hello 1</span></span><br><span class=\"line\">    <span class=\"comment\">// world 2</span></span><br><span class=\"line\">    <span class=\"comment\">// balabala 3</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>求最大最小值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">21</span>, <span class=\"number\">2</span>, <span class=\"number\">35</span>, <span class=\"number\">9</span>, <span class=\"number\">23</span>, <span class=\"number\">16</span>, <span class=\"number\">29</span>]</span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"built_in\">Math</span>, arr)  <span class=\"comment\">// 35</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.min.apply(<span class=\"built_in\">Math</span>, arr)  <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Useful-Link\"><a href=\"#Useful-Link\" class=\"headerlink\" title=\"Useful Link\"></a>Useful Link</h3><ul>\n<li><a href=\"https://juejin.im/post/59bfe84351882531b730bac2\" target=\"_blank\" rel=\"noopener\">全文参考自掘金文章</a></li>\n</ul>"},{"title":"使用 void 0 代替 undefined","date":"2019-05-22T09:02:31.000Z","_content":"\n### What...\n\n```js\nvoid 0 === undefined  // true\n```\n\n<!-- More -->\n\n### Why？\n\n- 防止`undefined`被重写\n  \n> 在`ES5之`前，`window`下的`undefined`是可以被重写的，于是导致了某些极端情况下使用`undefined`会出现一定的差错。\n\n所以，用`void 0`是为了防止`undefined`被重写而出现判断不准确的情况。\n\n> 事实上，`void`的返回值都是`undefined`。\n> `ES5`之后的标准中，规定了全局变量下的`undefined`值为只读，不可改写的，但是局部变量中依然可以对之进行改写。\n> 补充一下：非严格模式下，`undefined`是可以重写的，严格模式则不能重写。\n\n- 节省字节\n\n`void 0`代替`undefined`节省3个字节，类似的还有以下用法：\n\n```js\n// 取整操作\nparseInt(a,10)  // Before\nMath.floor(a)  // Before\na>>0  // Before\n~~a  // After\na|0  // After\n\n// 四舍五入操作\nMath.round(a) // Before\na+.5|0  // After\n\n// 内置值\nundefined  // Before\nvoid 0  // After, 快\n0[0]  // After, 略慢\n\n// 内置值\nInfinity\n1/0\n\n// 布尔值短写法\ntrue;  // Before\nfalse  // Before\n!1  // After\n!0;  // After\n\n// 获取上下文对象\nvar global = (function () {\n    return this || (0, eval)('this')\n}())\n// (0, eval)('this') 等价于 eval('this') 正常情况下可以直接使用 eval()\n// 部分低版本IE下，不可以直接运行eval()。\n```","source":"_posts/void-0.md","raw":"---\ntitle: 使用 void 0 代替 undefined\ndate: 2019-05-22 17:02:31\ntags:\n---\n\n### What...\n\n```js\nvoid 0 === undefined  // true\n```\n\n<!-- More -->\n\n### Why？\n\n- 防止`undefined`被重写\n  \n> 在`ES5之`前，`window`下的`undefined`是可以被重写的，于是导致了某些极端情况下使用`undefined`会出现一定的差错。\n\n所以，用`void 0`是为了防止`undefined`被重写而出现判断不准确的情况。\n\n> 事实上，`void`的返回值都是`undefined`。\n> `ES5`之后的标准中，规定了全局变量下的`undefined`值为只读，不可改写的，但是局部变量中依然可以对之进行改写。\n> 补充一下：非严格模式下，`undefined`是可以重写的，严格模式则不能重写。\n\n- 节省字节\n\n`void 0`代替`undefined`节省3个字节，类似的还有以下用法：\n\n```js\n// 取整操作\nparseInt(a,10)  // Before\nMath.floor(a)  // Before\na>>0  // Before\n~~a  // After\na|0  // After\n\n// 四舍五入操作\nMath.round(a) // Before\na+.5|0  // After\n\n// 内置值\nundefined  // Before\nvoid 0  // After, 快\n0[0]  // After, 略慢\n\n// 内置值\nInfinity\n1/0\n\n// 布尔值短写法\ntrue;  // Before\nfalse  // Before\n!1  // After\n!0;  // After\n\n// 获取上下文对象\nvar global = (function () {\n    return this || (0, eval)('this')\n}())\n// (0, eval)('this') 等价于 eval('this') 正常情况下可以直接使用 eval()\n// 部分低版本IE下，不可以直接运行eval()。\n```","slug":"void-0","published":1,"updated":"2019-05-23T06:44:42.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyo49r5j0007u16t23jl9u1d","content":"<h3 id=\"What…\"><a href=\"#What…\" class=\"headerlink\" title=\"What…\"></a>What…</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"number\">0</span> === <span class=\"literal\">undefined</span>  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"Why？\"><a href=\"#Why？\" class=\"headerlink\" title=\"Why？\"></a>Why？</h3><ul>\n<li>防止<code>undefined</code>被重写</li>\n</ul>\n<blockquote>\n<p>在<code>ES5之</code>前，<code>window</code>下的<code>undefined</code>是可以被重写的，于是导致了某些极端情况下使用<code>undefined</code>会出现一定的差错。</p>\n</blockquote>\n<p>所以，用<code>void 0</code>是为了防止<code>undefined</code>被重写而出现判断不准确的情况。</p>\n<blockquote>\n<p>事实上，<code>void</code>的返回值都是<code>undefined</code>。<br><code>ES5</code>之后的标准中，规定了全局变量下的<code>undefined</code>值为只读，不可改写的，但是局部变量中依然可以对之进行改写。<br>补充一下：非严格模式下，<code>undefined</code>是可以重写的，严格模式则不能重写。</p>\n</blockquote>\n<ul>\n<li>节省字节</li>\n</ul>\n<p><code>void 0</code>代替<code>undefined</code>节省3个字节，类似的还有以下用法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 取整操作</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(a,<span class=\"number\">10</span>)  <span class=\"comment\">// Before</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.floor(a)  <span class=\"comment\">// Before</span></span><br><span class=\"line\">a&gt;&gt;<span class=\"number\">0</span>  <span class=\"comment\">// Before</span></span><br><span class=\"line\">~~a  <span class=\"comment\">// After</span></span><br><span class=\"line\">a|<span class=\"number\">0</span>  <span class=\"comment\">// After</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 四舍五入操作</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.round(a) <span class=\"comment\">// Before</span></span><br><span class=\"line\">a+<span class=\"number\">.5</span>|<span class=\"number\">0</span>  <span class=\"comment\">// After</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内置值</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span>  <span class=\"comment\">// Before</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"number\">0</span>  <span class=\"comment\">// After, 快</span></span><br><span class=\"line\"><span class=\"number\">0</span>[<span class=\"number\">0</span>]  <span class=\"comment\">// After, 略慢</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内置值</span></span><br><span class=\"line\"><span class=\"literal\">Infinity</span></span><br><span class=\"line\"><span class=\"number\">1</span>/<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 布尔值短写法</span></span><br><span class=\"line\"><span class=\"literal\">true</span>;  <span class=\"comment\">// Before</span></span><br><span class=\"line\"><span class=\"literal\">false</span>  <span class=\"comment\">// Before</span></span><br><span class=\"line\">!<span class=\"number\">1</span>  <span class=\"comment\">// After</span></span><br><span class=\"line\">!<span class=\"number\">0</span>;  <span class=\"comment\">// After</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取上下文对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> global = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> || (<span class=\"number\">0</span>, <span class=\"built_in\">eval</span>)(<span class=\"string\">'this'</span>)</span><br><span class=\"line\">&#125;())</span><br><span class=\"line\"><span class=\"comment\">// (0, eval)('this') 等价于 eval('this') 正常情况下可以直接使用 eval()</span></span><br><span class=\"line\"><span class=\"comment\">// 部分低版本IE下，不可以直接运行eval()。</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"What…\"><a href=\"#What…\" class=\"headerlink\" title=\"What…\"></a>What…</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"number\">0</span> === <span class=\"literal\">undefined</span>  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>","more":"<h3 id=\"Why？\"><a href=\"#Why？\" class=\"headerlink\" title=\"Why？\"></a>Why？</h3><ul>\n<li>防止<code>undefined</code>被重写</li>\n</ul>\n<blockquote>\n<p>在<code>ES5之</code>前，<code>window</code>下的<code>undefined</code>是可以被重写的，于是导致了某些极端情况下使用<code>undefined</code>会出现一定的差错。</p>\n</blockquote>\n<p>所以，用<code>void 0</code>是为了防止<code>undefined</code>被重写而出现判断不准确的情况。</p>\n<blockquote>\n<p>事实上，<code>void</code>的返回值都是<code>undefined</code>。<br><code>ES5</code>之后的标准中，规定了全局变量下的<code>undefined</code>值为只读，不可改写的，但是局部变量中依然可以对之进行改写。<br>补充一下：非严格模式下，<code>undefined</code>是可以重写的，严格模式则不能重写。</p>\n</blockquote>\n<ul>\n<li>节省字节</li>\n</ul>\n<p><code>void 0</code>代替<code>undefined</code>节省3个字节，类似的还有以下用法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 取整操作</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(a,<span class=\"number\">10</span>)  <span class=\"comment\">// Before</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.floor(a)  <span class=\"comment\">// Before</span></span><br><span class=\"line\">a&gt;&gt;<span class=\"number\">0</span>  <span class=\"comment\">// Before</span></span><br><span class=\"line\">~~a  <span class=\"comment\">// After</span></span><br><span class=\"line\">a|<span class=\"number\">0</span>  <span class=\"comment\">// After</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 四舍五入操作</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.round(a) <span class=\"comment\">// Before</span></span><br><span class=\"line\">a+<span class=\"number\">.5</span>|<span class=\"number\">0</span>  <span class=\"comment\">// After</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内置值</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span>  <span class=\"comment\">// Before</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"number\">0</span>  <span class=\"comment\">// After, 快</span></span><br><span class=\"line\"><span class=\"number\">0</span>[<span class=\"number\">0</span>]  <span class=\"comment\">// After, 略慢</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内置值</span></span><br><span class=\"line\"><span class=\"literal\">Infinity</span></span><br><span class=\"line\"><span class=\"number\">1</span>/<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 布尔值短写法</span></span><br><span class=\"line\"><span class=\"literal\">true</span>;  <span class=\"comment\">// Before</span></span><br><span class=\"line\"><span class=\"literal\">false</span>  <span class=\"comment\">// Before</span></span><br><span class=\"line\">!<span class=\"number\">1</span>  <span class=\"comment\">// After</span></span><br><span class=\"line\">!<span class=\"number\">0</span>;  <span class=\"comment\">// After</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取上下文对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> global = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> || (<span class=\"number\">0</span>, <span class=\"built_in\">eval</span>)(<span class=\"string\">'this'</span>)</span><br><span class=\"line\">&#125;())</span><br><span class=\"line\"><span class=\"comment\">// (0, eval)('this') 等价于 eval('this') 正常情况下可以直接使用 eval()</span></span><br><span class=\"line\"><span class=\"comment\">// 部分低版本IE下，不可以直接运行eval()。</span></span><br></pre></td></tr></table></figure>"},{"title":"webpack-study","date":"2019-05-23T07:29:00.000Z","_content":"\n### webpack-dev-server\n\n```js\nvar devMiddleware = require('webpack-dev-middleware')(compiler, {\n    publicPath: webpackConfig.output.publicPath,\n    hot: true,\n    stats: {\n        colors: true,\n        chunks: false\n    }\n})\n\n// use express\napp.use(devMiddleware)\n\napp.listen(port, host, function (err) {\n    if (err) {\n        console.log(err)\n        return\n    }\n    console.log('Listening at ' + host + ':' + port + '\\n')\n})\n```\n\n### CommonsChunkPlugin\n\n```js\n// webpack.config.js\nvar webpack = require(‘webpack’)\n\nentry: {\n    vendor: ['jquery', 'lodash'],\n    vuecore: './vuecore.js'\n}, \nplugins: [\n    // new webpack.optimize.CommonsChunkPlugin('vendor', 'vendor.bundle.js'),\n    // new webpack.optimize.CommonsChunkPlugin({\n    //     name: 'vuecore',\n    //     filename: 'vuecore.js'\n    // }),\n    // Error:  CommonsChunkPlugins: While running in normal mode its not allowed to use a non-entry chunk (vuecore)\n\n    // doing this instaed\n    new webpack.optimize.CommonsChunkPlugin({\n        names: ['vuecore','vendor']\n    }),\n    new webpack.optimize.CommonsChunkPlugin('vendor', 'vendor.bundle.js')\n]\n```","source":"_posts/webpack-study.md","raw":"---\ntitle: webpack-study\ndate: 2019-05-23 15:29:00\ntags: [webpack]\n---\n\n### webpack-dev-server\n\n```js\nvar devMiddleware = require('webpack-dev-middleware')(compiler, {\n    publicPath: webpackConfig.output.publicPath,\n    hot: true,\n    stats: {\n        colors: true,\n        chunks: false\n    }\n})\n\n// use express\napp.use(devMiddleware)\n\napp.listen(port, host, function (err) {\n    if (err) {\n        console.log(err)\n        return\n    }\n    console.log('Listening at ' + host + ':' + port + '\\n')\n})\n```\n\n### CommonsChunkPlugin\n\n```js\n// webpack.config.js\nvar webpack = require(‘webpack’)\n\nentry: {\n    vendor: ['jquery', 'lodash'],\n    vuecore: './vuecore.js'\n}, \nplugins: [\n    // new webpack.optimize.CommonsChunkPlugin('vendor', 'vendor.bundle.js'),\n    // new webpack.optimize.CommonsChunkPlugin({\n    //     name: 'vuecore',\n    //     filename: 'vuecore.js'\n    // }),\n    // Error:  CommonsChunkPlugins: While running in normal mode its not allowed to use a non-entry chunk (vuecore)\n\n    // doing this instaed\n    new webpack.optimize.CommonsChunkPlugin({\n        names: ['vuecore','vendor']\n    }),\n    new webpack.optimize.CommonsChunkPlugin('vendor', 'vendor.bundle.js')\n]\n```","slug":"webpack-study","published":1,"updated":"2019-05-23T09:41:57.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyo49r5l0008u16twsevzzi6","content":"<h3 id=\"webpack-dev-server\"><a href=\"#webpack-dev-server\" class=\"headerlink\" title=\"webpack-dev-server\"></a>webpack-dev-server</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> devMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-dev-middleware'</span>)(compiler, &#123;</span><br><span class=\"line\">    publicPath: webpackConfig.output.publicPath,</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    stats: &#123;</span><br><span class=\"line\">        colors: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        chunks: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// use express</span></span><br><span class=\"line\">app.use(devMiddleware)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(port, host, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Listening at '</span> + host + <span class=\"string\">':'</span> + port + <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"CommonsChunkPlugin\"><a href=\"#CommonsChunkPlugin\" class=\"headerlink\" title=\"CommonsChunkPlugin\"></a>CommonsChunkPlugin</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(‘webpack’)</span><br><span class=\"line\"></span><br><span class=\"line\">entry: &#123;</span><br><span class=\"line\">    vendor: [<span class=\"string\">'jquery'</span>, <span class=\"string\">'lodash'</span>],</span><br><span class=\"line\">    vuecore: <span class=\"string\">'./vuecore.js'</span></span><br><span class=\"line\">&#125;, </span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// new webpack.optimize.CommonsChunkPlugin('vendor', 'vendor.bundle.js'),</span></span><br><span class=\"line\">    <span class=\"comment\">// new webpack.optimize.CommonsChunkPlugin(&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     name: 'vuecore',</span></span><br><span class=\"line\">    <span class=\"comment\">//     filename: 'vuecore.js'</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;),</span></span><br><span class=\"line\">    <span class=\"comment\">// Error:  CommonsChunkPlugins: While running in normal mode its not allowed to use a non-entry chunk (vuecore)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// doing this instaed</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">        names: [<span class=\"string\">'vuecore'</span>,<span class=\"string\">'vendor'</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'vendor'</span>, <span class=\"string\">'vendor.bundle.js'</span>)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"webpack-dev-server\"><a href=\"#webpack-dev-server\" class=\"headerlink\" title=\"webpack-dev-server\"></a>webpack-dev-server</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> devMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-dev-middleware'</span>)(compiler, &#123;</span><br><span class=\"line\">    publicPath: webpackConfig.output.publicPath,</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    stats: &#123;</span><br><span class=\"line\">        colors: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        chunks: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// use express</span></span><br><span class=\"line\">app.use(devMiddleware)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(port, host, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Listening at '</span> + host + <span class=\"string\">':'</span> + port + <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"CommonsChunkPlugin\"><a href=\"#CommonsChunkPlugin\" class=\"headerlink\" title=\"CommonsChunkPlugin\"></a>CommonsChunkPlugin</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(‘webpack’)</span><br><span class=\"line\"></span><br><span class=\"line\">entry: &#123;</span><br><span class=\"line\">    vendor: [<span class=\"string\">'jquery'</span>, <span class=\"string\">'lodash'</span>],</span><br><span class=\"line\">    vuecore: <span class=\"string\">'./vuecore.js'</span></span><br><span class=\"line\">&#125;, </span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// new webpack.optimize.CommonsChunkPlugin('vendor', 'vendor.bundle.js'),</span></span><br><span class=\"line\">    <span class=\"comment\">// new webpack.optimize.CommonsChunkPlugin(&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     name: 'vuecore',</span></span><br><span class=\"line\">    <span class=\"comment\">//     filename: 'vuecore.js'</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;),</span></span><br><span class=\"line\">    <span class=\"comment\">// Error:  CommonsChunkPlugins: While running in normal mode its not allowed to use a non-entry chunk (vuecore)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// doing this instaed</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">        names: [<span class=\"string\">'vuecore'</span>,<span class=\"string\">'vendor'</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'vendor'</span>, <span class=\"string\">'vendor.bundle.js'</span>)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>"},{"title":"企业微信中超链接地址跳转","date":"2019-05-21T03:04:11.000Z","_content":"\n#### 问题描述：\n\n在`ios(版本号未测试)企业微信(版本号未测试)`中，并且超链接`target`属性是`_blank`时，点击超链接不能正常跳转，当前页面自动刷新一次。\n<!-- More -->\n而在`ios微信浏览器`以及`android`中未复现。\n\n#### 解决办法\n\n1. 直接修改`target`属性值为`非_blank`即可；\n2. 如果是从`富文本编辑器`中出来的`html`内容，可以借助`js`进行处理。示意代码如下：\n\n```js\nlet oAList = document.querySelectorAll('a')\nArray.from(oAList).forEach( (aLink, index) => {\n    aLink.getAttribute('target') === '_blank' ? aLink.setAttribute('target', '_self') : null  // 设置成null也可\n})\n```","source":"_posts/wxwork-link-unRirect.md","raw":"---\ntitle: 企业微信中超链接地址跳转\ndate: 2019-05-21 11:04:11\ntags: [企微, 超链接]\n---\n\n#### 问题描述：\n\n在`ios(版本号未测试)企业微信(版本号未测试)`中，并且超链接`target`属性是`_blank`时，点击超链接不能正常跳转，当前页面自动刷新一次。\n<!-- More -->\n而在`ios微信浏览器`以及`android`中未复现。\n\n#### 解决办法\n\n1. 直接修改`target`属性值为`非_blank`即可；\n2. 如果是从`富文本编辑器`中出来的`html`内容，可以借助`js`进行处理。示意代码如下：\n\n```js\nlet oAList = document.querySelectorAll('a')\nArray.from(oAList).forEach( (aLink, index) => {\n    aLink.getAttribute('target') === '_blank' ? aLink.setAttribute('target', '_self') : null  // 设置成null也可\n})\n```","slug":"wxwork-link-unRirect","published":1,"updated":"2019-05-21T07:03:28.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyo49r5m0009u16tgo1c31lj","content":"<h4 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h4><p>在<code>ios(版本号未测试)企业微信(版本号未测试)</code>中，并且超链接<code>target</code>属性是<code>_blank</code>时，点击超链接不能正常跳转，当前页面自动刷新一次。<br><a id=\"more\"></a><br>而在<code>ios微信浏览器</code>以及<code>android</code>中未复现。</p>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><ol>\n<li>直接修改<code>target</code>属性值为<code>非_blank</code>即可；</li>\n<li>如果是从<code>富文本编辑器</code>中出来的<code>html</code>内容，可以借助<code>js</code>进行处理。示意代码如下：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> oAList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(oAList).forEach( <span class=\"function\">(<span class=\"params\">aLink, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    aLink.getAttribute(<span class=\"string\">'target'</span>) === <span class=\"string\">'_blank'</span> ? aLink.setAttribute(<span class=\"string\">'target'</span>, <span class=\"string\">'_self'</span>) : <span class=\"literal\">null</span>  <span class=\"comment\">// 设置成null也可</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h4><p>在<code>ios(版本号未测试)企业微信(版本号未测试)</code>中，并且超链接<code>target</code>属性是<code>_blank</code>时，点击超链接不能正常跳转，当前页面自动刷新一次。<br>","more":"<br>而在<code>ios微信浏览器</code>以及<code>android</code>中未复现。</p>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><ol>\n<li>直接修改<code>target</code>属性值为<code>非_blank</code>即可；</li>\n<li>如果是从<code>富文本编辑器</code>中出来的<code>html</code>内容，可以借助<code>js</code>进行处理。示意代码如下：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> oAList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(oAList).forEach( <span class=\"function\">(<span class=\"params\">aLink, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    aLink.getAttribute(<span class=\"string\">'target'</span>) === <span class=\"string\">'_blank'</span> ? aLink.setAttribute(<span class=\"string\">'target'</span>, <span class=\"string\">'_self'</span>) : <span class=\"literal\">null</span>  <span class=\"comment\">// 设置成null也可</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"日志内容【一】","date":"2019-05-22T09:43:43.000Z","toc":true,"_content":"\n### 1. setTimeout中方法体添加引号与不添加引号的区别\n\n> `添加引号`的情况，调用的函数是`全局范围`的。`未添加引号`的情况，调用的是`局部范围`的。\n\n<!-- More -->\n\n```js\nvar testFn = function () {\n    console.info('hello from global')\n}\n\nvar fn = function () {\n    var testFn = function () {\n        console.info('hello fron inner')\n    }\n\n    setTimeout('testFn()', 1000)  // hello form global\n    setTimeout(testFn, 1000)  // hello from inner\n\n    // 在fn()函数内部没有定义testFn的时候，会向上寻找testFn，这里找到了全局函数，执行效果：\n    setTimeout(testFn, 1000)  // hello from global\n}\n\nfn()\n```\n\n### 2. AMD/CMD规范 common.js\n\n`common.js` 运行在`服务器端`，因为模块就在磁盘上，所以加载时间几乎可以忽略不计，属于同步加载。 [典型代表 `node.js`]\n`AMD`与`CMD`都属于异步加载，运行在`浏览器端`。\n`AMD` 推崇依赖前置，定义模块的时候就需要申明需要依赖的模块 [典型代表 `require.js`]\n`CMD` 推崇依赖就近，需要用到的时候才去require相关模块 [典型代表 `sea.js`]\n\n### 3. stopPropagation() 以及 stopImmediatePropagation()\n\n`stopImmediatePropagation` 用于阻止冒泡，在执行完当前元素上的事件处理程序之后，停止当前元素以及后续元素的事件处理程序\n\n`stopPropagation` 同样也是用于阻止冒泡，在执行完绑定到当前元素上的所有事件处理程序之后，停止后续元素的事件处理程序\n\n同一个元素用`on`绑定多次同样事件时（例如click），最后一次会覆盖之前的事件，不会执行前面。而用`addEventListener`绑定多次同样事件时，都会执行。\n\n```html\n<div id=\"large\" style=\"width: 150px; height: 150px; background: orange\">\n    <div id=\"middle\" style=\"width: 100px; height: 100px; background: cadetblue\">\n        <div id=\"small\" style=\"width: 50px; height:50px; background: coral\"></div>\n    </div>\n</div>\n```\n\n```js\n(function(){\n    var large = document.getElementById('large')\n    var middle = document.getElementById('middle')\n    var small = document.getElementById('small')\n\n    large.addEventListener('click', function(){\n        alert('large div is clicked')\n    })\n    middle.addEventListener('click', function(){\n        alert('middle div is clicked')\n    })\n\n    // 第一种情况： 点击small时，会依次弹出三个窗口，这是因为向上冒泡产生的\n    small.addEventListener('click', function(){\n     alert('small div is clicked')\n    })\n\n    // 第二种情况： 点击small时，会弹出四个窗口\n    // small.addEventListener('click', function(){\n    //  alert('small-1 is clicked')\n    // })\n    // small.addEventListener('click', function(){\n    //  alert('small-2 is clicked')\n    // })\n\n    // 第三种情况，添加stopPropagation： 点击small时，会弹出两个窗口\n    // small-1 is clicked    small-2 is clicked\n    // small.addEventListener('click', function(event){\n    //  alert('small-1 is clicked')\n    //  event.stopPropagation()\n    // })\n    // small.addEventListener('click', function(){\n    //  alert('small-2 is clicked')\n    // })\n\n    // 第四种情况，添加stopImmediatePropagation： 点击small时，会弹出一个窗口\n    // small-1 is clicked\n    // 能够很明显看到与stopPropagation的区别，调用stopImmediatePropagation之后，第二个定义的click事件也被取消而不被执行了。\n    // small.addEventListener('click', function(event){\n    //     alert('small-1 is clicked')\n    //     event.stopImmediatePropagation()\n    // })\n    // small.addEventListener('click', function(){\n    //     alert('small-2 is clicked')\n    // })\n})()\n```\n\n<div id=\"large\" style=\"box-sizing: border-box; width: 150px; height: 150px; background: orange; cursor: pointer;\"><!-- \n    --><div id=\"middle\" style=\"box-sizing: border-box; width: 100px; height: 100px; background: cadetblue\"><!-- \n        --><div id=\"small\" style=\"box-sizing: border-box; width: 50px; height:50px; background: coral\"></div><!-- \n    --></div>\n</div>\n\n<script>\n    (function(){\n        var large = document.getElementById('large')\n        var middle = document.getElementById('middle')\n        var small = document.getElementById('small')\n\n        large.addEventListener('click', function(){\n            alert('large div is clicked')\n        })\n        middle.addEventListener('click', function(){\n            alert('middle div is clicked')\n        })\n\n        // 第一种情况： 点击small时，会依次弹出三个窗口，这是因为向上冒泡产生的\n        small.addEventListener('click', function(){\n        alert('small div is clicked')\n        })\n\n        // 第二种情况： 点击small时，会弹出四个窗口\n        // small.addEventListener('click', function(){\n        //  alert('small-1 is clicked')\n        // })\n        // small.addEventListener('click', function(){\n        //  alert('small-2 is clicked')\n        // })\n\n        // 第三种情况，添加stopPropagation： 点击small时，会弹出两个窗口\n        // small-1 is clicked    small-2 is clicked\n        // small.addEventListener('click', function(event){\n        //  alert('small-1 is clicked')\n        //  event.stopPropagation()\n        // })\n        // small.addEventListener('click', function(){\n        //  alert('small-2 is clicked')\n        // })\n\n        // 第四种情况，添加stopImmediatePropagation： 点击small时，会弹出一个窗口\n        // small-1 is clicked\n        // 能够很明显看到与stopPropagation的区别，调用stopImmediatePropagation之后，第二个定义的click事件也被取消而不被执行了。\n        // small.addEventListener('click', function(event){\n        //     alert('small-1 is clicked')\n        //     event.stopImmediatePropagation()\n        // })\n        // small.addEventListener('click', function(){\n        //     alert('small-2 is clicked')\n        // })\n    })()\n</script>\n\n### 4. js事件中的三个阶段\n\n三个阶段分别为`捕获阶段` `目标阶段` `冒泡阶段`\nelement.addEventListener(type, fn[, useCapture])\nuseCapture - 指定事件句柄在捕获阶段或者冒泡阶段执行， 默认false(事件句柄在冒泡阶段执行)，设置为true(事件句柄在捕获阶段执行)。\n\n- 捕获阶段\n- 目标阶段\n- 冒泡阶段\n\n### 5. 常见的前端性能优化手段\n\n- css sprites（雪碧图）\n- 避免使用css表达式\n- css样式表放在页面顶部，脚本放在页面底部\n- 内联图片和脚本使用data:URL（base64编码）模式直接包含在页面中，无需进行http请求，缺点：ie不支持，图片太大不适用，使用base64会增加页面体积，浏览器不会缓存\n- 使用内容分发网络CDN\n- 开启GZIP压缩，启用负载均衡\n- 开启keep alive减少与服务器链接次数 缺点：使服务器负载增大，也更容易遭受攻击\n- 精简压缩代码 uglifyjs\n- 避免重定向 常见的301 302\n- 配置e-tags 和 expires头 使用缓存\n- 按需加载资源\n\n### 6. parseInt() 以及 parseFloat()\n\n> parseInt(string[, radix])\n\n- string如果以‘ox’或者'oX'开头，将以16进制进行解析\n- radix 要解析的数字基数，介于2-36之间\n- 如果不给值或者为0，则按照基数为10来计算\n- 如果小于2或者大于36，则返回NaN\n- 开头和结尾的空格是允许的\n- 如果字符串的第一个字符不能转换成对应的数字，将返回NaN\n\n```js\nparseInt('0x12')  // 17\nparseInt('0x12', 2)  // 0  => parseInt('0', 2)\nparseInt('0x12', 10)  // 0  => parseInt('0', 16)\nparseInt('8')  // => parseInt('8', 0) => parseInt('8', 10)  // 8\nparseInt('8', 1)  // NaN\nparseInt('8', 37)  // NaN\nparseInt('a23')  // NaN\nparseInt('2a3')  // 2\nparseInt(' 23')  // 23\nparseInt(' 23 ')  // 23\nparseInt(' 2 3 ')  // 2\nparseInt('11', 2)  // 3\nparseInt(11, 2)  // 3\nparseInt('1100', 2)  // 12\nparseInt('21', 2)  // NaN 2超出了2进制最大值1，并且是第一个字符\nparseInt('12', 2)  // 1 2同样超出了2进制最大值1，但是第一个字符可以转换成二进制\nparseInt('66', 8) // 6*8^1 + 6*8^0 = 48 + 6 = 54\nparseInt('12', 16) // 1*16^1 + 2*16^0 = 16 + 2 = 18\n[0, 1, 2, 3].map(parseInt) //  [parseInt(0, 0), parseInt(1, 1), parseInt(2, 2), parseInt(3, 3)] => [0, NaN, NaN, NaN]\n```\n\nparseFloat()\n\n> parseInt(string[, radix])  这里语法待修改\n\n- 开头和结尾的空格是允许的\n- 如果字符串的第一个字符不能转换成对应的数字，将返回NaN\n- 如果在解析过程中遇到了正负号（+ 或 -）、数字 (0-9)、小数点，或者科学记数法中的指数（e 或 E）以外的字符，则它会忽略该字符以及之后的所有字符\n\n### 7. charAt()、charCodeAt() 和 fromCharCode()\n\n- charAt()\n\n   - String.charAt(index)\n   - 返回字符串中指定位置的字符, 索引值 index < 0 或超出了范围则返回一个空字符串\n\n ```js\n'abc'.charAt(1)  // 'b'\n'abc'.charAt(-2)  // ''\n'abc'.charAt(5)  // ''\n```\n\n- charCodeAt()\n\n   - String.charCodeAt(index)\n   - 返回字符串中指定位置的字符的 unicode 数值 [0, 1114111]\n   - 开头的 128 个 unicode 编码单元和 ASCII 字符编码一样\n   - 索引值 index < 0 或超出了范围则返回一个 NaN, 大于 255 的是中文\n\n```js\n'AabcdD'.charCodeAt(0)  // 65\n'AabcdD'.charCodeAt(1)  // 97\n'AabcdD'.charCodeAt(-1)  // NaN\n'AabcdD'.charCodeAt(8)  // NaN\n'中国'.charCodeAt(1)  // 22269\n```\n\n- fromCharCode()\n\n   - String.fromCharCode(num1, num2, num3, ...)\n   - 根据指定的 unicode 编码中的序号值来返回字符串\n\n```js\nString.fromCharCode(65, 66, 97)  // 'ABa'\n```\n\n### 8. 原生ajax\n\n```js\nvar xhr = new XMLHttpRequest()\n//  请求方式  请求路径  是否异步发送请求\nxhr.open('GET', 'http://www.jnathan.cn/jnathan/effect/authKit.js', true)\nxhr.send('hello world') \n\nxhr.onreadystatechange = function () {\n    if (xhr.readyState == 4 && xhr.status == 200) {\n        // alert(xhr.responseText)\n    }\n}\n```\n\n### 9. 有一个长度为n的数组，假定全部为整数，其中有且仅有一个数出现了奇数次，其他的数字都出现偶数次，找出出现了奇数次的那个数字。\n\n> 时间复杂度为O(n) 空间复杂度O(1)\n> 利用了`n ^ n = 0`, `n ^ 0 = n`两个等式的原理。\n> 循环对数组数字进行异或计算，即  `0 ^ arr[0] ^ arr[1] ^ ... ^ arr[n - 1]` ，异或计算满足交换律原则，如果数组元素出现了相同的情况，可以移动到一起先进行计算，如果出现了`偶数次`，其结果为  `0`，出现了奇数次的数其结果为该数字，所以表达式最后得出来的结果即为数组所有`出现了奇数次元素`的`异或操作`的结果。比如：[1,2,2,3,4,4]进行异或操作得到的结果是 `1 ^ 3 = 2` ，特殊情况下（只有一个数字出现了`奇数次`），那么最后的结果就是出现了`奇数次`的那个数字！！\n\n```js\nfunction fn7 (arr) {\n    var oddTimesNumber = 0\n    for (let i in arr) {\n        oddTimesNumber = oddTimesNumber ^ arr[i]\n    }\n\n    return oddTimesNumber\n}\nfn7([1,2,3,4,5,4,4,3,2,1,1,1])  // 3\n```\n\n### 10. 递归求1-10的和\n\n```js\nfunction getSum(nextArr, curSum = 0) {\n\n    var sum = nextArr[0] + curSum\n\n    if (nextArr.length == 1) {\n        return sum\n    } else {\n        return getSum(nextArr.slice(1), sum)\n    }\n\n}\ngetSum([1,2,3,4,5,6,7,8,9,10])\n```\n\n### 11. 去除数组重复元素\n\n- 直接双层循环比较\n\n```js\nfunction unique (arr) {\n\n    var result = []\n    var isRepeat\n\n    for (var i = 0; i < arr.length; i++) {\n\n        isRepeat = false  // 默认不重复，进行push操作，当判断重复时不操作\n        for (var j = 0; j < result.length; j++) {\n            if (arr[i] === result[j]) {\n                isRepeat = true\n                break\n            }\n        }\n\n        if (!isRepeat) {\n            result.push(arr[i])\n        }\n    }\n\n    return result\n\n}\nunique([1,1,2,3,4])\n```\n\n- 利用`indexOf()`， 但是`indexOf`会一直循环到找到目标为止，浪费了时间\n\n```js\nfunction unique (arr) {\n\n    var result = []\n\n    for (var i = 0; i < arr.length; i++) {\n        if (result.indexOf(arr[i]) === -1) {\n            result.push(arr[i])\n        }\n    }\n\n    return result\n}\nunique([1,1,2,3,4])\n```\n\n- 最快的方法 把已经出现过的元素通过下标的形式存入一个`Object`内。下标的引用的实现原理利用的是哈希算法，要比用`indexOf()`搜索数组快的多。由于多了一个`hash`表，占用的内存会更多，空间换时间做法\n\n```js\nfunction unique (arr) {\n    // hashObj为hash表，result为临时数组\n    var hashObj = {}, result = []\n    for (var i = 0; i < arr.length; i++) {\n        // 如果hash表中没有当前项\n        if (!hashObj[arr[i]]) {\n            // 存入hash表\n            hashObj[arr[i]] = true\n            // 把当前数组的当前项push到临时数组里面\n            result.push(arr[i])\n        }\n    }\n    return result\n}\n```\n\n- 折衷方法 时间上比`indexOf`快，比`hash`表的方式要慢。先按照从小到大的顺序排序，然后比较相邻的两个值大小\n  \n```js\nfunction unique (arr) {\n    arr.sort()\n    var result = [arr[0]]\n    for (var i = 1; i < arr.length; i++) {\n        if (arr[i] !== result[result.length - 1]) {\n            result.push(arr[i])\n        }\n    }\n    return result\n}\n```\n\n- `es6`的`filter()`方法\n\n```js\nfunction unique (arr) {\n    return arr.filter( (value, index) => { \n        arr.indexOf(value) === index\n        console.log(arr.indexOf(value), index)\n        // 0 0\n        // 0 1\n        // 2 2\n        // 3 3\n        // 4 4\n        // 5 5\n        // 2 6\n    })\n}\nunique([1,1,2,3,4,5,2])\n```\n\n### 12. jquery  里面的  $(document).ready(function(){})  和  window.onload  的区别\n\n- `window.onload`需要等到页面中包括图片在内的元素全部加载完毕才能执行；`ready()`是DOM元素绘制结束之后就执行，不用等到加载完毕。\n- `window.onload`如果定义了多次，则只会执行一个，后者会覆盖前者； `ready()`可以同时编写多个，并且都会执行。\n- `window.onload`没有简化写法；`$(document).ready(function(){})`可以简化成`$(function(){})`。\n- 补充：`$(window).load(function(){})`和 `window.onload()`效果一致。\n\n### 13. 渐进增强与优雅降级\n\n- 渐进增强 一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再对高级浏览器进行效果、交互的优化，达到更好的体验。\n- 优雅降级 一开始就构建站点的完整功能，然后针对浏览器进行测试和修复。比如一开始使用`CSS3`的特性构建了一个应用，然后逐步针对各大低级浏览器进行`hack`使其可以在低版本浏览器上正常浏览。\n\n### 14. cookies、localStorage和sessionStorage的区别\n\n- cookies存在于客户端，始终会在http请求中通过  Request Headers  Cookie头携带，即使当前请求不需要使用到cookie；大小一般在4KB，所以只适合保存很小的数据，比如会话标识；cookies在没有设置过期时间（expires）的时候，默认在关闭浏览器之后就会被清除，在有设置过期时间的时候，会一直持续到过期时间有效（即使关闭当前窗口或者关闭浏览器）。\n- localStorage 和 sessionStorage不会发送数据到服务端，仅在本地保存；也有大小的限制，但一般在5M左右；localStorage一直有效，除非手动清除； sessionStorage只在浏览器关闭之前有效。\n\n另外： localStorage 和 cookies 在同源的浏览器窗口之间是共享的，sessionStorage不共享，因此至少有以下两种方法实现不同页面间的通信：\n\n- 利用localStorage\n\n```js\n// A页面\n$('#btn').click(function(){\n    localStorage.setItem('name', 'Jnathan')\n})\n\n// B页面\nwindow.addEventListener('storage', function(event){\n    console.log(event.key + '=' + event.newValue)\n})\n```\n\n- 利用cookie + setInterval()\n\n```js\n// A页面\n$('#btn').click(function () {\n    document.cookie = \"name=\" + 'Jnathan'\n})\n\n// B页面\nfunction getKey(key) {  \n    return JSON.parse(\"{\\\"\"+ document.cookie.replace(/;\\s+/gim,\"\\\",\\\"\").replace(/=/gim, \"\\\":\\\"\") +\"\\\"}\")[key];  \n}\nsetInterval(function(){\n    console.log('name:', getKey('name'))\n}, 1000)\n```\n\n### 15. new 操作符的四个步骤\n\n```js\nvar Fn = function() {}\nvar fn = new Fn()\n```\n\n- 创建一个`空对象`\n\n```js\nvar obj = new Object()\n```\n\n- 设置`obj`的`原型`，将`obj`的`原型`指向`Fn`的`原型链`\n\n```js\nobj.__proto__ = Fn.prototype\n```\n\n- 将`Fn`中的`this`指向`obj`,并执行`Fn`\n\n```js\nvar result = Fn.call(obj)\n```\n\n- 判断`Fn`的`返回值类型`。如果是`引用类型，则返回这个`引用类型的对象`；如果是`值类型`，则返回`obj`\n\n```js\nif (typeof result == 'object') {  // 引用类型\n    fn = result\n} else { // 值类型\n    fn = obj\n}\n```\n\n### 16. 构造函数实现继承的几种方式\n\n```js\nfunction Animal () {\n    this.species = '动物'\n}\nfunction Cat (name, color) {\n    this.name = name\n    this.color = color\n}\n```\n\n使猫继承动物：\n\n- call apply\n\n```js\nfunction Cat (name, color) {\n    Animal.apply(this, arguments)\n    this.name = name\n    this.color = color\n}\n\nvar cat1 = new Cat('name1', 'color1')\nalert(cat1.species) //  动物\n```\n\n- prototype（其一）\n\n```js\nfunction Cat (name, color) {\n    Animal.apply(this, arguments)\n    this.name = name\n    this.color = color\n}\n\nvar cat1 = new Cat('name1', 'color1')\nalert(cat1.species) //  动物\n```\n\n- prototype（其二）\n\n```js\nfunction Animal () {}\nAnimal.prototype.species = '动物'\n\nCat.prototype = Animal.prototype\nCat.prototype.constructor = Cat\n\nvar cat3 = new Cat('name3', 'color3')\nalert(cat3.species) // 动物   \n```\n\n- 利用空对象作为中介 上面那种方法的缺点：Cat.prototype和Animal.prototype现在指向了同一个对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。\n\n```js\nvar Fn = function () {}\nFn.prototype = Animal.prototype\nCat.prototype = new Fn()\nCat.prototype.construvtor = Cat\n```\n\n将其封装成一个函数\n\n```js\nfunction extend (Child, Parent) {\n    var Fn = function () {}\n    Fn.prototype = Parent.prototype\n    Child.prototype = new Fn()\n    Child.prototype.constructor = Child\n}\n\nextend(Cat, Animal)\nvar cat4 = new Cat('name4', 'color4')\nalert(cat4.species) // 动物\n```\n\n- 拷贝继承\n\n```js\nfunction Animal () {}\nAnimal.species = '动物'\n\nfunction extend2 () {\n    var C = Child.prototype\n    var P = Parent.prototype\n\n    for (var i in P) {\n        C[i] = P[i]\n    }\n}\n\nextend2(Cat, Animal)\nvar cat5 = new Cat('name5', 'color5')\nalert(cat5.species) // 动物\n```\n\n### 17. 非构造函数的继承\n\n```js\nvar Chinese = {\n    nation: '中国'\n}\nvar Doctor = {\n    career: '医生'\n}\n```\n\n- 浅拷贝\n\n```js\nfunction shallowCopy (Parent) {\n    var Child = {}\n\n    for (var i in Parent) {\n        Child[i] = Parent[i]\n    }\n\n    return Child\n}\n\nvar doctor1 = shallowCopy(Chinese)\nalert(doctor1.nation) // 中国\n```\n\n- 深拷贝\n\n```js\nfunction deepCopy (Child, Parent) {\n    var Child = Child || {}\n\n    for (var i in Parent) {\n        if (typeof Parent[i] == 'object') {\n            Child[i] = (Parent[i].constructor === Array) ? [] : {}\n            deepCopy(Child[i], Parent[i])\n        } else {\n            Child[i] = Parent[i]\n        }\n    }\n\n    return Child\n}\n\nvar doctor2 = deepCopy(Doctor, Chinese)\nalert(doctor.nation) // 中国\n```\n\n### 18. [参考链接](http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html)","source":"_posts/multiple-diary.md","raw":"---\ntitle: 日志内容【一】\ndate: 2019-05-22 17:43:43\ntoc: true\ntags: [dairy]\n---\n\n### 1. setTimeout中方法体添加引号与不添加引号的区别\n\n> `添加引号`的情况，调用的函数是`全局范围`的。`未添加引号`的情况，调用的是`局部范围`的。\n\n<!-- More -->\n\n```js\nvar testFn = function () {\n    console.info('hello from global')\n}\n\nvar fn = function () {\n    var testFn = function () {\n        console.info('hello fron inner')\n    }\n\n    setTimeout('testFn()', 1000)  // hello form global\n    setTimeout(testFn, 1000)  // hello from inner\n\n    // 在fn()函数内部没有定义testFn的时候，会向上寻找testFn，这里找到了全局函数，执行效果：\n    setTimeout(testFn, 1000)  // hello from global\n}\n\nfn()\n```\n\n### 2. AMD/CMD规范 common.js\n\n`common.js` 运行在`服务器端`，因为模块就在磁盘上，所以加载时间几乎可以忽略不计，属于同步加载。 [典型代表 `node.js`]\n`AMD`与`CMD`都属于异步加载，运行在`浏览器端`。\n`AMD` 推崇依赖前置，定义模块的时候就需要申明需要依赖的模块 [典型代表 `require.js`]\n`CMD` 推崇依赖就近，需要用到的时候才去require相关模块 [典型代表 `sea.js`]\n\n### 3. stopPropagation() 以及 stopImmediatePropagation()\n\n`stopImmediatePropagation` 用于阻止冒泡，在执行完当前元素上的事件处理程序之后，停止当前元素以及后续元素的事件处理程序\n\n`stopPropagation` 同样也是用于阻止冒泡，在执行完绑定到当前元素上的所有事件处理程序之后，停止后续元素的事件处理程序\n\n同一个元素用`on`绑定多次同样事件时（例如click），最后一次会覆盖之前的事件，不会执行前面。而用`addEventListener`绑定多次同样事件时，都会执行。\n\n```html\n<div id=\"large\" style=\"width: 150px; height: 150px; background: orange\">\n    <div id=\"middle\" style=\"width: 100px; height: 100px; background: cadetblue\">\n        <div id=\"small\" style=\"width: 50px; height:50px; background: coral\"></div>\n    </div>\n</div>\n```\n\n```js\n(function(){\n    var large = document.getElementById('large')\n    var middle = document.getElementById('middle')\n    var small = document.getElementById('small')\n\n    large.addEventListener('click', function(){\n        alert('large div is clicked')\n    })\n    middle.addEventListener('click', function(){\n        alert('middle div is clicked')\n    })\n\n    // 第一种情况： 点击small时，会依次弹出三个窗口，这是因为向上冒泡产生的\n    small.addEventListener('click', function(){\n     alert('small div is clicked')\n    })\n\n    // 第二种情况： 点击small时，会弹出四个窗口\n    // small.addEventListener('click', function(){\n    //  alert('small-1 is clicked')\n    // })\n    // small.addEventListener('click', function(){\n    //  alert('small-2 is clicked')\n    // })\n\n    // 第三种情况，添加stopPropagation： 点击small时，会弹出两个窗口\n    // small-1 is clicked    small-2 is clicked\n    // small.addEventListener('click', function(event){\n    //  alert('small-1 is clicked')\n    //  event.stopPropagation()\n    // })\n    // small.addEventListener('click', function(){\n    //  alert('small-2 is clicked')\n    // })\n\n    // 第四种情况，添加stopImmediatePropagation： 点击small时，会弹出一个窗口\n    // small-1 is clicked\n    // 能够很明显看到与stopPropagation的区别，调用stopImmediatePropagation之后，第二个定义的click事件也被取消而不被执行了。\n    // small.addEventListener('click', function(event){\n    //     alert('small-1 is clicked')\n    //     event.stopImmediatePropagation()\n    // })\n    // small.addEventListener('click', function(){\n    //     alert('small-2 is clicked')\n    // })\n})()\n```\n\n<div id=\"large\" style=\"box-sizing: border-box; width: 150px; height: 150px; background: orange; cursor: pointer;\"><!-- \n    --><div id=\"middle\" style=\"box-sizing: border-box; width: 100px; height: 100px; background: cadetblue\"><!-- \n        --><div id=\"small\" style=\"box-sizing: border-box; width: 50px; height:50px; background: coral\"></div><!-- \n    --></div>\n</div>\n\n<script>\n    (function(){\n        var large = document.getElementById('large')\n        var middle = document.getElementById('middle')\n        var small = document.getElementById('small')\n\n        large.addEventListener('click', function(){\n            alert('large div is clicked')\n        })\n        middle.addEventListener('click', function(){\n            alert('middle div is clicked')\n        })\n\n        // 第一种情况： 点击small时，会依次弹出三个窗口，这是因为向上冒泡产生的\n        small.addEventListener('click', function(){\n        alert('small div is clicked')\n        })\n\n        // 第二种情况： 点击small时，会弹出四个窗口\n        // small.addEventListener('click', function(){\n        //  alert('small-1 is clicked')\n        // })\n        // small.addEventListener('click', function(){\n        //  alert('small-2 is clicked')\n        // })\n\n        // 第三种情况，添加stopPropagation： 点击small时，会弹出两个窗口\n        // small-1 is clicked    small-2 is clicked\n        // small.addEventListener('click', function(event){\n        //  alert('small-1 is clicked')\n        //  event.stopPropagation()\n        // })\n        // small.addEventListener('click', function(){\n        //  alert('small-2 is clicked')\n        // })\n\n        // 第四种情况，添加stopImmediatePropagation： 点击small时，会弹出一个窗口\n        // small-1 is clicked\n        // 能够很明显看到与stopPropagation的区别，调用stopImmediatePropagation之后，第二个定义的click事件也被取消而不被执行了。\n        // small.addEventListener('click', function(event){\n        //     alert('small-1 is clicked')\n        //     event.stopImmediatePropagation()\n        // })\n        // small.addEventListener('click', function(){\n        //     alert('small-2 is clicked')\n        // })\n    })()\n</script>\n\n### 4. js事件中的三个阶段\n\n三个阶段分别为`捕获阶段` `目标阶段` `冒泡阶段`\nelement.addEventListener(type, fn[, useCapture])\nuseCapture - 指定事件句柄在捕获阶段或者冒泡阶段执行， 默认false(事件句柄在冒泡阶段执行)，设置为true(事件句柄在捕获阶段执行)。\n\n- 捕获阶段\n- 目标阶段\n- 冒泡阶段\n\n### 5. 常见的前端性能优化手段\n\n- css sprites（雪碧图）\n- 避免使用css表达式\n- css样式表放在页面顶部，脚本放在页面底部\n- 内联图片和脚本使用data:URL（base64编码）模式直接包含在页面中，无需进行http请求，缺点：ie不支持，图片太大不适用，使用base64会增加页面体积，浏览器不会缓存\n- 使用内容分发网络CDN\n- 开启GZIP压缩，启用负载均衡\n- 开启keep alive减少与服务器链接次数 缺点：使服务器负载增大，也更容易遭受攻击\n- 精简压缩代码 uglifyjs\n- 避免重定向 常见的301 302\n- 配置e-tags 和 expires头 使用缓存\n- 按需加载资源\n\n### 6. parseInt() 以及 parseFloat()\n\n> parseInt(string[, radix])\n\n- string如果以‘ox’或者'oX'开头，将以16进制进行解析\n- radix 要解析的数字基数，介于2-36之间\n- 如果不给值或者为0，则按照基数为10来计算\n- 如果小于2或者大于36，则返回NaN\n- 开头和结尾的空格是允许的\n- 如果字符串的第一个字符不能转换成对应的数字，将返回NaN\n\n```js\nparseInt('0x12')  // 17\nparseInt('0x12', 2)  // 0  => parseInt('0', 2)\nparseInt('0x12', 10)  // 0  => parseInt('0', 16)\nparseInt('8')  // => parseInt('8', 0) => parseInt('8', 10)  // 8\nparseInt('8', 1)  // NaN\nparseInt('8', 37)  // NaN\nparseInt('a23')  // NaN\nparseInt('2a3')  // 2\nparseInt(' 23')  // 23\nparseInt(' 23 ')  // 23\nparseInt(' 2 3 ')  // 2\nparseInt('11', 2)  // 3\nparseInt(11, 2)  // 3\nparseInt('1100', 2)  // 12\nparseInt('21', 2)  // NaN 2超出了2进制最大值1，并且是第一个字符\nparseInt('12', 2)  // 1 2同样超出了2进制最大值1，但是第一个字符可以转换成二进制\nparseInt('66', 8) // 6*8^1 + 6*8^0 = 48 + 6 = 54\nparseInt('12', 16) // 1*16^1 + 2*16^0 = 16 + 2 = 18\n[0, 1, 2, 3].map(parseInt) //  [parseInt(0, 0), parseInt(1, 1), parseInt(2, 2), parseInt(3, 3)] => [0, NaN, NaN, NaN]\n```\n\nparseFloat()\n\n> parseInt(string[, radix])  这里语法待修改\n\n- 开头和结尾的空格是允许的\n- 如果字符串的第一个字符不能转换成对应的数字，将返回NaN\n- 如果在解析过程中遇到了正负号（+ 或 -）、数字 (0-9)、小数点，或者科学记数法中的指数（e 或 E）以外的字符，则它会忽略该字符以及之后的所有字符\n\n### 7. charAt()、charCodeAt() 和 fromCharCode()\n\n- charAt()\n\n   - String.charAt(index)\n   - 返回字符串中指定位置的字符, 索引值 index < 0 或超出了范围则返回一个空字符串\n\n ```js\n'abc'.charAt(1)  // 'b'\n'abc'.charAt(-2)  // ''\n'abc'.charAt(5)  // ''\n```\n\n- charCodeAt()\n\n   - String.charCodeAt(index)\n   - 返回字符串中指定位置的字符的 unicode 数值 [0, 1114111]\n   - 开头的 128 个 unicode 编码单元和 ASCII 字符编码一样\n   - 索引值 index < 0 或超出了范围则返回一个 NaN, 大于 255 的是中文\n\n```js\n'AabcdD'.charCodeAt(0)  // 65\n'AabcdD'.charCodeAt(1)  // 97\n'AabcdD'.charCodeAt(-1)  // NaN\n'AabcdD'.charCodeAt(8)  // NaN\n'中国'.charCodeAt(1)  // 22269\n```\n\n- fromCharCode()\n\n   - String.fromCharCode(num1, num2, num3, ...)\n   - 根据指定的 unicode 编码中的序号值来返回字符串\n\n```js\nString.fromCharCode(65, 66, 97)  // 'ABa'\n```\n\n### 8. 原生ajax\n\n```js\nvar xhr = new XMLHttpRequest()\n//  请求方式  请求路径  是否异步发送请求\nxhr.open('GET', 'http://www.jnathan.cn/jnathan/effect/authKit.js', true)\nxhr.send('hello world') \n\nxhr.onreadystatechange = function () {\n    if (xhr.readyState == 4 && xhr.status == 200) {\n        // alert(xhr.responseText)\n    }\n}\n```\n\n### 9. 有一个长度为n的数组，假定全部为整数，其中有且仅有一个数出现了奇数次，其他的数字都出现偶数次，找出出现了奇数次的那个数字。\n\n> 时间复杂度为O(n) 空间复杂度O(1)\n> 利用了`n ^ n = 0`, `n ^ 0 = n`两个等式的原理。\n> 循环对数组数字进行异或计算，即  `0 ^ arr[0] ^ arr[1] ^ ... ^ arr[n - 1]` ，异或计算满足交换律原则，如果数组元素出现了相同的情况，可以移动到一起先进行计算，如果出现了`偶数次`，其结果为  `0`，出现了奇数次的数其结果为该数字，所以表达式最后得出来的结果即为数组所有`出现了奇数次元素`的`异或操作`的结果。比如：[1,2,2,3,4,4]进行异或操作得到的结果是 `1 ^ 3 = 2` ，特殊情况下（只有一个数字出现了`奇数次`），那么最后的结果就是出现了`奇数次`的那个数字！！\n\n```js\nfunction fn7 (arr) {\n    var oddTimesNumber = 0\n    for (let i in arr) {\n        oddTimesNumber = oddTimesNumber ^ arr[i]\n    }\n\n    return oddTimesNumber\n}\nfn7([1,2,3,4,5,4,4,3,2,1,1,1])  // 3\n```\n\n### 10. 递归求1-10的和\n\n```js\nfunction getSum(nextArr, curSum = 0) {\n\n    var sum = nextArr[0] + curSum\n\n    if (nextArr.length == 1) {\n        return sum\n    } else {\n        return getSum(nextArr.slice(1), sum)\n    }\n\n}\ngetSum([1,2,3,4,5,6,7,8,9,10])\n```\n\n### 11. 去除数组重复元素\n\n- 直接双层循环比较\n\n```js\nfunction unique (arr) {\n\n    var result = []\n    var isRepeat\n\n    for (var i = 0; i < arr.length; i++) {\n\n        isRepeat = false  // 默认不重复，进行push操作，当判断重复时不操作\n        for (var j = 0; j < result.length; j++) {\n            if (arr[i] === result[j]) {\n                isRepeat = true\n                break\n            }\n        }\n\n        if (!isRepeat) {\n            result.push(arr[i])\n        }\n    }\n\n    return result\n\n}\nunique([1,1,2,3,4])\n```\n\n- 利用`indexOf()`， 但是`indexOf`会一直循环到找到目标为止，浪费了时间\n\n```js\nfunction unique (arr) {\n\n    var result = []\n\n    for (var i = 0; i < arr.length; i++) {\n        if (result.indexOf(arr[i]) === -1) {\n            result.push(arr[i])\n        }\n    }\n\n    return result\n}\nunique([1,1,2,3,4])\n```\n\n- 最快的方法 把已经出现过的元素通过下标的形式存入一个`Object`内。下标的引用的实现原理利用的是哈希算法，要比用`indexOf()`搜索数组快的多。由于多了一个`hash`表，占用的内存会更多，空间换时间做法\n\n```js\nfunction unique (arr) {\n    // hashObj为hash表，result为临时数组\n    var hashObj = {}, result = []\n    for (var i = 0; i < arr.length; i++) {\n        // 如果hash表中没有当前项\n        if (!hashObj[arr[i]]) {\n            // 存入hash表\n            hashObj[arr[i]] = true\n            // 把当前数组的当前项push到临时数组里面\n            result.push(arr[i])\n        }\n    }\n    return result\n}\n```\n\n- 折衷方法 时间上比`indexOf`快，比`hash`表的方式要慢。先按照从小到大的顺序排序，然后比较相邻的两个值大小\n  \n```js\nfunction unique (arr) {\n    arr.sort()\n    var result = [arr[0]]\n    for (var i = 1; i < arr.length; i++) {\n        if (arr[i] !== result[result.length - 1]) {\n            result.push(arr[i])\n        }\n    }\n    return result\n}\n```\n\n- `es6`的`filter()`方法\n\n```js\nfunction unique (arr) {\n    return arr.filter( (value, index) => { \n        arr.indexOf(value) === index\n        console.log(arr.indexOf(value), index)\n        // 0 0\n        // 0 1\n        // 2 2\n        // 3 3\n        // 4 4\n        // 5 5\n        // 2 6\n    })\n}\nunique([1,1,2,3,4,5,2])\n```\n\n### 12. jquery  里面的  $(document).ready(function(){})  和  window.onload  的区别\n\n- `window.onload`需要等到页面中包括图片在内的元素全部加载完毕才能执行；`ready()`是DOM元素绘制结束之后就执行，不用等到加载完毕。\n- `window.onload`如果定义了多次，则只会执行一个，后者会覆盖前者； `ready()`可以同时编写多个，并且都会执行。\n- `window.onload`没有简化写法；`$(document).ready(function(){})`可以简化成`$(function(){})`。\n- 补充：`$(window).load(function(){})`和 `window.onload()`效果一致。\n\n### 13. 渐进增强与优雅降级\n\n- 渐进增强 一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再对高级浏览器进行效果、交互的优化，达到更好的体验。\n- 优雅降级 一开始就构建站点的完整功能，然后针对浏览器进行测试和修复。比如一开始使用`CSS3`的特性构建了一个应用，然后逐步针对各大低级浏览器进行`hack`使其可以在低版本浏览器上正常浏览。\n\n### 14. cookies、localStorage和sessionStorage的区别\n\n- cookies存在于客户端，始终会在http请求中通过  Request Headers  Cookie头携带，即使当前请求不需要使用到cookie；大小一般在4KB，所以只适合保存很小的数据，比如会话标识；cookies在没有设置过期时间（expires）的时候，默认在关闭浏览器之后就会被清除，在有设置过期时间的时候，会一直持续到过期时间有效（即使关闭当前窗口或者关闭浏览器）。\n- localStorage 和 sessionStorage不会发送数据到服务端，仅在本地保存；也有大小的限制，但一般在5M左右；localStorage一直有效，除非手动清除； sessionStorage只在浏览器关闭之前有效。\n\n另外： localStorage 和 cookies 在同源的浏览器窗口之间是共享的，sessionStorage不共享，因此至少有以下两种方法实现不同页面间的通信：\n\n- 利用localStorage\n\n```js\n// A页面\n$('#btn').click(function(){\n    localStorage.setItem('name', 'Jnathan')\n})\n\n// B页面\nwindow.addEventListener('storage', function(event){\n    console.log(event.key + '=' + event.newValue)\n})\n```\n\n- 利用cookie + setInterval()\n\n```js\n// A页面\n$('#btn').click(function () {\n    document.cookie = \"name=\" + 'Jnathan'\n})\n\n// B页面\nfunction getKey(key) {  \n    return JSON.parse(\"{\\\"\"+ document.cookie.replace(/;\\s+/gim,\"\\\",\\\"\").replace(/=/gim, \"\\\":\\\"\") +\"\\\"}\")[key];  \n}\nsetInterval(function(){\n    console.log('name:', getKey('name'))\n}, 1000)\n```\n\n### 15. new 操作符的四个步骤\n\n```js\nvar Fn = function() {}\nvar fn = new Fn()\n```\n\n- 创建一个`空对象`\n\n```js\nvar obj = new Object()\n```\n\n- 设置`obj`的`原型`，将`obj`的`原型`指向`Fn`的`原型链`\n\n```js\nobj.__proto__ = Fn.prototype\n```\n\n- 将`Fn`中的`this`指向`obj`,并执行`Fn`\n\n```js\nvar result = Fn.call(obj)\n```\n\n- 判断`Fn`的`返回值类型`。如果是`引用类型，则返回这个`引用类型的对象`；如果是`值类型`，则返回`obj`\n\n```js\nif (typeof result == 'object') {  // 引用类型\n    fn = result\n} else { // 值类型\n    fn = obj\n}\n```\n\n### 16. 构造函数实现继承的几种方式\n\n```js\nfunction Animal () {\n    this.species = '动物'\n}\nfunction Cat (name, color) {\n    this.name = name\n    this.color = color\n}\n```\n\n使猫继承动物：\n\n- call apply\n\n```js\nfunction Cat (name, color) {\n    Animal.apply(this, arguments)\n    this.name = name\n    this.color = color\n}\n\nvar cat1 = new Cat('name1', 'color1')\nalert(cat1.species) //  动物\n```\n\n- prototype（其一）\n\n```js\nfunction Cat (name, color) {\n    Animal.apply(this, arguments)\n    this.name = name\n    this.color = color\n}\n\nvar cat1 = new Cat('name1', 'color1')\nalert(cat1.species) //  动物\n```\n\n- prototype（其二）\n\n```js\nfunction Animal () {}\nAnimal.prototype.species = '动物'\n\nCat.prototype = Animal.prototype\nCat.prototype.constructor = Cat\n\nvar cat3 = new Cat('name3', 'color3')\nalert(cat3.species) // 动物   \n```\n\n- 利用空对象作为中介 上面那种方法的缺点：Cat.prototype和Animal.prototype现在指向了同一个对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。\n\n```js\nvar Fn = function () {}\nFn.prototype = Animal.prototype\nCat.prototype = new Fn()\nCat.prototype.construvtor = Cat\n```\n\n将其封装成一个函数\n\n```js\nfunction extend (Child, Parent) {\n    var Fn = function () {}\n    Fn.prototype = Parent.prototype\n    Child.prototype = new Fn()\n    Child.prototype.constructor = Child\n}\n\nextend(Cat, Animal)\nvar cat4 = new Cat('name4', 'color4')\nalert(cat4.species) // 动物\n```\n\n- 拷贝继承\n\n```js\nfunction Animal () {}\nAnimal.species = '动物'\n\nfunction extend2 () {\n    var C = Child.prototype\n    var P = Parent.prototype\n\n    for (var i in P) {\n        C[i] = P[i]\n    }\n}\n\nextend2(Cat, Animal)\nvar cat5 = new Cat('name5', 'color5')\nalert(cat5.species) // 动物\n```\n\n### 17. 非构造函数的继承\n\n```js\nvar Chinese = {\n    nation: '中国'\n}\nvar Doctor = {\n    career: '医生'\n}\n```\n\n- 浅拷贝\n\n```js\nfunction shallowCopy (Parent) {\n    var Child = {}\n\n    for (var i in Parent) {\n        Child[i] = Parent[i]\n    }\n\n    return Child\n}\n\nvar doctor1 = shallowCopy(Chinese)\nalert(doctor1.nation) // 中国\n```\n\n- 深拷贝\n\n```js\nfunction deepCopy (Child, Parent) {\n    var Child = Child || {}\n\n    for (var i in Parent) {\n        if (typeof Parent[i] == 'object') {\n            Child[i] = (Parent[i].constructor === Array) ? [] : {}\n            deepCopy(Child[i], Parent[i])\n        } else {\n            Child[i] = Parent[i]\n        }\n    }\n\n    return Child\n}\n\nvar doctor2 = deepCopy(Doctor, Chinese)\nalert(doctor.nation) // 中国\n```\n\n### 18. [参考链接](http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html)","slug":"multiple-diary","published":1,"updated":"2019-06-06T08:58:27.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyo49r69000pu16tunzp3nmo","content":"<h3 id=\"1-setTimeout中方法体添加引号与不添加引号的区别\"><a href=\"#1-setTimeout中方法体添加引号与不添加引号的区别\" class=\"headerlink\" title=\"1. setTimeout中方法体添加引号与不添加引号的区别\"></a>1. setTimeout中方法体添加引号与不添加引号的区别</h3><blockquote>\n<p><code>添加引号</code>的情况，调用的函数是<code>全局范围</code>的。<code>未添加引号</code>的情况，调用的是<code>局部范围</code>的。</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> testFn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(<span class=\"string\">'hello from global'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> testFn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">'hello fron inner'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    setTimeout(<span class=\"string\">'testFn()'</span>, <span class=\"number\">1000</span>)  <span class=\"comment\">// hello form global</span></span><br><span class=\"line\">    setTimeout(testFn, <span class=\"number\">1000</span>)  <span class=\"comment\">// hello from inner</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在fn()函数内部没有定义testFn的时候，会向上寻找testFn，这里找到了全局函数，执行效果：</span></span><br><span class=\"line\">    setTimeout(testFn, <span class=\"number\">1000</span>)  <span class=\"comment\">// hello from global</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn()</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-AMD-CMD规范-common-js\"><a href=\"#2-AMD-CMD规范-common-js\" class=\"headerlink\" title=\"2. AMD/CMD规范 common.js\"></a>2. AMD/CMD规范 common.js</h3><p><code>common.js</code> 运行在<code>服务器端</code>，因为模块就在磁盘上，所以加载时间几乎可以忽略不计，属于同步加载。 [典型代表 <code>node.js</code>]<br><code>AMD</code>与<code>CMD</code>都属于异步加载，运行在<code>浏览器端</code>。<br><code>AMD</code> 推崇依赖前置，定义模块的时候就需要申明需要依赖的模块 [典型代表 <code>require.js</code>]<br><code>CMD</code> 推崇依赖就近，需要用到的时候才去require相关模块 [典型代表 <code>sea.js</code>]</p>\n<h3 id=\"3-stopPropagation-以及-stopImmediatePropagation\"><a href=\"#3-stopPropagation-以及-stopImmediatePropagation\" class=\"headerlink\" title=\"3. stopPropagation() 以及 stopImmediatePropagation()\"></a>3. stopPropagation() 以及 stopImmediatePropagation()</h3><p><code>stopImmediatePropagation</code> 用于阻止冒泡，在执行完当前元素上的事件处理程序之后，停止当前元素以及后续元素的事件处理程序</p>\n<p><code>stopPropagation</code> 同样也是用于阻止冒泡，在执行完绑定到当前元素上的所有事件处理程序之后，停止后续元素的事件处理程序</p>\n<p>同一个元素用<code>on</code>绑定多次同样事件时（例如click），最后一次会覆盖之前的事件，不会执行前面。而用<code>addEventListener</code>绑定多次同样事件时，都会执行。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"large\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 150px; height: 150px; background: orange\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"middle\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100px; height: 100px; background: cadetblue\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"small\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 50px; height:50px; background: coral\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> large = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'large'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> middle = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'middle'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> small = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'small'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    large.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">'large div is clicked'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    middle.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">'middle div is clicked'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第一种情况： 点击small时，会依次弹出三个窗口，这是因为向上冒泡产生的</span></span><br><span class=\"line\">    small.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     alert(<span class=\"string\">'small div is clicked'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第二种情况： 点击small时，会弹出四个窗口</span></span><br><span class=\"line\">    <span class=\"comment\">// small.addEventListener('click', function()&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//  alert('small-1 is clicked')</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">    <span class=\"comment\">// small.addEventListener('click', function()&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//  alert('small-2 is clicked')</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第三种情况，添加stopPropagation： 点击small时，会弹出两个窗口</span></span><br><span class=\"line\">    <span class=\"comment\">// small-1 is clicked    small-2 is clicked</span></span><br><span class=\"line\">    <span class=\"comment\">// small.addEventListener('click', function(event)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//  alert('small-1 is clicked')</span></span><br><span class=\"line\">    <span class=\"comment\">//  event.stopPropagation()</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">    <span class=\"comment\">// small.addEventListener('click', function()&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//  alert('small-2 is clicked')</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第四种情况，添加stopImmediatePropagation： 点击small时，会弹出一个窗口</span></span><br><span class=\"line\">    <span class=\"comment\">// small-1 is clicked</span></span><br><span class=\"line\">    <span class=\"comment\">// 能够很明显看到与stopPropagation的区别，调用stopImmediatePropagation之后，第二个定义的click事件也被取消而不被执行了。</span></span><br><span class=\"line\">    <span class=\"comment\">// small.addEventListener('click', function(event)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     alert('small-1 is clicked')</span></span><br><span class=\"line\">    <span class=\"comment\">//     event.stopImmediatePropagation()</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">    <span class=\"comment\">// small.addEventListener('click', function()&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     alert('small-2 is clicked')</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<div id=\"large\" style=\"box-sizing: border-box; width: 150px; height: 150px; background: orange; cursor: pointer;\"><!-- \n    --><div id=\"middle\" style=\"box-sizing: border-box; width: 100px; height: 100px; background: cadetblue\"><!-- \n        --><div id=\"small\" style=\"box-sizing: border-box; width: 50px; height:50px; background: coral\"></div><!-- \n    --></div><br></div>\n\n<script>\n    (function(){\n        var large = document.getElementById('large')\n        var middle = document.getElementById('middle')\n        var small = document.getElementById('small')\n\n        large.addEventListener('click', function(){\n            alert('large div is clicked')\n        })\n        middle.addEventListener('click', function(){\n            alert('middle div is clicked')\n        })\n\n        // 第一种情况： 点击small时，会依次弹出三个窗口，这是因为向上冒泡产生的\n        small.addEventListener('click', function(){\n        alert('small div is clicked')\n        })\n\n        // 第二种情况： 点击small时，会弹出四个窗口\n        // small.addEventListener('click', function(){\n        //  alert('small-1 is clicked')\n        // })\n        // small.addEventListener('click', function(){\n        //  alert('small-2 is clicked')\n        // })\n\n        // 第三种情况，添加stopPropagation： 点击small时，会弹出两个窗口\n        // small-1 is clicked    small-2 is clicked\n        // small.addEventListener('click', function(event){\n        //  alert('small-1 is clicked')\n        //  event.stopPropagation()\n        // })\n        // small.addEventListener('click', function(){\n        //  alert('small-2 is clicked')\n        // })\n\n        // 第四种情况，添加stopImmediatePropagation： 点击small时，会弹出一个窗口\n        // small-1 is clicked\n        // 能够很明显看到与stopPropagation的区别，调用stopImmediatePropagation之后，第二个定义的click事件也被取消而不被执行了。\n        // small.addEventListener('click', function(event){\n        //     alert('small-1 is clicked')\n        //     event.stopImmediatePropagation()\n        // })\n        // small.addEventListener('click', function(){\n        //     alert('small-2 is clicked')\n        // })\n    })()\n</script>\n\n<h3 id=\"4-js事件中的三个阶段\"><a href=\"#4-js事件中的三个阶段\" class=\"headerlink\" title=\"4. js事件中的三个阶段\"></a>4. js事件中的三个阶段</h3><p>三个阶段分别为<code>捕获阶段</code> <code>目标阶段</code> <code>冒泡阶段</code><br>element.addEventListener(type, fn[, useCapture])<br>useCapture - 指定事件句柄在捕获阶段或者冒泡阶段执行， 默认false(事件句柄在冒泡阶段执行)，设置为true(事件句柄在捕获阶段执行)。</p>\n<ul>\n<li>捕获阶段</li>\n<li>目标阶段</li>\n<li>冒泡阶段</li>\n</ul>\n<h3 id=\"5-常见的前端性能优化手段\"><a href=\"#5-常见的前端性能优化手段\" class=\"headerlink\" title=\"5. 常见的前端性能优化手段\"></a>5. 常见的前端性能优化手段</h3><ul>\n<li>css sprites（雪碧图）</li>\n<li>避免使用css表达式</li>\n<li>css样式表放在页面顶部，脚本放在页面底部</li>\n<li>内联图片和脚本使用data:URL（base64编码）模式直接包含在页面中，无需进行http请求，缺点：ie不支持，图片太大不适用，使用base64会增加页面体积，浏览器不会缓存</li>\n<li>使用内容分发网络CDN</li>\n<li>开启GZIP压缩，启用负载均衡</li>\n<li>开启keep alive减少与服务器链接次数 缺点：使服务器负载增大，也更容易遭受攻击</li>\n<li>精简压缩代码 uglifyjs</li>\n<li>避免重定向 常见的301 302</li>\n<li>配置e-tags 和 expires头 使用缓存</li>\n<li>按需加载资源</li>\n</ul>\n<h3 id=\"6-parseInt-以及-parseFloat\"><a href=\"#6-parseInt-以及-parseFloat\" class=\"headerlink\" title=\"6. parseInt() 以及 parseFloat()\"></a>6. parseInt() 以及 parseFloat()</h3><blockquote>\n<p>parseInt(string[, radix])</p>\n</blockquote>\n<ul>\n<li>string如果以‘ox’或者’oX’开头，将以16进制进行解析</li>\n<li>radix 要解析的数字基数，介于2-36之间</li>\n<li>如果不给值或者为0，则按照基数为10来计算</li>\n<li>如果小于2或者大于36，则返回NaN</li>\n<li>开头和结尾的空格是允许的</li>\n<li>如果字符串的第一个字符不能转换成对应的数字，将返回NaN</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'0x12'</span>)  <span class=\"comment\">// 17</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'0x12'</span>, <span class=\"number\">2</span>)  <span class=\"comment\">// 0  =&gt; parseInt('0', 2)</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'0x12'</span>, <span class=\"number\">10</span>)  <span class=\"comment\">// 0  =&gt; parseInt('0', 16)</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'8'</span>)  <span class=\"comment\">// =&gt; parseInt('8', 0) =&gt; parseInt('8', 10)  // 8</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'8'</span>, <span class=\"number\">1</span>)  <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'8'</span>, <span class=\"number\">37</span>)  <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'a23'</span>)  <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'2a3'</span>)  <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">' 23'</span>)  <span class=\"comment\">// 23</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">' 23 '</span>)  <span class=\"comment\">// 23</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">' 2 3 '</span>)  <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'11'</span>, <span class=\"number\">2</span>)  <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"number\">11</span>, <span class=\"number\">2</span>)  <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'1100'</span>, <span class=\"number\">2</span>)  <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'21'</span>, <span class=\"number\">2</span>)  <span class=\"comment\">// NaN 2超出了2进制最大值1，并且是第一个字符</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'12'</span>, <span class=\"number\">2</span>)  <span class=\"comment\">// 1 2同样超出了2进制最大值1，但是第一个字符可以转换成二进制</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'66'</span>, <span class=\"number\">8</span>) <span class=\"comment\">// 6*8^1 + 6*8^0 = 48 + 6 = 54</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'12'</span>, <span class=\"number\">16</span>) <span class=\"comment\">// 1*16^1 + 2*16^0 = 16 + 2 = 18</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(<span class=\"built_in\">parseInt</span>) <span class=\"comment\">//  [parseInt(0, 0), parseInt(1, 1), parseInt(2, 2), parseInt(3, 3)] =&gt; [0, NaN, NaN, NaN]</span></span><br></pre></td></tr></table></figure>\n<p>parseFloat()</p>\n<blockquote>\n<p>parseInt(string[, radix])  这里语法待修改</p>\n</blockquote>\n<ul>\n<li>开头和结尾的空格是允许的</li>\n<li>如果字符串的第一个字符不能转换成对应的数字，将返回NaN</li>\n<li>如果在解析过程中遇到了正负号（+ 或 -）、数字 (0-9)、小数点，或者科学记数法中的指数（e 或 E）以外的字符，则它会忽略该字符以及之后的所有字符</li>\n</ul>\n<h3 id=\"7-charAt-、charCodeAt-和-fromCharCode\"><a href=\"#7-charAt-、charCodeAt-和-fromCharCode\" class=\"headerlink\" title=\"7. charAt()、charCodeAt() 和 fromCharCode()\"></a>7. charAt()、charCodeAt() 和 fromCharCode()</h3><ul>\n<li><p>charAt()</p>\n<ul>\n<li>String.charAt(index)</li>\n<li>返回字符串中指定位置的字符, 索引值 index &lt; 0 或超出了范围则返回一个空字符串</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'abc'</span>.charAt(<span class=\"number\">1</span>)  <span class=\"comment\">// 'b'</span></span><br><span class=\"line\"><span class=\"string\">'abc'</span>.charAt(<span class=\"number\">-2</span>)  <span class=\"comment\">// ''</span></span><br><span class=\"line\"><span class=\"string\">'abc'</span>.charAt(<span class=\"number\">5</span>)  <span class=\"comment\">// ''</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>charCodeAt()</p>\n<ul>\n<li>String.charCodeAt(index)</li>\n<li>返回字符串中指定位置的字符的 unicode 数值 [0, 1114111]</li>\n<li>开头的 128 个 unicode 编码单元和 ASCII 字符编码一样</li>\n<li>索引值 index &lt; 0 或超出了范围则返回一个 NaN, 大于 255 的是中文</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'AabcdD'</span>.charCodeAt(<span class=\"number\">0</span>)  <span class=\"comment\">// 65</span></span><br><span class=\"line\"><span class=\"string\">'AabcdD'</span>.charCodeAt(<span class=\"number\">1</span>)  <span class=\"comment\">// 97</span></span><br><span class=\"line\"><span class=\"string\">'AabcdD'</span>.charCodeAt(<span class=\"number\">-1</span>)  <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"string\">'AabcdD'</span>.charCodeAt(<span class=\"number\">8</span>)  <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"string\">'中国'</span>.charCodeAt(<span class=\"number\">1</span>)  <span class=\"comment\">// 22269</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>fromCharCode()</p>\n<ul>\n<li>String.fromCharCode(num1, num2, num3, …)</li>\n<li>根据指定的 unicode 编码中的序号值来返回字符串</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">65</span>, <span class=\"number\">66</span>, <span class=\"number\">97</span>)  <span class=\"comment\">// 'ABa'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8-原生ajax\"><a href=\"#8-原生ajax\" class=\"headerlink\" title=\"8. 原生ajax\"></a>8. 原生ajax</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\"><span class=\"comment\">//  请求方式  请求路径  是否异步发送请求</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'http://www.jnathan.cn/jnathan/effect/authKit.js'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">xhr.send(<span class=\"string\">'hello world'</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span> &amp;&amp; xhr.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// alert(xhr.responseText)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-有一个长度为n的数组，假定全部为整数，其中有且仅有一个数出现了奇数次，其他的数字都出现偶数次，找出出现了奇数次的那个数字。\"><a href=\"#9-有一个长度为n的数组，假定全部为整数，其中有且仅有一个数出现了奇数次，其他的数字都出现偶数次，找出出现了奇数次的那个数字。\" class=\"headerlink\" title=\"9. 有一个长度为n的数组，假定全部为整数，其中有且仅有一个数出现了奇数次，其他的数字都出现偶数次，找出出现了奇数次的那个数字。\"></a>9. 有一个长度为n的数组，假定全部为整数，其中有且仅有一个数出现了奇数次，其他的数字都出现偶数次，找出出现了奇数次的那个数字。</h3><blockquote>\n<p>时间复杂度为O(n) 空间复杂度O(1)<br>利用了<code>n ^ n = 0</code>, <code>n ^ 0 = n</code>两个等式的原理。<br>循环对数组数字进行异或计算，即  <code>0 ^ arr[0] ^ arr[1] ^ ... ^ arr[n - 1]</code> ，异或计算满足交换律原则，如果数组元素出现了相同的情况，可以移动到一起先进行计算，如果出现了<code>偶数次</code>，其结果为  <code>0</code>，出现了奇数次的数其结果为该数字，所以表达式最后得出来的结果即为数组所有<code>出现了奇数次元素</code>的<code>异或操作</code>的结果。比如：[1,2,2,3,4,4]进行异或操作得到的结果是 <code>1 ^ 3 = 2</code> ，特殊情况下（只有一个数字出现了<code>奇数次</code>），那么最后的结果就是出现了<code>奇数次</code>的那个数字！！</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn7</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oddTimesNumber = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">        oddTimesNumber = oddTimesNumber ^ arr[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> oddTimesNumber</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn7([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>])  <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"10-递归求1-10的和\"><a href=\"#10-递归求1-10的和\" class=\"headerlink\" title=\"10. 递归求1-10的和\"></a>10. 递归求1-10的和</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span>(<span class=\"params\">nextArr, curSum = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = nextArr[<span class=\"number\">0</span>] + curSum</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextArr.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getSum(nextArr.slice(<span class=\"number\">1</span>), sum)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getSum([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-去除数组重复元素\"><a href=\"#11-去除数组重复元素\" class=\"headerlink\" title=\"11. 去除数组重复元素\"></a>11. 去除数组重复元素</h3><ul>\n<li>直接双层循环比较</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = []</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isRepeat</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        isRepeat = <span class=\"literal\">false</span>  <span class=\"comment\">// 默认不重复，进行push操作，当判断重复时不操作</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; result.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] === result[j]) &#123;</span><br><span class=\"line\">                isRepeat = <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isRepeat) &#123;</span><br><span class=\"line\">            result.push(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">unique([<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>利用<code>indexOf()</code>， 但是<code>indexOf</code>会一直循环到找到目标为止，浪费了时间</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result.indexOf(arr[i]) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            result.push(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">unique([<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>最快的方法 把已经出现过的元素通过下标的形式存入一个<code>Object</code>内。下标的引用的实现原理利用的是哈希算法，要比用<code>indexOf()</code>搜索数组快的多。由于多了一个<code>hash</code>表，占用的内存会更多，空间换时间做法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// hashObj为hash表，result为临时数组</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> hashObj = &#123;&#125;, result = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果hash表中没有当前项</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hashObj[arr[i]]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 存入hash表</span></span><br><span class=\"line\">            hashObj[arr[i]] = <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"comment\">// 把当前数组的当前项push到临时数组里面</span></span><br><span class=\"line\">            result.push(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>折衷方法 时间上比<code>indexOf</code>快，比<code>hash</code>表的方式要慢。先按照从小到大的顺序排序，然后比较相邻的两个值大小</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    arr.sort()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [arr[<span class=\"number\">0</span>]]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] !== result[result.length - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            result.push(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>es6</code>的<code>filter()</code>方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.filter( <span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> &#123; </span><br><span class=\"line\">        arr.indexOf(value) === index</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(arr.indexOf(value), index)</span><br><span class=\"line\">        <span class=\"comment\">// 0 0</span></span><br><span class=\"line\">        <span class=\"comment\">// 0 1</span></span><br><span class=\"line\">        <span class=\"comment\">// 2 2</span></span><br><span class=\"line\">        <span class=\"comment\">// 3 3</span></span><br><span class=\"line\">        <span class=\"comment\">// 4 4</span></span><br><span class=\"line\">        <span class=\"comment\">// 5 5</span></span><br><span class=\"line\">        <span class=\"comment\">// 2 6</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">unique([<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-jquery-里面的-document-ready-function-和-window-onload-的区别\"><a href=\"#12-jquery-里面的-document-ready-function-和-window-onload-的区别\" class=\"headerlink\" title=\"12. jquery  里面的  $(document).ready(function(){})  和  window.onload  的区别\"></a>12. jquery  里面的  $(document).ready(function(){})  和  window.onload  的区别</h3><ul>\n<li><code>window.onload</code>需要等到页面中包括图片在内的元素全部加载完毕才能执行；<code>ready()</code>是DOM元素绘制结束之后就执行，不用等到加载完毕。</li>\n<li><code>window.onload</code>如果定义了多次，则只会执行一个，后者会覆盖前者； <code>ready()</code>可以同时编写多个，并且都会执行。</li>\n<li><code>window.onload</code>没有简化写法；<code>$(document).ready(function(){})</code>可以简化成<code>$(function(){})</code>。</li>\n<li>补充：<code>$(window).load(function(){})</code>和 <code>window.onload()</code>效果一致。</li>\n</ul>\n<h3 id=\"13-渐进增强与优雅降级\"><a href=\"#13-渐进增强与优雅降级\" class=\"headerlink\" title=\"13. 渐进增强与优雅降级\"></a>13. 渐进增强与优雅降级</h3><ul>\n<li>渐进增强 一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再对高级浏览器进行效果、交互的优化，达到更好的体验。</li>\n<li>优雅降级 一开始就构建站点的完整功能，然后针对浏览器进行测试和修复。比如一开始使用<code>CSS3</code>的特性构建了一个应用，然后逐步针对各大低级浏览器进行<code>hack</code>使其可以在低版本浏览器上正常浏览。</li>\n</ul>\n<h3 id=\"14-cookies、localStorage和sessionStorage的区别\"><a href=\"#14-cookies、localStorage和sessionStorage的区别\" class=\"headerlink\" title=\"14. cookies、localStorage和sessionStorage的区别\"></a>14. cookies、localStorage和sessionStorage的区别</h3><ul>\n<li>cookies存在于客户端，始终会在http请求中通过  Request Headers  Cookie头携带，即使当前请求不需要使用到cookie；大小一般在4KB，所以只适合保存很小的数据，比如会话标识；cookies在没有设置过期时间（expires）的时候，默认在关闭浏览器之后就会被清除，在有设置过期时间的时候，会一直持续到过期时间有效（即使关闭当前窗口或者关闭浏览器）。</li>\n<li>localStorage 和 sessionStorage不会发送数据到服务端，仅在本地保存；也有大小的限制，但一般在5M左右；localStorage一直有效，除非手动清除； sessionStorage只在浏览器关闭之前有效。</li>\n</ul>\n<p>另外： localStorage 和 cookies 在同源的浏览器窗口之间是共享的，sessionStorage不共享，因此至少有以下两种方法实现不同页面间的通信：</p>\n<ul>\n<li>利用localStorage</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A页面</span></span><br><span class=\"line\">$(<span class=\"string\">'#btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    localStorage.setItem(<span class=\"string\">'name'</span>, <span class=\"string\">'Jnathan'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// B页面</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'storage'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event.key + <span class=\"string\">'='</span> + event.newValue)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>利用cookie + setInterval()</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A页面</span></span><br><span class=\"line\">$(<span class=\"string\">'#btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.cookie = <span class=\"string\">\"name=\"</span> + <span class=\"string\">'Jnathan'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// B页面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getKey</span>(<span class=\"params\">key</span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"string\">\"&#123;\\\"\"</span>+ <span class=\"built_in\">document</span>.cookie.replace(<span class=\"regexp\">/;\\s+/gim</span>,<span class=\"string\">\"\\\",\\\"\"</span>).replace(<span class=\"regexp\">/=/gim</span>, <span class=\"string\">\"\\\":\\\"\"</span>) +<span class=\"string\">\"\\\"&#125;\"</span>)[key];  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'name:'</span>, getKey(<span class=\"string\">'name'</span>))</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"15-new-操作符的四个步骤\"><a href=\"#15-new-操作符的四个步骤\" class=\"headerlink\" title=\"15. new 操作符的四个步骤\"></a>15. new 操作符的四个步骤</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"keyword\">new</span> Fn()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建一个<code>空对象</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置<code>obj</code>的<code>原型</code>，将<code>obj</code>的<code>原型</code>指向<code>Fn</code>的<code>原型链</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.__proto__ = Fn.prototype</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将<code>Fn</code>中的<code>this</code>指向<code>obj</code>,并执行<code>Fn</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = Fn.call(obj)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>判断<code>Fn</code>的<code>返回值类型</code>。如果是<code>引用类型，则返回这个</code>引用类型的对象<code>；如果是</code>值类型<code>，则返回</code>obj`</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result == <span class=\"string\">'object'</span>) &#123;  <span class=\"comment\">// 引用类型</span></span><br><span class=\"line\">    fn = result</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 值类型</span></span><br><span class=\"line\">    fn = obj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"16-构造函数实现继承的几种方式\"><a href=\"#16-构造函数实现继承的几种方式\" class=\"headerlink\" title=\"16. 构造函数实现继承的几种方式\"></a>16. 构造函数实现继承的几种方式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.species = <span class=\"string\">'动物'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span> (<span class=\"params\">name, color</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = color</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使猫继承动物：</p>\n<ul>\n<li>call apply</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span> (<span class=\"params\">name, color</span>) </span>&#123;</span><br><span class=\"line\">    Animal.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = color</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat1 = <span class=\"keyword\">new</span> Cat(<span class=\"string\">'name1'</span>, <span class=\"string\">'color1'</span>)</span><br><span class=\"line\">alert(cat1.species) <span class=\"comment\">//  动物</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>prototype（其一）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span> (<span class=\"params\">name, color</span>) </span>&#123;</span><br><span class=\"line\">    Animal.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = color</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat1 = <span class=\"keyword\">new</span> Cat(<span class=\"string\">'name1'</span>, <span class=\"string\">'color1'</span>)</span><br><span class=\"line\">alert(cat1.species) <span class=\"comment\">//  动物</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>prototype（其二）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Animal.prototype.species = <span class=\"string\">'动物'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Cat.prototype = Animal.prototype</span><br><span class=\"line\">Cat.prototype.constructor = Cat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat3 = <span class=\"keyword\">new</span> Cat(<span class=\"string\">'name3'</span>, <span class=\"string\">'color3'</span>)</span><br><span class=\"line\">alert(cat3.species) <span class=\"comment\">// 动物</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>利用空对象作为中介 上面那种方法的缺点：Cat.prototype和Animal.prototype现在指向了同一个对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Fn.prototype = Animal.prototype</span><br><span class=\"line\">Cat.prototype = <span class=\"keyword\">new</span> Fn()</span><br><span class=\"line\">Cat.prototype.construvtor = Cat</span><br></pre></td></tr></table></figure>\n<p>将其封装成一个函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span> (<span class=\"params\">Child, Parent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">    Fn.prototype = Parent.prototype</span><br><span class=\"line\">    Child.prototype = <span class=\"keyword\">new</span> Fn()</span><br><span class=\"line\">    Child.prototype.constructor = Child</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">extend(Cat, Animal)</span><br><span class=\"line\"><span class=\"keyword\">var</span> cat4 = <span class=\"keyword\">new</span> Cat(<span class=\"string\">'name4'</span>, <span class=\"string\">'color4'</span>)</span><br><span class=\"line\">alert(cat4.species) <span class=\"comment\">// 动物</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>拷贝继承</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Animal.species = <span class=\"string\">'动物'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend2</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> C = Child.prototype</span><br><span class=\"line\">    <span class=\"keyword\">var</span> P = Parent.prototype</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> P) &#123;</span><br><span class=\"line\">        C[i] = P[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">extend2(Cat, Animal)</span><br><span class=\"line\"><span class=\"keyword\">var</span> cat5 = <span class=\"keyword\">new</span> Cat(<span class=\"string\">'name5'</span>, <span class=\"string\">'color5'</span>)</span><br><span class=\"line\">alert(cat5.species) <span class=\"comment\">// 动物</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"17-非构造函数的继承\"><a href=\"#17-非构造函数的继承\" class=\"headerlink\" title=\"17. 非构造函数的继承\"></a>17. 非构造函数的继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Chinese = &#123;</span><br><span class=\"line\">    nation: <span class=\"string\">'中国'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Doctor = &#123;</span><br><span class=\"line\">    career: <span class=\"string\">'医生'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>浅拷贝</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowCopy</span> (<span class=\"params\">Parent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Child = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> Parent) &#123;</span><br><span class=\"line\">        Child[i] = Parent[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Child</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> doctor1 = shallowCopy(Chinese)</span><br><span class=\"line\">alert(doctor1.nation) <span class=\"comment\">// 中国</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>深拷贝</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span> (<span class=\"params\">Child, Parent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Child = Child || &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> Parent) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> Parent[i] == <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">            Child[i] = (Parent[i].constructor === <span class=\"built_in\">Array</span>) ? [] : &#123;&#125;</span><br><span class=\"line\">            deepCopy(Child[i], Parent[i])</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Child[i] = Parent[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Child</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> doctor2 = deepCopy(Doctor, Chinese)</span><br><span class=\"line\">alert(doctor.nation) <span class=\"comment\">// 中国</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"18-参考链接\"><a href=\"#18-参考链接\" class=\"headerlink\" title=\"18. 参考链接\"></a>18. <a href=\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html\" target=\"_blank\" rel=\"noopener\">参考链接</a></h3>","site":{"data":{}},"excerpt":"<h3 id=\"1-setTimeout中方法体添加引号与不添加引号的区别\"><a href=\"#1-setTimeout中方法体添加引号与不添加引号的区别\" class=\"headerlink\" title=\"1. setTimeout中方法体添加引号与不添加引号的区别\"></a>1. setTimeout中方法体添加引号与不添加引号的区别</h3><blockquote>\n<p><code>添加引号</code>的情况，调用的函数是<code>全局范围</code>的。<code>未添加引号</code>的情况，调用的是<code>局部范围</code>的。</p>\n</blockquote>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> testFn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(<span class=\"string\">'hello from global'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> testFn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">'hello fron inner'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    setTimeout(<span class=\"string\">'testFn()'</span>, <span class=\"number\">1000</span>)  <span class=\"comment\">// hello form global</span></span><br><span class=\"line\">    setTimeout(testFn, <span class=\"number\">1000</span>)  <span class=\"comment\">// hello from inner</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在fn()函数内部没有定义testFn的时候，会向上寻找testFn，这里找到了全局函数，执行效果：</span></span><br><span class=\"line\">    setTimeout(testFn, <span class=\"number\">1000</span>)  <span class=\"comment\">// hello from global</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn()</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-AMD-CMD规范-common-js\"><a href=\"#2-AMD-CMD规范-common-js\" class=\"headerlink\" title=\"2. AMD/CMD规范 common.js\"></a>2. AMD/CMD规范 common.js</h3><p><code>common.js</code> 运行在<code>服务器端</code>，因为模块就在磁盘上，所以加载时间几乎可以忽略不计，属于同步加载。 [典型代表 <code>node.js</code>]<br><code>AMD</code>与<code>CMD</code>都属于异步加载，运行在<code>浏览器端</code>。<br><code>AMD</code> 推崇依赖前置，定义模块的时候就需要申明需要依赖的模块 [典型代表 <code>require.js</code>]<br><code>CMD</code> 推崇依赖就近，需要用到的时候才去require相关模块 [典型代表 <code>sea.js</code>]</p>\n<h3 id=\"3-stopPropagation-以及-stopImmediatePropagation\"><a href=\"#3-stopPropagation-以及-stopImmediatePropagation\" class=\"headerlink\" title=\"3. stopPropagation() 以及 stopImmediatePropagation()\"></a>3. stopPropagation() 以及 stopImmediatePropagation()</h3><p><code>stopImmediatePropagation</code> 用于阻止冒泡，在执行完当前元素上的事件处理程序之后，停止当前元素以及后续元素的事件处理程序</p>\n<p><code>stopPropagation</code> 同样也是用于阻止冒泡，在执行完绑定到当前元素上的所有事件处理程序之后，停止后续元素的事件处理程序</p>\n<p>同一个元素用<code>on</code>绑定多次同样事件时（例如click），最后一次会覆盖之前的事件，不会执行前面。而用<code>addEventListener</code>绑定多次同样事件时，都会执行。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"large\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 150px; height: 150px; background: orange\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"middle\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100px; height: 100px; background: cadetblue\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"small\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 50px; height:50px; background: coral\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> large = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'large'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> middle = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'middle'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> small = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'small'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    large.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">'large div is clicked'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    middle.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">'middle div is clicked'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第一种情况： 点击small时，会依次弹出三个窗口，这是因为向上冒泡产生的</span></span><br><span class=\"line\">    small.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     alert(<span class=\"string\">'small div is clicked'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第二种情况： 点击small时，会弹出四个窗口</span></span><br><span class=\"line\">    <span class=\"comment\">// small.addEventListener('click', function()&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//  alert('small-1 is clicked')</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">    <span class=\"comment\">// small.addEventListener('click', function()&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//  alert('small-2 is clicked')</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第三种情况，添加stopPropagation： 点击small时，会弹出两个窗口</span></span><br><span class=\"line\">    <span class=\"comment\">// small-1 is clicked    small-2 is clicked</span></span><br><span class=\"line\">    <span class=\"comment\">// small.addEventListener('click', function(event)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//  alert('small-1 is clicked')</span></span><br><span class=\"line\">    <span class=\"comment\">//  event.stopPropagation()</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">    <span class=\"comment\">// small.addEventListener('click', function()&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//  alert('small-2 is clicked')</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第四种情况，添加stopImmediatePropagation： 点击small时，会弹出一个窗口</span></span><br><span class=\"line\">    <span class=\"comment\">// small-1 is clicked</span></span><br><span class=\"line\">    <span class=\"comment\">// 能够很明显看到与stopPropagation的区别，调用stopImmediatePropagation之后，第二个定义的click事件也被取消而不被执行了。</span></span><br><span class=\"line\">    <span class=\"comment\">// small.addEventListener('click', function(event)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     alert('small-1 is clicked')</span></span><br><span class=\"line\">    <span class=\"comment\">//     event.stopImmediatePropagation()</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">    <span class=\"comment\">// small.addEventListener('click', function()&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     alert('small-2 is clicked')</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<div id=\"large\" style=\"box-sizing: border-box; width: 150px; height: 150px; background: orange; cursor: pointer;\"><!-- \n    --><div id=\"middle\" style=\"box-sizing: border-box; width: 100px; height: 100px; background: cadetblue\"><!-- \n        --><div id=\"small\" style=\"box-sizing: border-box; width: 50px; height:50px; background: coral\"></div><!-- \n    --></div><br></div>\n\n<script>\n    (function(){\n        var large = document.getElementById('large')\n        var middle = document.getElementById('middle')\n        var small = document.getElementById('small')\n\n        large.addEventListener('click', function(){\n            alert('large div is clicked')\n        })\n        middle.addEventListener('click', function(){\n            alert('middle div is clicked')\n        })\n\n        // 第一种情况： 点击small时，会依次弹出三个窗口，这是因为向上冒泡产生的\n        small.addEventListener('click', function(){\n        alert('small div is clicked')\n        })\n\n        // 第二种情况： 点击small时，会弹出四个窗口\n        // small.addEventListener('click', function(){\n        //  alert('small-1 is clicked')\n        // })\n        // small.addEventListener('click', function(){\n        //  alert('small-2 is clicked')\n        // })\n\n        // 第三种情况，添加stopPropagation： 点击small时，会弹出两个窗口\n        // small-1 is clicked    small-2 is clicked\n        // small.addEventListener('click', function(event){\n        //  alert('small-1 is clicked')\n        //  event.stopPropagation()\n        // })\n        // small.addEventListener('click', function(){\n        //  alert('small-2 is clicked')\n        // })\n\n        // 第四种情况，添加stopImmediatePropagation： 点击small时，会弹出一个窗口\n        // small-1 is clicked\n        // 能够很明显看到与stopPropagation的区别，调用stopImmediatePropagation之后，第二个定义的click事件也被取消而不被执行了。\n        // small.addEventListener('click', function(event){\n        //     alert('small-1 is clicked')\n        //     event.stopImmediatePropagation()\n        // })\n        // small.addEventListener('click', function(){\n        //     alert('small-2 is clicked')\n        // })\n    })()\n</script>\n\n<h3 id=\"4-js事件中的三个阶段\"><a href=\"#4-js事件中的三个阶段\" class=\"headerlink\" title=\"4. js事件中的三个阶段\"></a>4. js事件中的三个阶段</h3><p>三个阶段分别为<code>捕获阶段</code> <code>目标阶段</code> <code>冒泡阶段</code><br>element.addEventListener(type, fn[, useCapture])<br>useCapture - 指定事件句柄在捕获阶段或者冒泡阶段执行， 默认false(事件句柄在冒泡阶段执行)，设置为true(事件句柄在捕获阶段执行)。</p>\n<ul>\n<li>捕获阶段</li>\n<li>目标阶段</li>\n<li>冒泡阶段</li>\n</ul>\n<h3 id=\"5-常见的前端性能优化手段\"><a href=\"#5-常见的前端性能优化手段\" class=\"headerlink\" title=\"5. 常见的前端性能优化手段\"></a>5. 常见的前端性能优化手段</h3><ul>\n<li>css sprites（雪碧图）</li>\n<li>避免使用css表达式</li>\n<li>css样式表放在页面顶部，脚本放在页面底部</li>\n<li>内联图片和脚本使用data:URL（base64编码）模式直接包含在页面中，无需进行http请求，缺点：ie不支持，图片太大不适用，使用base64会增加页面体积，浏览器不会缓存</li>\n<li>使用内容分发网络CDN</li>\n<li>开启GZIP压缩，启用负载均衡</li>\n<li>开启keep alive减少与服务器链接次数 缺点：使服务器负载增大，也更容易遭受攻击</li>\n<li>精简压缩代码 uglifyjs</li>\n<li>避免重定向 常见的301 302</li>\n<li>配置e-tags 和 expires头 使用缓存</li>\n<li>按需加载资源</li>\n</ul>\n<h3 id=\"6-parseInt-以及-parseFloat\"><a href=\"#6-parseInt-以及-parseFloat\" class=\"headerlink\" title=\"6. parseInt() 以及 parseFloat()\"></a>6. parseInt() 以及 parseFloat()</h3><blockquote>\n<p>parseInt(string[, radix])</p>\n</blockquote>\n<ul>\n<li>string如果以‘ox’或者’oX’开头，将以16进制进行解析</li>\n<li>radix 要解析的数字基数，介于2-36之间</li>\n<li>如果不给值或者为0，则按照基数为10来计算</li>\n<li>如果小于2或者大于36，则返回NaN</li>\n<li>开头和结尾的空格是允许的</li>\n<li>如果字符串的第一个字符不能转换成对应的数字，将返回NaN</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'0x12'</span>)  <span class=\"comment\">// 17</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'0x12'</span>, <span class=\"number\">2</span>)  <span class=\"comment\">// 0  =&gt; parseInt('0', 2)</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'0x12'</span>, <span class=\"number\">10</span>)  <span class=\"comment\">// 0  =&gt; parseInt('0', 16)</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'8'</span>)  <span class=\"comment\">// =&gt; parseInt('8', 0) =&gt; parseInt('8', 10)  // 8</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'8'</span>, <span class=\"number\">1</span>)  <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'8'</span>, <span class=\"number\">37</span>)  <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'a23'</span>)  <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'2a3'</span>)  <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">' 23'</span>)  <span class=\"comment\">// 23</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">' 23 '</span>)  <span class=\"comment\">// 23</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">' 2 3 '</span>)  <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'11'</span>, <span class=\"number\">2</span>)  <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"number\">11</span>, <span class=\"number\">2</span>)  <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'1100'</span>, <span class=\"number\">2</span>)  <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'21'</span>, <span class=\"number\">2</span>)  <span class=\"comment\">// NaN 2超出了2进制最大值1，并且是第一个字符</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'12'</span>, <span class=\"number\">2</span>)  <span class=\"comment\">// 1 2同样超出了2进制最大值1，但是第一个字符可以转换成二进制</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'66'</span>, <span class=\"number\">8</span>) <span class=\"comment\">// 6*8^1 + 6*8^0 = 48 + 6 = 54</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'12'</span>, <span class=\"number\">16</span>) <span class=\"comment\">// 1*16^1 + 2*16^0 = 16 + 2 = 18</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(<span class=\"built_in\">parseInt</span>) <span class=\"comment\">//  [parseInt(0, 0), parseInt(1, 1), parseInt(2, 2), parseInt(3, 3)] =&gt; [0, NaN, NaN, NaN]</span></span><br></pre></td></tr></table></figure>\n<p>parseFloat()</p>\n<blockquote>\n<p>parseInt(string[, radix])  这里语法待修改</p>\n</blockquote>\n<ul>\n<li>开头和结尾的空格是允许的</li>\n<li>如果字符串的第一个字符不能转换成对应的数字，将返回NaN</li>\n<li>如果在解析过程中遇到了正负号（+ 或 -）、数字 (0-9)、小数点，或者科学记数法中的指数（e 或 E）以外的字符，则它会忽略该字符以及之后的所有字符</li>\n</ul>\n<h3 id=\"7-charAt-、charCodeAt-和-fromCharCode\"><a href=\"#7-charAt-、charCodeAt-和-fromCharCode\" class=\"headerlink\" title=\"7. charAt()、charCodeAt() 和 fromCharCode()\"></a>7. charAt()、charCodeAt() 和 fromCharCode()</h3><ul>\n<li><p>charAt()</p>\n<ul>\n<li>String.charAt(index)</li>\n<li>返回字符串中指定位置的字符, 索引值 index &lt; 0 或超出了范围则返回一个空字符串</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'abc'</span>.charAt(<span class=\"number\">1</span>)  <span class=\"comment\">// 'b'</span></span><br><span class=\"line\"><span class=\"string\">'abc'</span>.charAt(<span class=\"number\">-2</span>)  <span class=\"comment\">// ''</span></span><br><span class=\"line\"><span class=\"string\">'abc'</span>.charAt(<span class=\"number\">5</span>)  <span class=\"comment\">// ''</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>charCodeAt()</p>\n<ul>\n<li>String.charCodeAt(index)</li>\n<li>返回字符串中指定位置的字符的 unicode 数值 [0, 1114111]</li>\n<li>开头的 128 个 unicode 编码单元和 ASCII 字符编码一样</li>\n<li>索引值 index &lt; 0 或超出了范围则返回一个 NaN, 大于 255 的是中文</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'AabcdD'</span>.charCodeAt(<span class=\"number\">0</span>)  <span class=\"comment\">// 65</span></span><br><span class=\"line\"><span class=\"string\">'AabcdD'</span>.charCodeAt(<span class=\"number\">1</span>)  <span class=\"comment\">// 97</span></span><br><span class=\"line\"><span class=\"string\">'AabcdD'</span>.charCodeAt(<span class=\"number\">-1</span>)  <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"string\">'AabcdD'</span>.charCodeAt(<span class=\"number\">8</span>)  <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"string\">'中国'</span>.charCodeAt(<span class=\"number\">1</span>)  <span class=\"comment\">// 22269</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>fromCharCode()</p>\n<ul>\n<li>String.fromCharCode(num1, num2, num3, …)</li>\n<li>根据指定的 unicode 编码中的序号值来返回字符串</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">65</span>, <span class=\"number\">66</span>, <span class=\"number\">97</span>)  <span class=\"comment\">// 'ABa'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8-原生ajax\"><a href=\"#8-原生ajax\" class=\"headerlink\" title=\"8. 原生ajax\"></a>8. 原生ajax</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\"><span class=\"comment\">//  请求方式  请求路径  是否异步发送请求</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'http://www.jnathan.cn/jnathan/effect/authKit.js'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">xhr.send(<span class=\"string\">'hello world'</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span> &amp;&amp; xhr.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// alert(xhr.responseText)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-有一个长度为n的数组，假定全部为整数，其中有且仅有一个数出现了奇数次，其他的数字都出现偶数次，找出出现了奇数次的那个数字。\"><a href=\"#9-有一个长度为n的数组，假定全部为整数，其中有且仅有一个数出现了奇数次，其他的数字都出现偶数次，找出出现了奇数次的那个数字。\" class=\"headerlink\" title=\"9. 有一个长度为n的数组，假定全部为整数，其中有且仅有一个数出现了奇数次，其他的数字都出现偶数次，找出出现了奇数次的那个数字。\"></a>9. 有一个长度为n的数组，假定全部为整数，其中有且仅有一个数出现了奇数次，其他的数字都出现偶数次，找出出现了奇数次的那个数字。</h3><blockquote>\n<p>时间复杂度为O(n) 空间复杂度O(1)<br>利用了<code>n ^ n = 0</code>, <code>n ^ 0 = n</code>两个等式的原理。<br>循环对数组数字进行异或计算，即  <code>0 ^ arr[0] ^ arr[1] ^ ... ^ arr[n - 1]</code> ，异或计算满足交换律原则，如果数组元素出现了相同的情况，可以移动到一起先进行计算，如果出现了<code>偶数次</code>，其结果为  <code>0</code>，出现了奇数次的数其结果为该数字，所以表达式最后得出来的结果即为数组所有<code>出现了奇数次元素</code>的<code>异或操作</code>的结果。比如：[1,2,2,3,4,4]进行异或操作得到的结果是 <code>1 ^ 3 = 2</code> ，特殊情况下（只有一个数字出现了<code>奇数次</code>），那么最后的结果就是出现了<code>奇数次</code>的那个数字！！</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn7</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oddTimesNumber = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">        oddTimesNumber = oddTimesNumber ^ arr[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> oddTimesNumber</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn7([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>])  <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"10-递归求1-10的和\"><a href=\"#10-递归求1-10的和\" class=\"headerlink\" title=\"10. 递归求1-10的和\"></a>10. 递归求1-10的和</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span>(<span class=\"params\">nextArr, curSum = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = nextArr[<span class=\"number\">0</span>] + curSum</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextArr.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getSum(nextArr.slice(<span class=\"number\">1</span>), sum)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getSum([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-去除数组重复元素\"><a href=\"#11-去除数组重复元素\" class=\"headerlink\" title=\"11. 去除数组重复元素\"></a>11. 去除数组重复元素</h3><ul>\n<li>直接双层循环比较</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = []</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isRepeat</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        isRepeat = <span class=\"literal\">false</span>  <span class=\"comment\">// 默认不重复，进行push操作，当判断重复时不操作</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; result.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] === result[j]) &#123;</span><br><span class=\"line\">                isRepeat = <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isRepeat) &#123;</span><br><span class=\"line\">            result.push(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">unique([<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>利用<code>indexOf()</code>， 但是<code>indexOf</code>会一直循环到找到目标为止，浪费了时间</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result.indexOf(arr[i]) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            result.push(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">unique([<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>最快的方法 把已经出现过的元素通过下标的形式存入一个<code>Object</code>内。下标的引用的实现原理利用的是哈希算法，要比用<code>indexOf()</code>搜索数组快的多。由于多了一个<code>hash</code>表，占用的内存会更多，空间换时间做法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// hashObj为hash表，result为临时数组</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> hashObj = &#123;&#125;, result = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果hash表中没有当前项</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hashObj[arr[i]]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 存入hash表</span></span><br><span class=\"line\">            hashObj[arr[i]] = <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"comment\">// 把当前数组的当前项push到临时数组里面</span></span><br><span class=\"line\">            result.push(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>折衷方法 时间上比<code>indexOf</code>快，比<code>hash</code>表的方式要慢。先按照从小到大的顺序排序，然后比较相邻的两个值大小</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    arr.sort()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [arr[<span class=\"number\">0</span>]]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] !== result[result.length - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            result.push(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>es6</code>的<code>filter()</code>方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.filter( <span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> &#123; </span><br><span class=\"line\">        arr.indexOf(value) === index</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(arr.indexOf(value), index)</span><br><span class=\"line\">        <span class=\"comment\">// 0 0</span></span><br><span class=\"line\">        <span class=\"comment\">// 0 1</span></span><br><span class=\"line\">        <span class=\"comment\">// 2 2</span></span><br><span class=\"line\">        <span class=\"comment\">// 3 3</span></span><br><span class=\"line\">        <span class=\"comment\">// 4 4</span></span><br><span class=\"line\">        <span class=\"comment\">// 5 5</span></span><br><span class=\"line\">        <span class=\"comment\">// 2 6</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">unique([<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-jquery-里面的-document-ready-function-和-window-onload-的区别\"><a href=\"#12-jquery-里面的-document-ready-function-和-window-onload-的区别\" class=\"headerlink\" title=\"12. jquery  里面的  $(document).ready(function(){})  和  window.onload  的区别\"></a>12. jquery  里面的  $(document).ready(function(){})  和  window.onload  的区别</h3><ul>\n<li><code>window.onload</code>需要等到页面中包括图片在内的元素全部加载完毕才能执行；<code>ready()</code>是DOM元素绘制结束之后就执行，不用等到加载完毕。</li>\n<li><code>window.onload</code>如果定义了多次，则只会执行一个，后者会覆盖前者； <code>ready()</code>可以同时编写多个，并且都会执行。</li>\n<li><code>window.onload</code>没有简化写法；<code>$(document).ready(function(){})</code>可以简化成<code>$(function(){})</code>。</li>\n<li>补充：<code>$(window).load(function(){})</code>和 <code>window.onload()</code>效果一致。</li>\n</ul>\n<h3 id=\"13-渐进增强与优雅降级\"><a href=\"#13-渐进增强与优雅降级\" class=\"headerlink\" title=\"13. 渐进增强与优雅降级\"></a>13. 渐进增强与优雅降级</h3><ul>\n<li>渐进增强 一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再对高级浏览器进行效果、交互的优化，达到更好的体验。</li>\n<li>优雅降级 一开始就构建站点的完整功能，然后针对浏览器进行测试和修复。比如一开始使用<code>CSS3</code>的特性构建了一个应用，然后逐步针对各大低级浏览器进行<code>hack</code>使其可以在低版本浏览器上正常浏览。</li>\n</ul>\n<h3 id=\"14-cookies、localStorage和sessionStorage的区别\"><a href=\"#14-cookies、localStorage和sessionStorage的区别\" class=\"headerlink\" title=\"14. cookies、localStorage和sessionStorage的区别\"></a>14. cookies、localStorage和sessionStorage的区别</h3><ul>\n<li>cookies存在于客户端，始终会在http请求中通过  Request Headers  Cookie头携带，即使当前请求不需要使用到cookie；大小一般在4KB，所以只适合保存很小的数据，比如会话标识；cookies在没有设置过期时间（expires）的时候，默认在关闭浏览器之后就会被清除，在有设置过期时间的时候，会一直持续到过期时间有效（即使关闭当前窗口或者关闭浏览器）。</li>\n<li>localStorage 和 sessionStorage不会发送数据到服务端，仅在本地保存；也有大小的限制，但一般在5M左右；localStorage一直有效，除非手动清除； sessionStorage只在浏览器关闭之前有效。</li>\n</ul>\n<p>另外： localStorage 和 cookies 在同源的浏览器窗口之间是共享的，sessionStorage不共享，因此至少有以下两种方法实现不同页面间的通信：</p>\n<ul>\n<li>利用localStorage</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A页面</span></span><br><span class=\"line\">$(<span class=\"string\">'#btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    localStorage.setItem(<span class=\"string\">'name'</span>, <span class=\"string\">'Jnathan'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// B页面</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'storage'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event.key + <span class=\"string\">'='</span> + event.newValue)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>利用cookie + setInterval()</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A页面</span></span><br><span class=\"line\">$(<span class=\"string\">'#btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.cookie = <span class=\"string\">\"name=\"</span> + <span class=\"string\">'Jnathan'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// B页面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getKey</span>(<span class=\"params\">key</span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"string\">\"&#123;\\\"\"</span>+ <span class=\"built_in\">document</span>.cookie.replace(<span class=\"regexp\">/;\\s+/gim</span>,<span class=\"string\">\"\\\",\\\"\"</span>).replace(<span class=\"regexp\">/=/gim</span>, <span class=\"string\">\"\\\":\\\"\"</span>) +<span class=\"string\">\"\\\"&#125;\"</span>)[key];  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'name:'</span>, getKey(<span class=\"string\">'name'</span>))</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"15-new-操作符的四个步骤\"><a href=\"#15-new-操作符的四个步骤\" class=\"headerlink\" title=\"15. new 操作符的四个步骤\"></a>15. new 操作符的四个步骤</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"keyword\">new</span> Fn()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建一个<code>空对象</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置<code>obj</code>的<code>原型</code>，将<code>obj</code>的<code>原型</code>指向<code>Fn</code>的<code>原型链</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.__proto__ = Fn.prototype</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将<code>Fn</code>中的<code>this</code>指向<code>obj</code>,并执行<code>Fn</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = Fn.call(obj)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>判断<code>Fn</code>的<code>返回值类型</code>。如果是<code>引用类型，则返回这个</code>引用类型的对象<code>；如果是</code>值类型<code>，则返回</code>obj`</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result == <span class=\"string\">'object'</span>) &#123;  <span class=\"comment\">// 引用类型</span></span><br><span class=\"line\">    fn = result</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 值类型</span></span><br><span class=\"line\">    fn = obj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"16-构造函数实现继承的几种方式\"><a href=\"#16-构造函数实现继承的几种方式\" class=\"headerlink\" title=\"16. 构造函数实现继承的几种方式\"></a>16. 构造函数实现继承的几种方式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.species = <span class=\"string\">'动物'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span> (<span class=\"params\">name, color</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = color</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使猫继承动物：</p>\n<ul>\n<li>call apply</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span> (<span class=\"params\">name, color</span>) </span>&#123;</span><br><span class=\"line\">    Animal.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = color</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat1 = <span class=\"keyword\">new</span> Cat(<span class=\"string\">'name1'</span>, <span class=\"string\">'color1'</span>)</span><br><span class=\"line\">alert(cat1.species) <span class=\"comment\">//  动物</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>prototype（其一）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span> (<span class=\"params\">name, color</span>) </span>&#123;</span><br><span class=\"line\">    Animal.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = color</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat1 = <span class=\"keyword\">new</span> Cat(<span class=\"string\">'name1'</span>, <span class=\"string\">'color1'</span>)</span><br><span class=\"line\">alert(cat1.species) <span class=\"comment\">//  动物</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>prototype（其二）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Animal.prototype.species = <span class=\"string\">'动物'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Cat.prototype = Animal.prototype</span><br><span class=\"line\">Cat.prototype.constructor = Cat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat3 = <span class=\"keyword\">new</span> Cat(<span class=\"string\">'name3'</span>, <span class=\"string\">'color3'</span>)</span><br><span class=\"line\">alert(cat3.species) <span class=\"comment\">// 动物</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>利用空对象作为中介 上面那种方法的缺点：Cat.prototype和Animal.prototype现在指向了同一个对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Fn.prototype = Animal.prototype</span><br><span class=\"line\">Cat.prototype = <span class=\"keyword\">new</span> Fn()</span><br><span class=\"line\">Cat.prototype.construvtor = Cat</span><br></pre></td></tr></table></figure>\n<p>将其封装成一个函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span> (<span class=\"params\">Child, Parent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">    Fn.prototype = Parent.prototype</span><br><span class=\"line\">    Child.prototype = <span class=\"keyword\">new</span> Fn()</span><br><span class=\"line\">    Child.prototype.constructor = Child</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">extend(Cat, Animal)</span><br><span class=\"line\"><span class=\"keyword\">var</span> cat4 = <span class=\"keyword\">new</span> Cat(<span class=\"string\">'name4'</span>, <span class=\"string\">'color4'</span>)</span><br><span class=\"line\">alert(cat4.species) <span class=\"comment\">// 动物</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>拷贝继承</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Animal.species = <span class=\"string\">'动物'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend2</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> C = Child.prototype</span><br><span class=\"line\">    <span class=\"keyword\">var</span> P = Parent.prototype</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> P) &#123;</span><br><span class=\"line\">        C[i] = P[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">extend2(Cat, Animal)</span><br><span class=\"line\"><span class=\"keyword\">var</span> cat5 = <span class=\"keyword\">new</span> Cat(<span class=\"string\">'name5'</span>, <span class=\"string\">'color5'</span>)</span><br><span class=\"line\">alert(cat5.species) <span class=\"comment\">// 动物</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"17-非构造函数的继承\"><a href=\"#17-非构造函数的继承\" class=\"headerlink\" title=\"17. 非构造函数的继承\"></a>17. 非构造函数的继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Chinese = &#123;</span><br><span class=\"line\">    nation: <span class=\"string\">'中国'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Doctor = &#123;</span><br><span class=\"line\">    career: <span class=\"string\">'医生'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>浅拷贝</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowCopy</span> (<span class=\"params\">Parent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Child = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> Parent) &#123;</span><br><span class=\"line\">        Child[i] = Parent[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Child</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> doctor1 = shallowCopy(Chinese)</span><br><span class=\"line\">alert(doctor1.nation) <span class=\"comment\">// 中国</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>深拷贝</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span> (<span class=\"params\">Child, Parent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Child = Child || &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> Parent) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> Parent[i] == <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">            Child[i] = (Parent[i].constructor === <span class=\"built_in\">Array</span>) ? [] : &#123;&#125;</span><br><span class=\"line\">            deepCopy(Child[i], Parent[i])</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Child[i] = Parent[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Child</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> doctor2 = deepCopy(Doctor, Chinese)</span><br><span class=\"line\">alert(doctor.nation) <span class=\"comment\">// 中国</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"18-参考链接\"><a href=\"#18-参考链接\" class=\"headerlink\" title=\"18. 参考链接\"></a>18. <a href=\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html\" target=\"_blank\" rel=\"noopener\">参考链接</a></h3>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjyo49r5e0004u16t6f0fwikx","tag_id":"cjyo49r5g0006u16t4ztasynb","_id":"cjyo49r5q000du16tl5jly8lt"},{"post_id":"cjyo49r5e0004u16t6f0fwikx","tag_id":"cjyo49r5n000au16tfbkhkxt0","_id":"cjyo49r5q000eu16t0ihqw7ru"},{"post_id":"cjyo49r5e0004u16t6f0fwikx","tag_id":"cjyo49r5n000bu16tswoyc9py","_id":"cjyo49r5r000gu16tkvine3xo"},{"post_id":"cjyo49r5f0005u16tj96wyx9w","tag_id":"cjyo49r5p000cu16twbp1zxkz","_id":"cjyo49r5r000iu16t13igj3x6"},{"post_id":"cjyo49r5f0005u16tj96wyx9w","tag_id":"cjyo49r5r000fu16tsts1prje","_id":"cjyo49r5r000ju16t4oftmpun"},{"post_id":"cjyo49r5l0008u16twsevzzi6","tag_id":"cjyo49r5r000hu16tb06yy1h2","_id":"cjyo49r5s000lu16tec52afxq"},{"post_id":"cjyo49r5m0009u16tgo1c31lj","tag_id":"cjyo49r5r000ku16thdxd809z","_id":"cjyo49r5s000nu16tjtclb2kb"},{"post_id":"cjyo49r5m0009u16tgo1c31lj","tag_id":"cjyo49r5s000mu16tvezxiryy","_id":"cjyo49r5s000ou16tekygh8i1"},{"post_id":"cjyo49r69000pu16tunzp3nmo","tag_id":"cjyo49r6a000qu16tnx0j85ji","_id":"cjyo49r6b000ru16tah41qyzz"}],"Tag":[{"name":"ellipsis","_id":"cjyo49r5g0006u16t4ztasynb"},{"name":"换行","_id":"cjyo49r5n000au16tfbkhkxt0"},{"name":"省略号","_id":"cjyo49r5n000bu16tswoyc9py"},{"name":"this","_id":"cjyo49r5p000cu16twbp1zxkz"},{"name":"作用域","_id":"cjyo49r5r000fu16tsts1prje"},{"name":"webpack","_id":"cjyo49r5r000hu16tb06yy1h2"},{"name":"企微","_id":"cjyo49r5r000ku16thdxd809z"},{"name":"超链接","_id":"cjyo49r5s000mu16tvezxiryy"},{"name":"dairy","_id":"cjyo49r6a000qu16tnx0j85ji"}]}}